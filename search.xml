<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/archives/0.html"/>
      <url>/archives/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes-配置-kubeconfig-访问多个集群"><a href="#Kubernetes-配置-kubeconfig-访问多个集群" class="headerlink" title="Kubernetes 配置 kubeconfig 访问多个集群"></a>Kubernetes 配置 kubeconfig 访问多个集群</h1><h2 id="test集群（-kube-config）"><a href="#test集群（-kube-config）" class="headerlink" title="test集群（~/.kube/config）"></a>test集群（~/.kube/config）</h2><pre><code>apiVersion: v1clusters:- cluster:    insecure-skip-tls-verify: true    server: https://localhost:6443  name: testcontexts:- context:    cluster: test    user: test-admin  name: testcurrent-context: testkind: Configpreferences: {}users:- name: test-admin  user:    client-certificate-data: CLIENT_CERTIFICATE_DATA    client-key-data: CLIENT_KEY_DATA</code></pre><h2 id="prod集群（-kube-config）"><a href="#prod集群（-kube-config）" class="headerlink" title="prod集群（~/.kube/config）"></a>prod集群（~/.kube/config）</h2><pre><code>apiVersion: v1clusters:- cluster:    insecure-skip-tls-verify: true    server: https://localhost:6443  name: prodcontexts:- context:    cluster: prod    user: prod-admin  name: prodcurrent-context: prodkind: Configpreferences: {}users:- name: prod-admin  user:    client-certificate-data: CLIENT_CERTIFICATE_DATA    client-key-data: CLIENT_KEY_DATA</code></pre><h2 id="合并后（-kube-config）"><a href="#合并后（-kube-config）" class="headerlink" title="合并后（~/.kube/config）"></a>合并后（~/.kube/config）</h2><pre><code>apiVersion: v1clusters:- cluster:    insecure-skip-tls-verify: true    server: https://localhost:6443  name: test- cluster:    certificate-authority-data: CERTIFICATE_AUTHORITY_DATA    server: https://localhost:6443  name: prodcontexts:- context:    cluster: test    user: test-admin  name: test- context:    cluster: prod    user: prod-admin  name: prodcurrent-context: &quot;&quot; #默认集群设置为空kind: Configpreferences: {}users:- name: test  user:    client-certificate-data: CLIENT_CERTIFICATE_DATA    client-key-data: CLIENT_KEY_DATA- name: prod  user:    client-certificate-data: CLIENT_CERTIFICATE_DATA    client-key-data: CLIENT_KEY_DATA</code></pre><h2 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h2><pre><code>kubectl config get-contexts</code></pre><h2 id="切换集群"><a href="#切换集群" class="headerlink" title="切换集群"></a>切换集群</h2><pre><code>kubectl config use-context testkubectl config use-context prod</code></pre><p>注：如果想限制用户的 Namespace，可以在 context 中加入namespaces 配置.</p><pre><code>- context:    cluster: test    user: test-admin    namespace: default  name: test</code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/" target="_blank" rel="noopener">kubernetes官方文档</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/archives/0.html"/>
      <url>/archives/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="jenkins-devops-piplne发送邮件配置"><a href="#jenkins-devops-piplne发送邮件配置" class="headerlink" title="jenkins devops piplne发送邮件配置"></a>jenkins devops piplne发送邮件配置</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>安装email-ext-plugin插件</li><li>配置jenkins</li><li>pipline发送邮件</li></ul><h2 id="安装email-ext-plugin插件"><a href="#安装email-ext-plugin插件" class="headerlink" title="安装email-ext-plugin插件"></a>安装email-ext-plugin插件</h2><p>jenkins –&gt; 系统管理 –&gt; 系统设置 –&gt; Extended E-mail Notification</p><h2 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h2><p>Default Subject</p><pre><code>构建通知:$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!</code></pre><p>Default Content</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body leftmargin=&quot;8&quot; marginwidth=&quot;0&quot; topmargin=&quot;8&quot; marginheight=&quot;4&quot;    offset=&quot;0&quot;&gt;    &lt;table width=&quot;95%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;        style=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&gt;        &lt;tr&gt;            &lt;td&gt;&lt;br /&gt;            &lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;构建信息&lt;/font&gt;&lt;/b&gt;            &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;ul&gt;                     &lt;li&gt;项目名称：${PROJECT_NAME}&lt;/li&gt;                    &lt;li&gt;构建结果:  &lt;span style=&quot;color:red&quot;&gt; ${BUILD_STATUS}&lt;/span&gt;&lt;/li&gt;                      &lt;li&gt;构建编号：第${BUILD_NUMBER}次构建 &lt;/li&gt;                    &lt;li&gt;触发原因 ：${CAUSE}&lt;/li&gt;                    &lt;li&gt;GIT 地址： ${gitlabSourceRepoHomepage}&lt;/li&gt;                                        &lt;li&gt;GIT 分支：${gitlabSourceBranch}&lt;/li&gt;                    &lt;li&gt;镜像标签：${tag}&lt;/li&gt;                    &lt;li&gt;变更记录: ${CHANGES,showPaths=true,showDependencies=true,format=&quot;&lt;pre&gt;&lt;ul&gt;&lt;li&gt;提交ID: %r&lt;/li&gt;&lt;li&gt;提交人：%a&lt;/li&gt;&lt;li&gt;提交时间：%d&lt;/li&gt;&lt;li&gt;提交信息：%m&lt;/li&gt;&lt;li&gt;提交文件：%p&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt;&quot;,pathFormat=&quot;%p &lt;br /&gt;&quot;}                &lt;/ul&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;&lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;变更集&lt;/font&gt;&lt;/b&gt;              &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;          &lt;/td&gt;          &lt;/tr&gt;                  &lt;tr&gt;            &lt;td&gt;${JELLY_SCRIPT,template=&quot;html&quot;}&lt;br/&gt;              &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;          &lt;/td&gt;          &lt;/tr&gt;         &lt;tr&gt;            &lt;td&gt;&lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;构建日志 :&lt;/font&gt;&lt;/b&gt;            &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;&lt;textarea cols=&quot;150&quot; rows=&quot;30&quot; readonly=&quot;readonly&quot;                    style=&quot;font-family: Courier New&quot;&gt;${BUILD_LOG}&lt;/textarea&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="pipline"><a href="#pipline" class="headerlink" title="pipline"></a>pipline</h2><pre><code>def label = &quot;mypod-${UUID.randomUUID().toString()}&quot;def tag = &#39;1&#39;def tomail = &#39;xxx@xxx.com&#39;if (gitlabSourceBranch==&#39;T1&#39;){   tag = &#39;test&#39;} elseif (gitlabSourceBranch==&#39;R1&#39;){    print(gitlabSourceBranch)} else {    print(&quot;请使用关键分支push触发构建&quot;)    currentBuild.result = &#39;SUCCESS&#39;    return}podTemplate(label: label,cloud: &#39;kubernetes&#39;,containers: [    containerTemplate(        name: &#39;jnlp&#39;,        alwaysPullImage: true,         image: &#39;registry.cn-hangzhou.aliyuncs.com/mypaas/jenkins-jnlp:latest&#39;,         privileged: false,         ttyEnabled: true,         workingDir: &#39;/home/jenkins&#39;)    ],     name: &quot;jnlp-${appName}&quot;,    namespace: &#39;default&#39;,      podRetention: never(),     volumes: [        hostPathVolume(hostPath: &#39;/var/run/docker.sock&#39;, mountPath: &#39;/var/run/docker.sock&#39;),         persistentVolumeClaim(claimName: &#39;jenkins-code-nas&#39;, mountPath: &#39;/home/jenkins&#39;, readOnly: false)]){         node(label) {      try {            stage(&#39;Clone&#39;) {            echo &quot;1.Clone Stage&quot;            git credentialsId: &#39;xxx&#39;, url: &#39;git@xxx.git&#39;,branch:gitlabSourceBranch        }    // get tag        if (gitlabSourceBranch==&#39;T1&#39;){           tag = &#39;test&#39;        } else        if (gitlabSourceBranch==&#39;R1&#39;){            script {                tag = sh(returnStdout: true, script: &#39;cat release.tag&#39;).trim()                }        }         print(tag)             stage(&#39;PHPUNIT Test&#39;) {            echo &quot;2.Test Stage&quot;            sh &#39;printenv&#39;        }        // mail stage        emailext (             body: &#39;&#39;&#39;            ${DEFAULT_CONTENT}            &#39;&#39;&#39;,             recipientProviders: [developers()],             subject: &#39;${DEFAULT_SUBJECT}&#39;,             to: &quot;${tomail}&quot;            )               } catch (any) {        currentBuild.result = &#39;FAILURE&#39;        throw any    } finally {        if (currentBuild.result == &#39;FAILURE&#39;) {            emailext (             body: &#39;&#39;&#39;            ${DEFAULT_CONTENT}            &#39;&#39;&#39;,             recipientProviders: [developers()],             subject: &#39;${DEFAULT_SUBJECT}&#39;,             to: &quot;${tomail}&quot;            )        }            }            }    }        </code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p><a href="https://github.com/jenkinsci/email-ext-plugin/tree/master/src/main/resources/hudson/plugins/emailext/templates" target="_blank" rel="noopener">https://github.com/jenkinsci/email-ext-plugin/tree/master/src/main/resources/hudson/plugins/emailext/templates</a></p></li><li><p><a href="https://github.com/whihail/AutoArchive/wiki/%E5%AE%A2%E6%88%B7%E7%AB%AFJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97%E4%B9%8B%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5" target="_blank" rel="noopener">https://github.com/whihail/AutoArchive/wiki/%E5%AE%A2%E6%88%B7%E7%AB%AFJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97%E4%B9%8B%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/archives/0.html"/>
      <url>/archives/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="精简-Docker-镜像的技巧"><a href="#精简-Docker-镜像的技巧" class="headerlink" title="精简 Docker 镜像的技巧"></a>精简 Docker 镜像的技巧</h1><p>精简 Docker 镜像的好处很多，不仅可以节省存储空间和带宽，还能减少安全隐患。优化镜像大小的手段多种多样，因服务所使用的基础开发语言不同而有差异。本文将介绍精简 Docker 镜像的几种通用方法。</p><h2 id="精简-Docker-镜像大小的必要性"><a href="#精简-Docker-镜像大小的必要性" class="headerlink" title="精简 Docker 镜像大小的必要性"></a>精简 Docker 镜像大小的必要性</h2><p>Docker 镜像由很多镜像层（Layers）组成（最多 127 层），镜像层依赖于一系列的底层技术，比如文件系统（filesystems）、写时复制（copy-on-write）、联合挂载（union mounts）等技术，你可以查看Docker 社区文档以了解更多有关 Docker 存储驱动的内容，这里就不再赘述技术细节。总的来说，Dockerfile 中的每条指令都会创建一个镜像层，继而会增加整体镜像的尺寸。</p><p>下面是精简 Docker 镜像尺寸的好处：</p><pre><code>1.减少构建时间2.减少磁盘使用量3.减少下载时间4.因为包含文件少，攻击面减小，提高了安全性5.提高部署速度</code></pre><h2 id="编写小容量镜像的Dockerfile的技巧"><a href="#编写小容量镜像的Dockerfile的技巧" class="headerlink" title="编写小容量镜像的Dockerfile的技巧"></a>编写小容量镜像的Dockerfile的技巧</h2><h3 id="使用较小的基础镜像"><a href="#使用较小的基础镜像" class="headerlink" title="使用较小的基础镜像"></a>使用较小的基础镜像</h3><p>优化基础镜像的方法就是选用合适的更小的基础镜像，常用的 Linux 系统镜像一般有 Ubuntu、CentOs、Alpine，其中 Alpine 更推荐使用。大小对比如下：alpine &lt; ubuntu &lt; debian &lt; centos</p><p>另外可以选择适合更小的基础镜像</p><p>1、scratch 镜像（空镜像，只能用于构建其他镜像，比如你要运行一个包含所有依赖的二进制文件，如Golang 程序，可以直接使用 scratch 作为基础镜像。）</p><pre><code>FROME scratchARG ARCHADD bin/pause-${ARCH} /pauseENTRYPOINT [&quot;/pause&quot;]</code></pre><p>2、busybox 镜像（镜像里可以包含一些常用的 Linux 工具，busybox 镜像是个不错选择，镜像本身只有 1.16M，非常便于构建小镜像）</p><h3 id="将多个命令集放在一行"><a href="#将多个命令集放在一行" class="headerlink" title="将多个命令集放在一行"></a>将多个命令集放在一行</h3><p>大家在定义 Dockerfile 时，如果太多的使用 RUN 指令，经常会导致镜像有特别多的层，镜像很臃肿，而且甚至会碰到超出最大层数（127层）限制的问题，遵循 Dockerfile 最佳实践，我们应该把多个命令串联合并为一个 RUN（通过运算符&amp;&amp;和/ 来实现），每一个 RUN 要精心设计，确保安装构建最后进行清理，这样才可以降低镜像体积，以及最大化的利用构建缓存。。以Nginx的官方的Dockerfile为例：</p><pre><code>FROM debian:jessieMAINTAINER NGINX Docker Maintainers &quot;docker-maint@nginx.com&quot;ENV NGINX_VERSION 1.11.3-1~jessieRUN apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \    &amp;&amp; echo &quot;deb http://nginx.org/packages/mainline/debian/ jessie nginx&quot; &gt;&gt; /etc/apt/sources.list \    &amp;&amp; apt-get update \    &amp;&amp; apt-get install --no-install-recommends --no-install-suggests -y \                        ca-certificates \                        nginx=${NGINX_VERSION} \                        nginx-module-xslt \                        nginx-module-geoip \                        nginx-module-image-filter \                        nginx-module-perl \                        nginx-module-njs \                        gettext-base \    &amp;&amp; rm -rf /var/lib/apt/lists/*# forward request and error logs to docker log collectorRUN ln -sf /dev/stdout /var/log/nginx/access.log \    &amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.logEXPOSE 80 443CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></pre><h3 id="使用多阶段构建"><a href="#使用多阶段构建" class="headerlink" title="使用多阶段构建"></a>使用多阶段构建</h3><p>Dockerfile 中每条指令都会为镜像增加一个镜像层，并且你需要在移动到下一个镜像层之前清理不需要的组件。实际上，有一个 Dockerfile 用于开发（其中包含构建应用程序所需的所有内容）以及一个用于生产的瘦客户端，它只包含你的应用程序以及运行它所需的内容。这被称为“建造者模式”。Docker 17.05.0-ce 版本以后支持多阶段构建。使用多阶段构建，你可以在 Dockerfile 中使用多个 FROM 语句，每条 FROM 指令可以使用不同的基础镜像，这样您可以选择性地将服务组件从一个阶段 COPY 到另一个阶段，在最终镜像中只保留需要的内容。</p><p>下面是一个使用 COPY –from 和 FROM … AS … 的 Dockerfile：</p><pre><code># CompileFROME golang:1.9.0 AS builderWORKDIR /go/src/v9.git...com/.../k8s-monitorCOPY . .WORKDIR /go/src/v9.git...com/.../k8s-monitorRUN make build &amp;&amp; mv k8s-monitor /root# Package# Use scratch imageFROM scratchWORKDIR /root/COPY --from=builder /root .EXPOSE 800CMD [&quot;/root/k8s-monitor&quot;]</code></pre><h3 id="使用缓存加快构建速度"><a href="#使用缓存加快构建速度" class="headerlink" title="使用缓存加快构建速度"></a>使用缓存加快构建速度</h3><p>Docker 在 build 镜像的时候，如果某个命令相关的内容没有变化，会使用上一次缓存（cache）的文件层，在构建业务镜像的时候可以注意下面两点：</p><ul><li><p>不变或者变化很少的体积较大的依赖库和经常修改的自有代码分开；</p></li><li><p>因为 cache 缓存在运行 Docker build 命令的本地机器上，建议固定使用某台机器来进行 Docker build，以便利用 cache。</p></li></ul><pre><code>FROM openjdk:8-jre-alpineCOPY app/BOOT_INF/lib /app/BOOT_INF/lib/COPY app/org /app/orgCOPY app/META_INF /app/META_INFCOPY app/BOOT_INT/classes   /app/BOOT_INT/classesEXPOSE 8080CMD [&quot;java&quot;,&quot;-cp&quot;,&quot;/app&quot;,&quot;org.springframework.boot.loader.JarLauncher&quot;]</code></pre><p>Dockerfile 我们把应用的内容分成 4 个部分 COPY 到镜像里面：其中前面 3 个基本不变，第 4 个是经常变化的自有代码。最后一行是解压缩后，启动 spring boot 应用的方式。</p><h3 id="清理缓存和不必要的文件"><a href="#清理缓存和不必要的文件" class="headerlink" title="清理缓存和不必要的文件"></a>清理缓存和不必要的文件</h3><p>（1）在执行 apt-get install -y 时增加选项 –no-install-recommends ，可以不用安装建议性（非必须）的依赖，也可以在执行 apk add 时添加选项–no-cache 达到同样效果；</p><p>（2）执行 yum install -y 时候， 可以同时安装多个工具，比如 yum install -y gcc gcc-c++ make …。将所有 yum install 任务放在一条 RUN 命令上执行，从而减少镜像层的数量；</p><p>（3）组件的安装和清理要串联在一条指令里面，如 apk –update add php7 &amp;&amp; rm -rf /var/cache/apk/<em> ，因为 Dockerfile的每条指令都会产生一个文件层，如果将 apk add … 和 rm -rf … 命令分开，清理无法减小apk命令产生的文件层的大小。 Ubuntu或 Debian可以使用 rm -rf /var/lib/apt/lists/</em> 清理镜像中缓存文件；CentOS 等系统使用 yum clean all 命令清理；alpine系统可使用apt-get purge -y package_name &amp;&amp; apt-get autoremove &amp;&amp; apt-get clean 来清除apt的缓存</p><p>(4) 删除不必要的文档和日志：rm -rf /usr/share/doc/<em> /usr/share/man/</em> /usr/share/info/* 和删除log文件：find /var | grep ‘.log$’ | xargs rm -v</p><h3 id="压缩镜像"><a href="#压缩镜像" class="headerlink" title="压缩镜像"></a>压缩镜像</h3><p>Docker 自带的一些命令还能协助压缩镜像，比如 export 和 import。<br>可以使用如下命令：docker export image_name | docker import - new_image_name。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://zhuanlan.zhihu.com/p/42815689" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/42815689</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s Sidecar 注入讲解及应用</title>
      <link href="/archives/e92d7d36.html"/>
      <url>/archives/e92d7d36.html</url>
      
        <content type="html"><![CDATA[<h1 id="k8s-Sidecar-注入讲解及应用"><a href="#k8s-Sidecar-注入讲解及应用" class="headerlink" title="k8s Sidecar 注入讲解及应用"></a>k8s Sidecar 注入讲解及应用</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>起初最开始是用jenkins作为构建工具，需求需要对接公司运维平台呈现实时构建日志。但遇到的痛点是本身jenkins home目录已经挂载了阿里云盘，如果在挂载取日志会对磁盘造成压力。于是有了以下方案。</p><p>1、jenkins容器增加一个nginx来暴露日志文件，平台去日志文件展示。</p><p>2、程序读取jenkins接口获取构建日志。</p><p>方案二直接paas，任务量多，频繁调用接口容器导致jenkins挂掉。而方案一需要另外编排jenkins容器，但发现可以通过Sidecar注入一个附加容器来截取日志。</p><h2 id="Sidecar"><a href="#Sidecar" class="headerlink" title="Sidecar"></a>Sidecar</h2><p>将应用程序的功能划分为单独的进程运行在同一个最小调度单元中（例如 Kubernetes 中的 Pod）可以被视为 <strong>sidecar 模式</strong>。就像连接了 Sidecar 的三轮摩托车一样，在软件架构中， Sidecar 连接到父应用并且为其添加扩展或者增强功能。Sidecar 应用与主应用程序松散耦合。它可以屏蔽不同编程语言的差异，统一实现微服务的可观察性、监控、日志记录、配置、断路器等功能。</p><h3><a href="#" class="headerlink"></a><img src="https://docs.microsoft.com/en-us/azure/architecture/patterns/_images/sidecar.png" alt="sidecar"></h3><h3 id="使用-Sidecar-模式的优势"><a href="#使用-Sidecar-模式的优势" class="headerlink" title="使用 Sidecar 模式的优势"></a>使用 Sidecar 模式的优势</h3><p>使用 sidecar 模式部署服务网格时，无需在节点上运行代理，但是集群中将运行多个相同的 sidecar 副本。在 sidecar 部署方式中，每个应用的容器旁都会部署一个伴生容器（如 <a href="https://www.servicemesher.com/istio-handbook/GLOSSARY.html#envoy" target="_blank" rel="noopener">Envoy</a> 或 <a href="https://www.servicemesher.com/istio-handbook/GLOSSARY.html#mosn" target="_blank" rel="noopener">MOSN</a>），这个容器称之为 sidecar 容器。Sidecar 接管进出应用容器的所有流量。在 Kubernetes 的 Pod 中，在原有的应用容器旁边注入一个 Sidecar 容器，两个容器共享存储、网络等资源，可以广义的将这个包含了 sidecar 容器的 Pod 理解为一台主机，两个容器共享主机资源。</p><p>因其独特的部署结构，使得 sidecar 模式具有以下优势：</p><ul><li>将与应用业务逻辑无关的功能抽象到共同基础设施，降低了微服务代码的复杂度。</li><li>因为不再需要编写相同的第三方组件配置文件和代码，所以能够降低微服务架构中的代码重复度。</li><li>Sidecar 可独立升级，降低应用程序代码和底层平台的耦合度。</li><li>Sidecar可以访问与主应用程序相同的资源。例如，Sidecar可以监视Sidecar和主应用程序使用的系统资源。</li><li>由于它靠近主应用程序，因此它们之间的通信没有明显的延迟。</li><li>即使对于不提供扩展机制的应用程序，也可以使用sidecar来扩展功能，方法是将其作为自己的进程附加到与主应用程序相同的主机或子容器中。</li></ul><h3 id="问题与注意事项"><a href="#问题与注意事项" class="headerlink" title="问题与注意事项"></a>问题与注意事项</h3><ul><li>考虑将用于部署服务，流程或容器的部署和打包格式。容器特别适合于Sidecar模式。</li><li>设计Sidecar服务时，请仔细确定进程间通信机制。除非性能要求不切实际，否则请尝试使用与语言或框架无关的技术。</li><li>在将功能放入Sidecar中之前，请考虑将其作为单独的服务或更传统的守护程序是否会更好地工作。</li><li>还需要考虑是否可以将功能实现为库或使用传统的扩展机制。特定语言的库可能具有更深层次的集成和更少的网络开销。</li></ul><h3 id="何时使用此模式"><a href="#何时使用此模式" class="headerlink" title="何时使用此模式"></a>何时使用此模式</h3><p>在以下情况下使用此模式：</p><ul><li>您的主应用程序使用一组不同的语言和框架。位于Sidecar服务中的组件可由使用不同框架以不同语言编写的应用程序使用。</li><li>组件由远程团队或其他组织拥有。</li><li>组件或功能必须与应用程序位于同一主机上</li><li>您需要共享主应用程序整个生命周期但可以独立更新的服务。</li><li>您需要对特定资源或组件的资源限制进行细粒度的控制。例如，您可能想限制特定组件使用的内存量。您可以将组件部署为辅助工具，并独立于主应用程序管理内存使用情况。</li></ul><p>此模式可能不适合：</p><ul><li>需要优化进程间通信时。父应用程序和Sidecar服务之间的通信包括一些开销，特别是调用中的延迟。对于健谈界面，这可能不是可接受的折衷方案。</li><li>对于小型应用程序，为每个实例部署Sidecar服务的资源成本不值得使用隔离的优势。</li><li>当服务需要与主要应用程序进行不同的缩放或独立于主要应用程序进行缩放时。如果是这样，最好将该功能部署为单独的服务。</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>Sidecar模式适用于许多情况。一些常见的例子：</p><ul><li>基础结构API。基础结构开发团队创建与每个应用程序一起部署的服务，而不是特定语言的客户端库来访问基础结构。该服务作为sidecar加载，并为基础结构服务提供公共层，包括日志记录，环境数据，配置存储，发现，运行状况检查和看门狗服务。Sidecar还监视父应用程序的宿主环境和进程（或容器），并将信息记录到集中式服务中。</li><li>管理NGINX / HAProxy。使用可监视环境状态的sidecar服务部署NGINX，然后在需要状态更改时更新NGINX配置文件并回收该过程。</li><li>Ambassador sidecar 。部署Ambassador服务作为辅助工具。该应用程序通过Ambassador进行调用，该大使处理请求记录，路由，断路以及其他与连接相关的功能。</li><li>前置代理。将NGINX代理放置在node.js服务实例的前面，以处理为该服务提供的静态文件内容。</li></ul><h3 id="最佳实践："><a href="#最佳实践：" class="headerlink" title="最佳实践："></a>最佳实践：</h3><p>1、prometheus 集成 Thanos Sidecar</p><p>Thanos通过Sidecar与现有Prometheus服务器集成，该与Prometheus服务器运行在同一台机器上或同一Pod中。</p><p>Sidecar的目的是将Prometheus数据备份到“对象存储”存储桶中，并允许其他Thanos组件通过gRPC API访问Prometheus指标。</p><pre class="line-numbers language-bash"><code class="language-bash">prometheus \  --storage.tsdb.max-block-duration<span class="token operator">=</span>2h \  --storage.tsdb.min-block-duration<span class="token operator">=</span>2h \  --web.enable-lifecyclethanos sidecar \    --tsdb.path        <span class="token string">"/path/to/prometheus/data/dir"</span> \    --prometheus.url   <span class="token string">"http://localhost:9090"</span> \    --objstore.config-file  <span class="token string">"bucket.yml"</span>示例内容bucket.yml：type: GCSconfig:  bucket: example-bucket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、jenkins 日志通过nginx暴露</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps.kruise.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> SidecarSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>sidecar<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> jenkins  <span class="token comment" spellcheck="true"># 往所有带 long-term 标签的 Pod 中注入</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>collector    <span class="token key atrule">image</span><span class="token punctuation">:</span> xxx/nginx<span class="token punctuation">:</span>nginx<span class="token punctuation">-</span>jenkinslog1.0    <span class="token key atrule">ports</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>log         <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins<span class="token punctuation">-</span>home      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/jenkins_home  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins<span class="token punctuation">-</span>home    <span class="token comment" spellcheck="true"># 定义一个名为 log-volume 的卷</span>    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、日志采集上报</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps.kruise.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> SidecarSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>sidecar<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> ((<span class="token punctuation">[</span>A<span class="token punctuation">-</span>Za<span class="token punctuation">-</span>z0<span class="token punctuation">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">-</span>A<span class="token punctuation">-</span>Za<span class="token punctuation">-</span>z0<span class="token punctuation">-</span>9_.<span class="token punctuation">]</span>*)<span class="token punctuation">?</span><span class="token punctuation">[</span>A<span class="token punctuation">-</span>Za<span class="token punctuation">-</span>z0<span class="token punctuation">-</span><span class="token number">9</span><span class="token punctuation">]</span>)<span class="token punctuation">?</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>collector    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always    <span class="token key atrule">image</span><span class="token punctuation">:</span> xxx/fluentbit<span class="token punctuation">:</span>0.2.7    <span class="token key atrule">ports</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> fluentbit<span class="token punctuation">-</span>log         <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAST_SERVER        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'https://xxx.xxx.com.cn'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAST_ACCESS_KEY_ID        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAST_ACCESS_KEY_SECRET        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAST_PRODUCT_CODE        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'rental'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAST_APP_CODE        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'xxxx'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAST_LOG_NAME        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAST_ENABLE_METRICS        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'on'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAST_TAIL_PATH        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'/data/log/*/*.log'</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>dir      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data/log  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>dir    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注： 以上使用SidecarSet的是开源工具<a href="https://openkruise.io/zh-cn/docs/sidecarset.html]" target="_blank" rel="noopener">kruise</a>的扩展.</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1、Sidecar 容器适用于 比如监控、日志等 agent等场景；</p><p>2、Sidecar 容器和应用容器之间共享存储、网络、环境变量等资源；</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar#solution" target="_blank" rel="noopener">microsoft sidecar</a></p><p><a href="https://openkruise.io/zh-cn/index.html" target="_blank" rel="noopener">openkruise</a></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人收藏工具</title>
      <link href="/archives/ab6f0eee.html"/>
      <url>/archives/ab6f0eee.html</url>
      
        <content type="html"><![CDATA[<h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h2><ul><li><p><a href="http://tool.chinaz.com/" target="_blank" rel="noopener">站长工具</a></p></li><li><p><a href="http://www.bangnishouji.com/tools/Byte_calculate.html" target="_blank" rel="noopener">字节换算</a></p></li><li><p><a href="http://www.bangnishouji.com/tools/chtounicode.html" target="_blank" rel="noopener">unicode编码转换器</a></p></li><li><p><a href="http://www.bangnishouji.com/tools/subnet_mask.html" target="_blank" rel="noopener">子网掩码计算器</a></p></li><li><p><a href="http://www.bangnishouji.com/tools/base64.html" target="_blank" rel="noopener">BASE64编码解码</a></p></li><li><p><a href="https://sm.ms/" target="_blank" rel="noopener">图床 https://sm.ms/</a></p></li><li><p><a href="http://tool.chinaz.com/Tools/unixtime.aspx" target="_blank" rel="noopener">Unix 时间戳 Unix timestamp</a></p></li><li><p><a href="https://regex101.com/" target="_blank" rel="noopener">在线正则表达式匹配</a></p></li><li><p><a href="http://regexr.com/" target="_blank" rel="noopener">http://regexr.com/</a></p></li><li><p><a href="https://www.json.cn/" target="_blank" rel="noopener">json在线解析</a></p></li><li><p><a href="https://fonts.google.com/" target="_blank" rel="noopener">google fonts</a></p></li><li><p><a href="https://fengmk2.com/blog/2016/google-fonts-mirror" target="_blank" rel="noopener">Google Fonts 加速代理</a></p></li><li><p><a href="http://www.pool.ntp.org" target="_blank" rel="noopener">时间服务器</a></p></li><li><p><a href="http://www.newjson.com/Static/Tools/Diff.html" target="_blank" rel="noopener">在线文件对比工具</a></p></li><li><p><a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener">在线markdown1</a></p></li><li><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">在线markdown2</a></p></li><li><p><a href="http://grokdebug.herokuapp.com/" target="_blank" rel="noopener">grokdebug</a></p></li></ul><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><ul><li><p><a href="http://tools.pingdom.com/fpt" target="_blank" rel="noopener">在线网站速度检测工具</a></p></li><li><p><a href="https://www.dareboost.com" target="_blank" rel="noopener">在线网站优化测试平台</a></p></li><li><p><a href="http://www.urlvoid.com" target="_blank" rel="noopener">在线网站安全检测工具</a></p></li><li><p><a href="http://www.woorank.com" target="_blank" rel="noopener">网站SEO检测免费应用平台</a></p></li></ul><h2 id="运维工具"><a href="#运维工具" class="headerlink" title="运维工具"></a>运维工具</h2><h3 id="shell连接"><a href="#shell连接" class="headerlink" title="shell连接"></a>shell连接</h3><ul><li><p><a href="https://www.vandyke.com/products/securecrt/index.html" target="_blank" rel="noopener">securecrt</a></p></li><li><p><a href="https://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">xshell</a></p></li></ul><h3 id="文件对比"><a href="#文件对比" class="headerlink" title="文件对比"></a>文件对比</h3><ul><li><a href="http://www.scootersoftware.com/download.php" target="_blank" rel="noopener">Beyond</a></li></ul><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><ul><li><a href="https://www.voidtools.com/" target="_blank" rel="noopener">Everying</a></li></ul><h3 id="文件去重"><a href="#文件去重" class="headerlink" title="文件去重"></a>文件去重</h3><ul><li><a href="https://www.duplicatecleaner.com/" target="_blank" rel="noopener">https://www.duplicatecleaner.com/</a></li></ul><h3 id="代码编辑器"><a href="#代码编辑器" class="headerlink" title="代码编辑器"></a>代码编辑器</h3><ul><li><a href="https://www.jetbrains.com" target="_blank" rel="noopener">jetbrains</a></li></ul><h3 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h3><ul><li><p><a href="https://keepass.info/" target="_blank" rel="noopener">keepass</a></p></li><li><p><a href="https://keepass.info/translations.html" target="_blank" rel="noopener">keepass中文</a></p></li></ul><h3 id="文件编辑器"><a href="#文件编辑器" class="headerlink" title="文件编辑器"></a>文件编辑器</h3><ul><li><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">notepad++</a></p></li><li><p><a href="https://www.emeditor.com/" target="_blank" rel="noopener">emeditor</a></p></li><li><p><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">sublimetext</a></p></li></ul><h3 id="笔记记录"><a href="#笔记记录" class="headerlink" title="笔记记录"></a>笔记记录</h3><ul><li><a href="https://www.giuspen.com/cherrytree/#downl" target="_blank" rel="noopener">cherrytree</a></li></ul><h3 id="host切换"><a href="#host切换" class="headerlink" title="host切换"></a>host切换</h3><ul><li><a href="https://github.com/oldj/SwitchHosts/releases" target="_blank" rel="noopener">SwitchHosts</a></li></ul><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><ul><li><a href="https://my.vmware.com/group/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/14_0" target="_blank" rel="noopener">vmware</a></li></ul><p>VMware 2018 v14.x 永久许可证激活密钥</p><ul><li>FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA</li><li>CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD</li></ul><h2 id="安卓工具"><a href="#安卓工具" class="headerlink" title="安卓工具"></a>安卓工具</h2><ul><li>APKPure</li><li>FDroid</li><li>LegacyNetworkLocation</li><li>MiXplorer</li><li>NetworkLocation</li><li>Speedtest</li><li>UnifiedNlp</li><li>V2EX_589fe303</li><li>blokada-v4.4.4</li><li>masterpassword-android</li><li>org.microg.gms.droidguard-4</li><li>55</li><li>552</li><li>xda<h2 id="windos工具"><a href="#windos工具" class="headerlink" title="windos工具"></a>windos工具</h2></li></ul><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><ul><li>7-Zip</li><li>APPS</li><li>AnyDesk</li><li>Beyond Compare 4</li><li>BitComet</li><li>Cmder</li><li>Everything</li><li>Geek</li><li>HeidiSQL</li><li>ImageGlass</li><li>KeePass</li><li>MobaXterm</li><li>55</li><li>SumatraPDF</li><li>TrafficMonitor</li><li>Unlocker</li><li>552</li><li>VLC</li><li>VSCode</li><li>Wox</li><li>dnscrypt-proxy<h3 id="硬件检测"><a href="#硬件检测" class="headerlink" title="硬件检测"></a>硬件检测</h3></li><li>CPU-Z</li><li>CrystalDiskInfo</li><li>GPU-Z</li><li>RealTemp</li><li>SSD-Z</li><li>openhardwaremonitor</li></ul><h3 id="效率软件"><a href="#效率软件" class="headerlink" title="效率软件"></a>效率软件</h3><ul><li><p>capslock</p></li><li><p>Ditto</p><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3></li><li><p>Dism++</p></li><li><p>OOSU10</p></li><li><p>SimpleDNSCrypt64.msi</p></li><li><p>W10Privacy</p></li><li><p>kcleaner</p><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3></li><li><p>CDBurnerXP</p></li><li><p>DDU</p></li><li><p>DropIt</p></li><li><p>IPShifterPortable</p></li><li><p>RegistryFinder64</p></li><li><p>ShareX</p></li><li><p>Snipaste</p></li><li><p>SwitchHosts</p></li><li><p>grub2win</p></li><li><p>keyboard-and-mouse-cleaner</p></li><li><p>nvlddmkm-patcher</p></li><li><p>分区助手</p></li><li><p>端口管理</p></li><li><p>开机自启动</p><h3 id="图片浏览"><a href="#图片浏览" class="headerlink" title="图片浏览"></a>图片浏览</h3></li><li><p>IrfanView</p><h3 id="proxytools"><a href="#proxytools" class="headerlink" title="proxytools"></a>proxytools</h3></li><li><p>proxifier</p></li><li><p>ss</p></li><li><p>scokscap</p></li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ul><li><p><a href="http://www.markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a></p></li><li><p><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a></p></li><li><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">notepad++</a></p></li><li><p><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">sublimetext</a></p></li></ul><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li><p><a href="https://www.google.cn/chrome/index.html" target="_blank" rel="noopener">Google</a></p></li><li><p><a href="https://www.chrome64bit.com/" target="_blank" rel="noopener">Google离线版</a></p></li><li><p><a href="https://www.firefox.com.cn/" target="_blank" rel="noopener">Firefox</a></p></li></ul><h3 id="压缩工具"><a href="#压缩工具" class="headerlink" title="压缩工具"></a>压缩工具</h3><ul><li><a href="https://www.7-zip.org/download.html" target="_blank" rel="noopener">7zip</a></li></ul><h3 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h3><ul><li><a href="https://tortoisesvn.net/" target="_blank" rel="noopener">svn</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li></ul><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><ul><li><p><a href="https://www.softpedia.com/" target="_blank" rel="noopener">softpedia</a></p></li><li><p><a href="https://www.nirsoft.net/" target="_blank" rel="noopener">nirsoft</a></p></li><li><p><a href="https://www.lo4d.com/" target="_blank" rel="noopener">lo4d</a></p></li></ul><h2 id="GitBook-及其插件"><a href="#GitBook-及其插件" class="headerlink" title="GitBook 及其插件"></a>GitBook 及其插件</h2><ul><li><p><a href="http://zhaoda.net/2015/11/09/gitbook-plugins/" target="_blank" rel="noopener">Gitbook 的使用和常用插件 -赵达</a></p></li><li><p><a href="https://plugins.gitbook.com/plugin/expandable-chapters" target="_blank" rel="noopener">gitbook-plugin-expandable-chapters</a></p><p>折叠左侧目录章节。</p></li></ul><h2 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h2><ul><li><p><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener">Octotree</a></p><ul><li>Code tree for GitHub and GitLab</li></ul></li></ul><ul><li><p><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="noopener">Chrome扩展及应用开发 -图灵电子书</a></p></li><li><p><a href="https://www.zhihu.com/question/23228162#answer-28057391" target="_blank" rel="noopener">有哪些鲜为人知却非常有意思、好用的 Chrome 扩展？ -知乎</a></p></li><li><p><a href="https://chrome.google.com/webstore/detail/dribbble-new-tab/hmhjbefkpednjogghoibpejdmemkinbn" target="_blank" rel="noopener">Dribbble New Tab</a></p><p>新建 tab 时，显示 dribbble 上的精选作品。</p></li></ul><h2 id="Other-blogs"><a href="#Other-blogs" class="headerlink" title="Other blogs"></a>Other blogs</h2><ul><li><a href="http://www.xiaoa.name/" target="_blank" rel="noopener">COLORFUL xiaoa</a></li></ul><ul><li><p><a href="http://pinkyjie.com/" target="_blank" rel="noopener">进击的马斯特 http://pinkyjie.com/</a></p><p>马斯特，87年生人，爱溜冰的码农。技术： Javascript、Python、Mac、iOS</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>K8S重启Deployment的方式</title>
      <link href="/archives/5cd23594.html"/>
      <url>/archives/5cd23594.html</url>
      
        <content type="html"><![CDATA[<h1 id="K8S重启Deployment的方式"><a href="#K8S重启Deployment的方式" class="headerlink" title="K8S重启Deployment的方式"></a>K8S重启Deployment的方式</h1><p>有时候我们会需要重启Deployment，原因可能是：</p><p>docker image使用的是latest tag，这个latest在docker image registry已经更新了，我们需要重启deployment来使用新的latest<br>Pod运行缓慢但是还活着，我们就是想重启一下<br>ConfigMap/Secret变更了，想重启一下应用新配置<br>上面两种情况的共同之处在于，Deployment spec没有发生任何变化，因此即使你kubectl appply -f deployment-spec.yaml也是没用的，因为K8S会认为你这个没有变化就什么都不做了。</p><p>但是我们又不想使用手工删除Pod-让K8S新建Pod的方式来重启Deployment，最好的办法应该是像Updating a deployment一样，让K8S自己滚动的删除-新建Pod。</p><p>下面介绍四种方式重启：</p><pre><code>kubectl apply -f app.yamlkubectl delete -f app.yaml| kubectl create -f app.yamlkubectl get pod PODNAME  -o yaml | kubectl replace --force -f -kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1kubectl -n beta patch deployment modeling-platform --patch &#39;{&quot;spec&quot;: {&quot;template&quot;: {&quot;spec&quot;: {&quot;containers&quot;: [{&quot;name&quot;: &quot;modeling-platform&quot;,&quot;image&quot;: &quot;nginx:&#39;${build_tag}&#39;&quot;,&quot;env&quot;: [{&quot;name&quot;:&quot;LAST_MANUAL_RESTART&quot;,&quot;value&quot;:&quot;&#39;${BUILD_ID}&#39;&quot;}]}]}}}}&#39;</code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p><a href="https://k8smeetup.github.io/docs/tasks/run-application/update-api-object-kubectl-patch/" target="_blank" rel="noopener">https://k8smeetup.github.io/docs/tasks/run-application/update-api-object-kubectl-patch/</a></p></li><li><p><a href="https://chanjarster.github.io/post/k8s-restart-deployment/" target="_blank" rel="noopener">https://chanjarster.github.io/post/k8s-restart-deployment/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes 之 Ingress 使用总结</title>
      <link href="/archives/2f521ea8.html"/>
      <url>/archives/2f521ea8.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="kubernetes-之-Ingress-使用总结"><a href="#kubernetes-之-Ingress-使用总结" class="headerlink" title="kubernetes 之 Ingress 使用总结"></a>kubernetes 之 Ingress 使用总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Kubernetes暴露服务的方式有多种，如LoadBalancer、NodePort、Ingress等。LoadBalancer一般用于云平台，平常一般用NodePort暴露服务，非常方便。但是由于NodePort需要指定宿主机端口，一旦服务多起来，多个端口就难以管理。那么，这种情况下，使用Ingress暴露服务更加合适。</p><h2 id="Ingress组成"><a href="#Ingress组成" class="headerlink" title="Ingress组成"></a>Ingress组成</h2><p>Ingress由三部分组成：</p><ul><li><p>反向代理负载均衡器</p><p>比如Nginx、Haproxy、Apache、traefik等</p></li><li><p>Ingress Controller</p><p>通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段 Nginx 配置，再写到 Nginx-ingress-control的 Pod 里，这个 Ingress Contronler 的pod里面运行着一个nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，然后 reload 一下 使用配置生效。以此来达到域名分配置及动态更新的问题。</p></li></ul><ul><li><p>Ingress</p><p>kubernetes的一个资源对象，用于编写定义规则</p></li></ul><p>如下是一个很简单的ingress.yml配置：</p><pre><code>apiVersion: extensions/v1beta1kind: Ingressmetadata:  name: test-ingressspec:  rules:  - http:      paths:      - path: /testpath        backend:           serviceName: test           servicePort: 80</code></pre><p>若需要添加新的转发规则，只需修改上述文件，然后执行kubectl apply -f ingress.yml即可，或者执行kubectl edit直接编辑后保存，通过kubectl logs可以看到ingress-controller的Nginx配置是否更新成功。Ingress可以和Ingress Controller不在同一namespace，但必须与声明的服务在同一namespace。同样，一个集群内也可以部署多个Ingress，一个Controller可以匹配多个Ingress。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>部署一些必要的服务:</p><pre><code>curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/namespace.yaml \    | kubectl apply -f -curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/default-backend.yaml \    | kubectl apply -f -curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/configmap.yaml \    | kubectl apply -f -curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/tcp-services-configmap.yaml \    | kubectl apply -f -curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/udp-services-configmap.yaml \    | kubectl apply -f -curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/service-nodeport.yaml \    | kubectl apply -f -</code></pre><p>上面的default-backend.yml用于部署默认服务，当ingress找不到相应的请求时会返回默认服务，官方的默认服务返回404，也可以定制自己的默认服务。</p><p>基于RBAC部署Ingress Controller：</p><pre><code>curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/rbac.yaml \    | kubectl apply -f -curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/with-rbac.yaml \    | kubectl apply -f -</code></pre><p>也可以基于非RBAC模式部署：</p><pre><code>curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/without-rbac.yaml \    | kubectl apply -f -</code></pre><p>部署Ingress，假设集群内已经存在一个test服务，创建ingress.yml声明的规则如下：</p><pre><code>apiVersion: extensions/v1beta1kind: Ingressmetadata:  name: ingress-nginxspec:  rules:  - host: test.com    http:      paths:      - backend:           serviceName: test           servicePort: 80</code></pre><p>至此，ingress就部署完成了。配置hosts到Controller的PodIP，然后集群外访问test.com就可以访问test服务了。注意：因为官方的Ingress Controller默认并没有开启hostNetwork模式，所以这里hosts配置的是Controller的PodIP。但是考虑到Pod重新调度后其IP会更改，那么hosts配置也要同时更改，所以一般建议开启hostNetwork模式，使Controller监听宿主机的端口，这样配置hosts时只需要配置Pod所在的节点IP即可。有人会说，如果Pod重新调度到其他节点了，hosts配置不是也要改变吗？不错，这种情况下，我们可以通过nodeSelector指定Ingress Controller调度到某个节点。这样hosts配置就不用变了。修改如下：</p><pre><code>...nodeSelector:                   # 指定Ingress Controller调度到某个节点  nodeName: myNodeNamehostNetwork: true               # 开启hostNetwork模式containers:  - name: nginx-ingress-controller    image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.10.2    args:      - /nginx-ingress-controller      - --default-backend-service=$(POD_NAMESPACE)/default-http-backend      - --configmap=$(POD_NAMESPACE)/nginx-configuration      - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services      - --udp-services-configmap=$(POD_NAMESPACE)/udp-services      - --annotations-prefix=nginx.ingress.kubernetes.io···</code></pre><h2 id="Ingress-Controller匹配Ingress"><a href="#Ingress-Controller匹配Ingress" class="headerlink" title="Ingress Controller匹配Ingress"></a>Ingress Controller匹配Ingress</h2><p>当集群内创建多个Controller时，如何使某个Controller只监听对应的Ingress呢？这里就需要在Ingress中指定annotations，如下：</p><pre><code>metadata:  name: nginx-ingress  namespace: ingress-nginx  annotations:    kubernetes.io/ingress.class: &quot;nginx&quot;                  # 指定ingress.class为nginx</code></pre><p>然后在Controller中指定参数–ingress-class=nginx：</p><pre><code>args:  - /nginx-ingress-controller  - --default-backend-service=$(POD_NAMESPACE)/default-http-backend  - --configmap=$(POD_NAMESPACE)/nginx-configuration  - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services  - --udp-services-configmap=$(POD_NAMESPACE)/udp-services  - --annotations-prefix=nginx.ingress.kubernetes.io  - --ingress-class=nginx-prod                                 # 指定ingress-class值为nginx，与对应的Ingress匹配</code></pre><p>最后需要在rbac中指定参数 - “ingress-controller-leader-nginx-prod” <a href="https://github.com/kubeapps/kubeapps/issues/120" target="_blank" rel="noopener">参考</a></p><pre><code>    resources:      - configmaps    resourceNames:      # Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;      # Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;      # This has to be adapted if you change either parameter      # when launching the nginx-ingress-controller.      - &quot;ingress-controller-leader-nginx-prod&quot;</code></pre><p>这样，该Controller就只监听带有kubernetes.io/ingress.class: “nginx”annotations的Ingress了。我们可以声明多个带有相同annotations的Ingress，它们都会被对应Controller监听。Controller中的nginx默认监听80和443端口，若要更改可以通过–http-port和–https-port参数来指定，更多参数可以在<a href="https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/cli-arguments.md" target="_blank" rel="noopener">这里</a>找到。</p><p>在实际应用场景，常常会把多个服务部署在不同的namespace，来达到隔离服务的目的，比如A服务部署在namespace-A，B服务部署在namespace-B。这种情况下，就需要声明Ingress-A、Ingress-B两个Ingress分别用于暴露A服务和B服务，且Ingress-A必须处于namespace-A，Ingress-B必须处于namespace-B。否则Controller无法正确解析Ingress的规则。</p><h2 id="Ingress-开启-TLS-HTTPS"><a href="#Ingress-开启-TLS-HTTPS" class="headerlink" title="Ingress 开启 TLS / HTTPS"></a>Ingress 开启 TLS / HTTPS</h2><pre><code># 使用以下命令生成自签名证书和私钥openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ${KEY_FILE} -out ${CERT_FILE} -subj &quot;/CN=${HOST}/O=${HOST}&quot;`# 通过以下方式在集群中创建密钥kubectl create secret tls ${CERT_NAME} --key ${KEY_FILE} --cert ${CERT_FILE}</code></pre><p>创建完成后证书类型应该是 kubernetes.io/tls.</p><p>注：默认情况下，如果为该Ingress启用了TLS，则控制器会使用308永久重定向响应将HTTP客户端重定向到HTTPS端口443。</p><p>可以使用ssl-redirect: “false” 在NGINX config map文件声明，也可以使用nginx.ingress.kubernetes.io/ssl-redirect: “false” 特定资源中的注释per-Ingress 禁用此功能</p><p>创建一个支持https的域名：</p><pre><code>apiVersion: extensions/v1beta1kind: Ingressmetadata:  annotations:    kubernetes.io/ingress.class: nginx-test  name: mp-test  namespace: defaultspec:  rules:    - host: mp-test.test.com      http:        paths:          - backend:              serviceName: modeling-platform              servicePort: 80  tls:    - hosts:        - mp-test.test.com      secretName: test.com</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>集群内可以声明多个Ingress和多个Ingress Controller</p></li><li><p>一个Ingress Controller可以监听多个Ingress</p></li><li><p>Ingress和其定义的服务必须处于同一namespace</p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://bazingafeng.com/2018/02/10/deploy-ingress-in-kubernetes/" target="_blank" rel="noopener">http://bazingafeng.com/2018/02/10/deploy-ingress-in-kubernetes/</a></p><p><a href="https://www.cnblogs.com/xzkzzz/p/9577640.html" target="_blank" rel="noopener">https://www.cnblogs.com/xzkzzz/p/9577640.html</a></p><p><a href="https://confluence.atlassian.com/adminjiraserver071/connecting-to-an-ldap-directory-802592350.html" target="_blank" rel="noopener">https://confluence.atlassian.com/adminjiraserver071/connecting-to-an-ldap-directory-802592350.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s pvc扩容</title>
      <link href="/archives/9dacadea.html"/>
      <url>/archives/9dacadea.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="k8s-pvc扩容"><a href="#k8s-pvc扩容" class="headerlink" title="k8s pvc扩容"></a>k8s pvc扩容</h1><p><a href="https://gitlab.com/charts/gitlab/tree/master/doc/advanced/persistent-volumes" target="_blank" rel="noopener">https://gitlab.com/charts/gitlab/tree/master/doc/advanced/persistent-volumes</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab Helm Charts 配置AD域</title>
      <link href="/archives/d1b746a1.html"/>
      <url>/archives/d1b746a1.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="GitLab-Helm-Charts-配置AD域"><a href="#GitLab-Helm-Charts-配置AD域" class="headerlink" title="GitLab Helm Charts 配置AD域"></a>GitLab Helm Charts 配置AD域</h1><p>gitlab部署方式有很多种，比如：官方yum安装、docker容器部署、k8s部署、k8s helm chart部署</p><h2 id="1）在Active-Directory中创建用户以执行LDAP查询"><a href="#1）在Active-Directory中创建用户以执行LDAP查询" class="headerlink" title="1）在Active Directory中创建用户以执行LDAP查询"></a>1）在Active Directory中创建用户以执行LDAP查询</h2><p>不要将Gitlab配置为使用管理员帐户执行LDAP查询。而是设置一个没有域权限的新用户：</p><p>a. 登录到您的域控制器，然后加载Active Directory用户和计算机</p><p>b. 创建一个名为“NoPermissions”的新组</p><p>c. 创建一个名为“ldapsearch”的新用户</p><p>d. 编辑“ldapsearch”用户组。将默认组设置为“NoPermissions”，并从“Domain User”组中删除该用户。</p><h2 id="2）编辑您的Gitlab-Omnibus配置"><a href="#2）编辑您的Gitlab-Omnibus配置" class="headerlink" title="2）编辑您的Gitlab Omnibus配置"></a>2）编辑您的Gitlab Omnibus配置</h2><h3 id="适用于yum安装、容器部署方式"><a href="#适用于yum安装、容器部署方式" class="headerlink" title="适用于yum安装、容器部署方式"></a>适用于yum安装、容器部署方式</h3><p>a. 在Gitlab服务器上，编辑Gitlab配置文件：</p><p>vim /etc/gitlab/gitlab.rb</p><p>并添加以下设置：</p><pre><code>gitlab_rails [ &#39;ldap_enabled&#39; ] = true gitlab_rails [ &#39;ldap_servers&#39; ] = YAML.load &lt;&lt; - EOS ＃记得用main 下面的&#39;EOS&#39;关闭这个块：标签： &#39;ActiveDirectory&#39; 主机： &#39;YOUR-AD-SERVER.CORP .COM&#39; 端口： 389 #Change到636如果使用LDAPS 方法： &#39;纯&#39; ＃更改为“TLS”如果使用LDAPS UID ： &#39;sAMAccountName赋&#39; ＃不要更改此bind_dn ： CN = ldapsearch的，CN =用户，DC = CORP，DC = COM”密码：&#39;YOURPASSWORDHERE&#39; 超时： 10 active_directory ： true allow_username_or_email_login ： false block_auto_created_users ： false base ： &#39;CN = Users，DC = CORP，DC = COM&#39; ＃可选：下一行指定只有用户组“gitlab-users”的成员才能对Gitlab进行身份验证：#user_filter：&#39;（memberOf：1.2.840.113556.1.4.1941：= CN = GITLAB-USERS，CN = Users，DC = CORP，DC = COM）&#39;EOS</code></pre><p>注意： 配置文件是 间隔敏感的！必须有：</p><ul><li>“主要”之前的一个空格</li><li>“main”下面每个属性前的两个空格</li><li>“EOS”之前没有空格</li></ul><p>b. gitlab-ctl重新配置</p><p>c. 测试与AD服务器的LDAP连接：</p><p>gitlab-rake gitlab：ldap：check</p><h3 id="适用于k8s-Helm-chart方式部署"><a href="#适用于k8s-Helm-chart方式部署" class="headerlink" title="适用于k8s Helm chart方式部署"></a>适用于k8s Helm chart方式部署</h3><p>在使用helm chart方式部署后，通过修改value.ymal文件添加AD域配置，通过模板渲染到相应配置中</p><pre><code>global:  appConfig:    ldap:      servers:        main:          label: &#39;LDAP&#39;          host: x.x.x.x          port: 389          uid: &#39;sAMAccountName&#39;          method: &#39;plain&#39;          bind_dn: &#39;mysoft\xxxx&#39;          password: &#39;xxxx&#39;          verify_certificates: true          allow_username_or_email_login: true          lowercase_usernames: true          block_auto_reated_users: false          active_directory: true          base: &#39;DC=xxxx,DC=com,DC=cn&#39;  hosts:    domain: xxxx.com.cn  edition: ce</code></pre><h2 id="3）故障排除"><a href="#3）故障排除" class="headerlink" title="3）故障排除"></a>3）故障排除</h2><p>a. Gitlab服务器连接到AD服务器上的LDAP端口情况</p><p>telnet your-ad-server.corp.com 389</p><p>b. ldapsearch用户和基本DN是否正确的,可以使用LDAP管理工具验证专有名称。</p><ul><li><p>Using AdFind (Windows) <a href="http://www.joeware.net/freetools/tools/adfind/index.htm" target="_blank" rel="noopener">AdFind</a></p></li><li><p>Using ldapsearch (Unix)<a href="https://wiki.debian.org/LDAP/LDAPUtils" target="_blank" rel="noopener">LDAPUtils</a></p></li></ul><p>c. 检查配置文件是否使用正确的YAML格式</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p><a href="https://www.caseylabs.com/setup-gitlab-ce-with-active-directory-authentication/" target="_blank" rel="noopener">https://www.caseylabs.com/setup-gitlab-ce-with-active-directory-authentication/</a></p></li><li><p><a href="https://docs.gitlab.com/ee/administration/auth/how_to_configure_ldap_gitlab_ce/" target="_blank" rel="noopener">https://docs.gitlab.com/ee/administration/auth/how_to_configure_ldap_gitlab_ce/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jira 配置AD域</title>
      <link href="/archives/bd1aff98.html"/>
      <url>/archives/bd1aff98.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="jira-配置AD域"><a href="#jira-配置AD域" class="headerlink" title="jira 配置AD域"></a>jira 配置AD域</h1><p>jira内部认证几种方式：</p><p>1、Microsoft 活动目录</p><p>是配置Windows的AD账号活动目录的，但是我们不选择这个选项，原因：配置此选项，Jira系统会把Windows目录下的所有账户都同步到Jira用户库，这些用户都被视为活跃用户，如果你的Jira是买的正版，肯定有用户的上限，一旦同步过来的账户超过了上线，超过上限的用户就无法登录Jira，提示用户数达到上限。如果你是破解版的Jira，建议配置这个，方便用户同步和认证。如果是正版用户，推荐配置第三个选项【内部LDAP认证】，原因看下文。</p><p>2、LDAP</p><p>此配置如上一样的用户同步模式，看自己是否正版用户，自行抉择。</p><p>3、内部LDAP认证</p><p>重点来了，这个选项的配置的好处是：被加到用户组Jira_users的用户，不会全部同步到Jira用户库中，只有登陆到Jira的用户才会被记录到Jira的用户库，这样就减少了授权用户的资源浪费，因为大多数互联网公司，肯定是使用Jira的用户不到公司总数的1/4，要是选择第1、2种方式，是资源的浪费，不建议。</p><p>4、5、配置不做介绍，因为没用过，不过理解的应该是Jira公司自己提供的认证系统。</p><h2 id="jira-配置AD域-1"><a href="#jira-配置AD域-1" class="headerlink" title="jira 配置AD域"></a>jira 配置AD域</h2><h3 id="1、建立AD账户和相应的群组"><a href="#1、建立AD账户和相应的群组" class="headerlink" title="1、建立AD账户和相应的群组"></a>1、建立AD账户和相应的群组</h3><p>在Windows AD中创建一个组，如：Jira_users，然后把需要登录Jira的AD账号，添加为此组成员。</p><h3 id="配置jira的认证目录"><a href="#配置jira的认证目录" class="headerlink" title="配置jira的认证目录"></a>配置jira的认证目录</h3><p>以管理员登陆–管理–用户管理–用户目录–添加目录<br><img src="https://owelinux.github.io/images/2018-12-06-article40-linux-jira-ad/jira-ad.png" alt></p><p>其余配置均使用默认，然后点击测试，提示连接测试成功，说明配置正确，没有问题。再点击【测试并保存】，如果正常返回到【用户管理】页面，说明第二步配置正确完成。</p><h3 id="给用户组分配权限"><a href="#给用户组分配权限" class="headerlink" title="给用户组分配权限"></a>给用户组分配权限</h3><p>第一步：<br>管理员身份登陆—【系统】—【安全】—【全局权限】—【添加权限】—【权限】—【选择“JIRA 管理员”】–【用户组选择】–【添加】。</p><p>第二步：<br>管理员身份登陆—【应用程序】—【应用程序访问权】—【选择组】—-【添加“JIRA Software”权限】，此权限可以授权用户能够能录Jira。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p><a href="http://www.bigyoung.cn/676.html" target="_blank" rel="noopener">http://www.bigyoung.cn/676.html</a></p></li><li><p><a href="https://serviceaide.atlassian.net/wiki/spaces/CloudSMGoldfishCN/pages/3703745/ADSync" target="_blank" rel="noopener">https://serviceaide.atlassian.net/wiki/spaces/CloudSMGoldfishCN/pages/3703745/ADSync</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JIRA 7.13.0 实践笔记</title>
      <link href="/archives/5f63d71c.html"/>
      <url>/archives/5f63d71c.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="JIRA-7-13-0-实践笔记"><a href="#JIRA-7-13-0-实践笔记" class="headerlink" title="JIRA 7.13.0 实践笔记"></a>JIRA 7.13.0 实践笔记</h1><p>jira有以下几种安装方式：</p><ul><li><p>Docker容器部署</p></li><li><p>K8s helm部署</p></li><li><p>k8s 部署</p></li><li><p>直接安装</p></li></ul><p>其中helm安装：<a href="https://itnext.io/jira-on-kubernetes-by-helm-8a38357da4e" target="_blank" rel="noopener">helm安装</a>,下面详细介绍容器部署。</p><h2 id="镜像构建配置"><a href="#镜像构建配置" class="headerlink" title="镜像构建配置"></a>镜像构建配置</h2><h3 id="Jira容器构建准备"><a href="#Jira容器构建准备" class="headerlink" title="Jira容器构建准备"></a>Jira容器构建准备</h3><p>破解文件下载：<a href="https://github.com/idoall/docker/blob/master/ubuntu16.04-jira/7.2.7/files/usr/src/_jira/jira7.2_hack.zip" target="_blank" rel="noopener">jira7.2_hack.zip</a></p><pre><code>git clone https://github.com/cptactionhank/docker-atlassian-jira-softwarecd docker-atlassian-jira-softwarecp atlassian-extras-3.2.jar atlassian-universal-plugin-manager-plugin-2.22.9.jar ./ </code></pre><h3 id="定义-setenv-sh"><a href="#定义-setenv-sh" class="headerlink" title="定义 setenv.sh"></a>定义 setenv.sh</h3><p>修改默认使用jvm内存(将内存参数以变量传递给容器外部调用)：<br>vim setenv.sh</p><pre><code>## One way to set the JIRA HOME path is here via this variable.  Simply uncomment it and set a valid path like /jira/home.  You can of course set it outside in the command terminal.  That will also work.##JIRA_HOME=&quot;&quot;##  Occasionally Atlassian Support may recommend that you set some specific JVM arguments.  You can use this variable below to do that.#JVM_SUPPORT_RECOMMENDED_ARGS=&quot;&quot;## The following 2 settings control the minimum and maximum given to the JIRA Java virtual machine.  In larger JIRA instances, the maximum amount will need to be increased.#JVM_MINIMUM_MEMORY=${JVM_XMS:-384m}JVM_MAXIMUM_MEMORY=${JVM_XMX:-768m}## The following setting configures the size of JVM code cache.  A high value of reserved size allows Jira to work with more installed apps.#JVM_CODE_CACHE_ARGS=&#39;-XX:InitialCodeCacheSize=32m -XX:ReservedCodeCacheSize=512m&#39;## The following are the required arguments for JIRA.#JVM_REQUIRED_ARGS=&#39;-Djava.awt.headless=true -Datlassian.standalone=JIRA -Dorg.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true -Dmail.mime.decodeparameters=true -Dorg.dom4j.factory=com.atlassian.core.xml.InterningDocumentFactory&#39;# Uncomment this setting if you want to import data without notifications##DISABLE_NOTIFICATIONS=&quot; -Datlassian.mail.senddisabled=true -Datlassian.mail.fetchdisabled=true -Datlassian.mail.popdisabled=true&quot;#-----------------------------------------------------------------------------------## In general don&#39;t make changes below here##-----------------------------------------------------------------------------------#-----------------------------------------------------------------------------------# Prevents the JVM from suppressing stack traces if a given type of exception# occurs frequently, which could make it harder for support to diagnose a problem.#-----------------------------------------------------------------------------------JVM_EXTRA_ARGS=&quot;-XX:-OmitStackTraceInFastThrow&quot;PRGDIR=`dirname &quot;$0&quot;`cat &quot;${PRGDIR}&quot;/jirabanner.txtJIRA_HOME_MINUSD=&quot;&quot;if [ &quot;$JIRA_HOME&quot; != &quot;&quot; ]; then    echo $JIRA_HOME | grep -q &quot; &quot;    if [ $? -eq 0 ]; then            echo &quot;&quot;            echo &quot;--------------------------------------------------------------------------------------------------------------------&quot;                echo &quot;   WARNING : You cannot have a JIRA_HOME environment variable set with spaces in it.  This variable is being ignored&quot;            echo &quot;--------------------------------------------------------------------------------------------------------------------&quot;    else                JIRA_HOME_MINUSD=-Djira.home=$JIRA_HOME    fifiJAVA_OPTS=&quot;-Xms${JVM_MINIMUM_MEMORY} -Xmx${JVM_MAXIMUM_MEMORY} ${JVM_CODE_CACHE_ARGS} ${JAVA_OPTS} ${JVM_REQUIRED_ARGS} ${DISABLE_NOTIFICATIONS} ${JVM_SUPPORT_RECOMMENDED_ARGS} ${JVM_EXTRA_ARGS} ${JIRA_HOME_MINUSD} ${START_JIRA_JAVA_OPTS}&quot;export JAVA_OPTS# DO NOT remove the following line# !INSTALLER SET JAVA_HOMEecho &quot;&quot;echo &quot;If you encounter issues starting or stopping JIRA, please see the Troubleshooting guide at http://confluence.atlassian.com/display/JIRA/Installation+Troubleshooting+Guide&quot;echo &quot;&quot;if [ &quot;$JIRA_HOME_MINUSD&quot; != &quot;&quot; ]; then    echo &quot;Using JIRA_HOME:       $JIRA_HOME&quot;fi# set the location of the pid fileif [ -z &quot;$CATALINA_PID&quot; ] ; then    if [ -n &quot;$CATALINA_BASE&quot; ] ; then        CATALINA_PID=&quot;$CATALINA_BASE&quot;/work/catalina.pid    elif [ -n &quot;$CATALINA_HOME&quot; ] ; then        CATALINA_PID=&quot;$CATALINA_HOME&quot;/work/catalina.pid    fifiexport CATALINA_PIDif [ -z &quot;$CATALINA_BASE&quot; ]; then  if [ -z &quot;$CATALINA_HOME&quot; ]; then    LOGBASE=$PRGDIR    LOGTAIL=..  else    LOGBASE=$CATALINA_HOME    LOGTAIL=.  fielse  LOGBASE=$CATALINA_BASE  LOGTAIL=.fiPUSHED_DIR=`pwd`cd $LOGBASEcd $LOGTAILLOGBASEABS=`pwd`cd $PUSHED_DIRecho &quot;&quot;echo &quot;Server startup logs are located in $LOGBASEABS/logs/catalina.out&quot;# Set the JVM arguments used to start JIRA. For a description of the options, see# http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html#-----------------------------------------------------------------------------------# This allows us to actually debug GC related issues by correlating timestamps# with other parts of the application logs.#-----------------------------------------------------------------------------------GC_JVM_PARAMETERS=&quot;&quot;GC_JVM_PARAMETERS=&quot;-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintGCCause ${GC_JVM_PARAMETERS}&quot;GC_JVM_PARAMETERS=&quot;-Xloggc:$LOGBASEABS/logs/atlassian-jira-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M ${GC_JVM_PARAMETERS}&quot;CATALINA_OPTS=&quot;${GC_JVM_PARAMETERS} ${CATALINA_OPTS}&quot;export CATALINA_OPTS</code></pre><h3 id="定义Dockerfile"><a href="#定义Dockerfile" class="headerlink" title="定义Dockerfile"></a>定义Dockerfile</h3><pre><code>FROM openjdk:8-alpine# Configuration variables.ENV JIRA_HOME     /var/atlassian/jiraENV JIRA_INSTALL  /opt/atlassian/jiraENV JIRA_VERSION  7.13.0# Install Atlassian JIRA and helper tools and setup initial home# directory structure.RUN set -x \    &amp;&amp; apk add --no-cache curl xmlstarlet bash ttf-dejavu libc6-compat \    &amp;&amp; mkdir -p                &quot;${JIRA_HOME}&quot; \    &amp;&amp; mkdir -p                &quot;${JIRA_HOME}/caches/indexes&quot; \    &amp;&amp; chmod -R 700            &quot;${JIRA_HOME}&quot; \    &amp;&amp; mkdir -p                &quot;${JIRA_INSTALL}/conf/Catalina&quot; \    &amp;&amp; curl -Ls                &quot;https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-7.13.0.tar.gz&quot; | tar -xz --directory &quot;${JIRA_INSTALL}&quot; --strip-components=1 --no-same-owner \    &amp;&amp; curl -Ls                &quot;https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz&quot; | tar -xz --directory &quot;${JIRA_INSTALL}/lib&quot; --strip-components=1 --no-same-owner &quot;mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar&quot; \    &amp;&amp; rm -f                   &quot;${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar&quot; \    &amp;&amp; curl -Ls                &quot;https://jdbc.postgresql.org/download/postgresql-42.2.1.jar&quot; -o &quot;${JIRA_INSTALL}/lib/postgresql-42.2.1.jar&quot; \    &amp;&amp; chmod -R 700            &quot;${JIRA_INSTALL}/conf&quot; \    &amp;&amp; chmod -R 700            &quot;${JIRA_INSTALL}/logs&quot; \    &amp;&amp; chmod -R 700            &quot;${JIRA_INSTALL}/temp&quot; \    &amp;&amp; chmod -R 700            &quot;${JIRA_INSTALL}/work&quot; \    &amp;&amp; sed --in-place          &quot;s/java version/openjdk version/g&quot; &quot;${JIRA_INSTALL}/bin/check-java.sh&quot; \    &amp;&amp; echo -e                 &quot;\njira.home=$JIRA_HOME&quot; &gt;&gt; &quot;${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties&quot; \    &amp;&amp; touch -d &quot;@0&quot;           &quot;${JIRA_INSTALL}/conf/server.xml&quot;# Use the default unprivileged account. This could be considered bad practice# on systems where multiple processes end up being executed by &#39;daemon&#39; but# here we only ever run one process anyway.#USER daemon:daemon# Expose default HTTP connector port.EXPOSE 8080# Set volume mount points for installation and home directory. Changes to the# home directory needs to be persisted as well as parts of the installation# directory due to eg. logs.VOLUME [&quot;/var/atlassian/jira&quot;, &quot;/opt/atlassian/jira/logs&quot;]# Set the default working directory as the installation directory.WORKDIR /var/atlassian/jiraCOPY &quot;docker-entrypoint.sh&quot; &quot;/&quot;COPY atlassian-extras-3.2.jar ${JIRA_INSTALL}/atlassian-jira/WEB-INF/lib/atlassian-extras-3.2.jar COPY atlassian-universal-plugin-manager-plugin-2.22.9.jar ${JIRA_INSTALL}/atlassian-jira/WEB-INF/atlassian-bundled-plugins/atlassian-universal-plugin-manager-plugin-2.22.9.jarCOPY setenv.sh ${JIRA_INSTALL}/bin/setenv.shCOPY server.xml ${JIRA_INSTALL}/conf/server.xmlENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]# Run Atlassian JIRA as a foreground process by default.CMD [&quot;/opt/atlassian/jira/bin/start-jira.sh&quot;, &quot;-fg&quot;]</code></pre><h3 id="定义-server-xml"><a href="#定义-server-xml" class="headerlink" title="定义 server.xml"></a>定义 server.xml</h3><p>自定义server.xml文件，需求后续可以配置https访问</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;    &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot;/&gt;    &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot;/&gt;    &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;/&gt;    &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;/&gt;    &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;/&gt;    &lt;Service name=&quot;Catalina&quot;&gt;        &lt;Connector port=&quot;8080&quot; relaxedPathChars=&quot;[]|&quot; relaxedQueryChars=&quot;[]|{}^&amp;#x5c;&amp;#x60;&amp;quot;&amp;lt;&amp;gt;&quot;                   maxThreads=&quot;150&quot; minSpareThreads=&quot;25&quot; connectionTimeout=&quot;20000&quot; enableLookups=&quot;false&quot;                   maxHttpHeaderSize=&quot;8192&quot; protocol=&quot;HTTP/1.1&quot; useBodyEncodingForURI=&quot;true&quot; redirectPort=&quot;8443&quot;                   acceptCount=&quot;100&quot; disableUploadTimeout=&quot;true&quot; bindOnInit=&quot;false&quot;/&gt;        &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;            &lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;                &lt;Context path=&quot;&quot; docBase=&quot;${catalina.home}/atlassian-jira&quot; reloadable=&quot;false&quot; useHttpOnly=&quot;true&quot;&gt;                    &lt;Resource name=&quot;UserTransaction&quot; auth=&quot;Container&quot; type=&quot;javax.transaction.UserTransaction&quot;                              factory=&quot;org.objectweb.jotm.UserTransactionFactory&quot; jotm.timeout=&quot;60&quot;/&gt;                    &lt;Manager pathname=&quot;&quot;/&gt;                    &lt;JarScanner scanManifest=&quot;false&quot;/&gt;                &lt;/Context&gt;            &lt;/Host&gt;            &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot;                   pattern=&quot;%a %{jira.request.id}r %{jira.request.username}r %t &amp;quot;%m %U%q %H&amp;quot; %s %b %D &amp;quot;%{Referer}i&amp;quot; &amp;quot;%{User-Agent}i&amp;quot; &amp;quot;%{jira.request.assession.id}r&amp;quot;&quot;/&gt;        &lt;/Engine&gt;    &lt;/Service&gt;&lt;/Server&gt;</code></pre><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><pre><code>docker build -t jira:7.13.0 .</code></pre><h2 id="Mysql本地安装"><a href="#Mysql本地安装" class="headerlink" title="Mysql本地安装"></a>Mysql本地安装</h2><h3 id="yum-部署mysql"><a href="#yum-部署mysql" class="headerlink" title="yum 部署mysql"></a>yum 部署mysql</h3><pre><code>curl -LO http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpmyum localinstall mysql57-community-release-el7-11.noarch.rpmyum install mysql-community-serversystemctl enable mysqldsystemctl start mysqldsystemctl status mysqld# 查看密码grep &#39;temporary password&#39; /var/log/mysqld.log# 登录 MySQL 并修改密码mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass4!&#39;;</code></pre><h3 id="配置mysql数据库："><a href="#配置mysql数据库：" class="headerlink" title="配置mysql数据库："></a>配置mysql数据库：</h3><pre><code>创建数据库：mysql&gt; CREATE DATABASE jira  DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;授连接次数据库的权限：mysql&gt;  grant all privileges on jira.* to jira@&#39;.%&#39; identified by &#39;jira&#39;;mysql&gt; flush privileges;</code></pre><p>注意： jira7.13.0版本不支持utf8_general_ci的校验规则，因此创建数据库时必须指明utf8_bin校验规则！！</p><h2 id="部署镜像"><a href="#部署镜像" class="headerlink" title="部署镜像"></a>部署镜像</h2><h3 id="Docker-本地部署"><a href="#Docker-本地部署" class="headerlink" title="Docker 本地部署"></a>Docker 本地部署</h3><pre><code>docker run --publish 8080:8080 --name jira -d local-jira:7.3.8</code></pre><h3 id="使用docker-compose方式"><a href="#使用docker-compose方式" class="headerlink" title="使用docker-compose方式"></a>使用docker-compose方式</h3><p>构建docker-compose.yml</p><pre><code>jira:  image: jira:7.13.0  restart: always  environment:    - JVM_XMX=2048m    - JVM_XMS=1024m  ports:    - &#39;8080:8080&#39;  links:    - db  volumes:    - ./data/jira:/var/atlassian/jira    - ./data/logs:/opt/atlassian/jira/logsdb:  image: mysql:5.7  restart: always  environment:    - MYSQL_USER=jira    - MYSQL_PASSWORD=jira    - MYSQL_DATABASE=jira    - MYSQL_ROOT_PASSWORD=jira  volumes:    - ./data/mysql:/var/lib/mysql</code></pre><h3 id="采用k8s集群方式运行"><a href="#采用k8s集群方式运行" class="headerlink" title="采用k8s集群方式运行"></a>采用k8s集群方式运行</h3><p>此环境在阿里云K8s容器平台部署</p><h4 id="创建pv"><a href="#创建pv" class="headerlink" title="创建pv"></a>创建pv</h4><pre><code>apiVersion: storage.k8s.io/v1kind: StorageClassmetadata:  name: hangzhou-b-ssd  parameters:  cachingmode: None  kind: Managed  storageaccounttype: Standard_LRSprovisioner: kubernetes.io/azure-diskreclaimPolicy: DeletevolumeBindingMode: ImmediateallowVolumeExpansion: true</code></pre><h4 id="创建pvc"><a href="#创建pvc" class="headerlink" title="创建pvc"></a>创建pvc</h4><pre><code>kind: PersistentVolumeClaimapiVersion: v1metadata:  name: jira-dataspec:  accessModes:   - &quot;ReadWriteOnce&quot;  resources:    requests:       storage: &quot;100Gi&quot;    storageClassName: &quot;hangzhou-b-ssd&quot;</code></pre><h4 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h4><pre><code>apiVersion: v1kind: Servicemetadata:  annotations:    service.beta.kubernetes.io/alicloud-loadbalancer-cert-id: &quot;cert-id&quot;    service.beta.kubernetes.io/alicloud-loadbalancer-protocol-port: &quot;https:443,http:80&quot;  name: jira-svc  namespace: defaultspec:  ports:  - port: 443    protocol: TCP    targetPort: 8080  selector:    app: jira-svc  sessionAffinity: None  type: LoadBalancer       </code></pre><p>这里采用阿里自带负载均衡方式部署，然后域名解析到负载均衡外网ip</p><h4 id="创建Deployment"><a href="#创建Deployment" class="headerlink" title="创建Deployment"></a>创建Deployment</h4><pre><code>apiVersion: apps/v1kind: Deploymentmetadata:  name: jira-deployment  namespace: defaultspec:  replicas: 1  selector:    matchLabels:      app: jira-svc  template:    metadata:      labels:        app: jira-svc    spec:      containers:        - name: jira-svc          image: jira:7.13.0          imagePullPolicy: Always          env:          - name: JVM_XMX            value: &quot;2048m&quot;          - name: JVM_XMS            value: &quot;1024m&quot;          ports:            - containerPort: 8080          volumeMounts:          - mountPath: &quot;/var/atlassian/jira&quot;            name: jira-data               volumes:      - name: jira-data        persistentVolumeClaim:          claimName: jira-data  </code></pre><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><pre><code>kubectl apply -f .</code></pre><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>首先按照安装步骤一步一步进行，到证书授权的时候，点击申请证书，然后得到许可证，填入即可，最后在应用程序–版本和许可证，可看到技术服务器截止日期 08/二月/33，即破解成功！(插件破解：免费试用–获取申请码—填入申请码—破解成功)</p><h2 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h2><p>注意：jira插件管理中，atlassian-universal-plugin-manager-plugin插件绝对不要更新，否则插件破解会失效。</p><p>补充说明：</p><p>1、插件破解原理：</p><p>atlassian-universal-plugin-manager-plugin插件是进行插件管理的，只需要破解了这个插件，剩下的所有插件都自动破解完成了</p><p>2、如果破解不成功、插件管理版本高于2.22.4、或者不小心更新了atlassian-universal-plugin-manager-plugin这个插件怎么办？</p><p>遇到这种情况，需要到jira的安装目录和数据目录下，替换掉atlassian-universal-plugin-manager-plugin相关的所有文件。</p><p>具体操作步骤：</p><p>（1）到jira安装目录和数据目录下find出所有相关文件：<br>（2）替换、删除相关文件，保险起见，可在删除前对数据进行备份。<br>（3）重启jira<br>（4）到插件管理中心查看插件授权期限，变为2099年</p><p>如何修改内存？</p><p>vim /opt/atlassian/jira/bin/setenv.sh</p><pre><code>JVM_MINIMUM_MEMORY=${JVM_XMS:-384m}JVM_MAXIMUM_MEMORY=${JVM_XMX:-768m}</code></pre><p>如何解决mysql ssl报错?</p><p>vim /var/atlassian/jira/dbconfig.xml</p><pre><code>&lt;url&gt;jdbc:mysql://address=(protocol=tcp)(host=mysql_hostname)(port=mysql_port)/jira?useUnicode=true&amp;amp;characterEncoding=UTF8&amp;amp;sessionVariables=default_storage_engine=InnoDB&amp;amp;useSSL=false&lt;/url&gt;</code></pre><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><ul><li><p><a href="https://www.jianshu.com/p/744c23f93dfc" target="_blank" rel="noopener">https://www.jianshu.com/p/744c23f93dfc</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1027457" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1027457</a></p></li><li><p><a href="https://paper.tuisec.win/detail/29d80901a36cf52" target="_blank" rel="noopener">https://paper.tuisec.win/detail/29d80901a36cf52</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Swarm 学习笔记总结</title>
      <link href="/archives/3227c071.html"/>
      <url>/archives/3227c071.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Docker-Swarm-学习笔记总结"><a href="#Docker-Swarm-学习笔记总结" class="headerlink" title="Docker Swarm 学习笔记总结"></a>Docker Swarm 学习笔记总结</h1><h2 id="Swarm-介绍"><a href="#Swarm-介绍" class="headerlink" title="Swarm 介绍"></a>Swarm 介绍</h2><p>Docker Swarm是Docker官方提供的集群工具。它可以将一些关联的Docker主机转变成一个虚拟Docker主机。因为Docker Swarm符合Docker API的标准,任何已经可以与Docker守护进程通信的工具都可以使用Swarm来透明地扩展到多个主机。支持工具包括:</p><ul><li>Dokku</li><li>Docker Compose</li><li>Docker Machine</li><li>Jenkins</li></ul><h2 id="Swarm-架构"><a href="#Swarm-架构" class="headerlink" title="Swarm 架构"></a>Swarm 架构</h2><p>Swarm 是用来被用来管理 Docker 集群的，所以单个 Docker host 是整个集群的基础。Swarm 自身可以有两种安装方式，一种是当成普通的 Docker 容器来安装，一种是当成一个简单的应用被安装在一台虚拟机或者物理机上。它的架构图如下：</p><p><img src="https://www.ibm.com/developerworks/cn/cloud/library/1511_zhangyq_dockerswarm/index1869.png" alt="Swarm 架构图"></p><p>所有的 Docker node 都会被当成一个调度候选对象。类似于 OpenStack 中的 compute node.</p><h2 id="Swarm-集群功能"><a href="#Swarm-集群功能" class="headerlink" title="Swarm 集群功能"></a>Swarm 集群功能</h2><h3 id="Swarm-调度器"><a href="#Swarm-调度器" class="headerlink" title="Swarm 调度器"></a>Swarm 调度器</h3><p>调度是集群中十分重要的功能，Swarm目前支持三种调度策略：Spread、Binpack和random。<br>在执行swarm manage启动管理服务时，可通过–strategy参数指定调度策略，默认是：spread。</p><p>三种调度策略的优缺点：</p><ul><li><p>spread： 配置相同情况下，选择一个正在运行的容器数量最少的那个节点，平摊容器到各个节点。</p></li><li><p>binpack：尽可能将所有容器放在一台节点上运行，尽量少用节点，避免容器碎片化。</p></li><li><p>random： 直接随机分配，不考虑集群节点状态，方便进行测试使用。</p></li></ul><h3 id="Swarm-过滤器"><a href="#Swarm-过滤器" class="headerlink" title="Swarm 过滤器"></a>Swarm 过滤器</h3><p>Swarm 过滤器（filter）可以实现特定的容器分配到特点的节点上。目前支持物种过滤器：Constraint、Affinity、Port、Dependency、Health。</p><ul><li><p>Constraint 过滤器： 绑定到节点的键值对，相当于给节点打标签。比如在启动Docker服务时，指定某个节点颜色为 red。</p></li><li><p>Affinity 过滤器：允许用户在启动一个容器的时候，让它分配到某个已有容器的节点上。</p></li><li><p>其他过滤器也类似，通过-e affinity:image==<name or>选择拥有指定镜像的节点，通过-e affinity:lael_name==value来选择拥有指定标签的容器所允许的节点。</name></p></li></ul><h3 id="Swarm-服务发现"><a href="#Swarm-服务发现" class="headerlink" title="Swarm 服务发现"></a>Swarm 服务发现</h3><p>通过不同的路径来选择特定的服务发现后端机制：</p><ul><li>token://<token>: 使用Docker Hub提供的服务，适用于公网；</token></li><li>file://pah/to/file：使用本地文件，需手动管理；</li><li>consul://<ip>/<path>：使用consul服务，私有环境；</path></ip></li><li>etcd://<ip1>,<ip2>,<ip3>/<path>：使用etcd服务，私有环境；</path></ip3></ip2></ip1></li><li>zk://<ip1>,<ip2>,<ip3>/<path>：使用zk服务，私有环境；</path></ip3></ip2></ip1></li><li>[nodes://]<ip1>,<ip2>,<ip3>：手动指定集群中节点地址，方便进行服务测试。</ip3></ip2></ip1></li></ul><h2 id="Swarm-集群实战"><a href="#Swarm-集群实战" class="headerlink" title="Swarm 集群实战"></a>Swarm 集群实战</h2><h3 id="安装Dcoker-Swarm的方式"><a href="#安装Dcoker-Swarm的方式" class="headerlink" title="安装Dcoker Swarm的方式"></a>安装Dcoker Swarm的方式</h3><p>安装Docker Swarm有两种方式：</p><ul><li>直接以swarm为镜像模板启动容器；</li><li>在系统中安装swarm的二进制可执行文件。</li></ul><p>官网也列举出了这两种方法的优缺点：</p><p>以swarm镜像启动容器：</p><ul><li>无需在系统中安装可执行的二进制文件；</li><li>用docker run命令每次都可以获取并运行最近版本的镜像；</li><li>容器是Swarm与主机环境相隔离，无需维护shell的路径和环境。</li></ul><p>在系统中安装swarm：</p><ul><li>Swarm项目的开发者在测试代码变更的过程中，无需在运行该二进制文件前进行容器化(“containerizing”)操作。</li></ul><h3 id="集群创建步骤"><a href="#集群创建步骤" class="headerlink" title="集群创建步骤"></a>集群创建步骤</h3><p>创建一个Swarm集群的第一步是从网上拉取Docker Swarm镜像。然后,你可以使用Docker配置Swarm manager和所有节点运行Docker Swarm。步骤:</p><ul><li>在每个节点上打开一个TCP端口用于跟Swarm manager通信</li><li>在每个节点上安装Docker</li><li>创建和管理TLS证书以保护集群</li></ul><h3 id="集群部署环境"><a href="#集群部署环境" class="headerlink" title="集群部署环境"></a>集群部署环境</h3><pre><code>Docker01 和 Docker02 分别对应 manager0 和 manager1；Docker04 和 Docker05 分别对应 node0 和 node1；Docker03 对应 consul0；</code></pre><p>配置ssl证书及安装docker服务</p><pre><code>mkdir -p /etc/docker/certs.d/DomainName:Portcp ca.crt /etc/docker/certs.d/DomainName:Port/service docker restart</code></pre><p>创建Swarm集群：</p><pre><code> # 在高可用的Swarm集群中创建主管理者 # 操作对象 manager0 和 consul0 # &lt;manager0_ip&gt; 和 &lt;consul_ip&gt;相同 docker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise &lt;manager0_ip&gt;:4000 consul://&lt;consul_ip&gt;:8500 # 操作对象 manager1 docker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise &lt;manager1_ip&gt;:4000 consul://172.30.0.161:8500 # 操作对象 node0 和 node1 docker run -d swarm join --advertise=&lt;node_ip&gt;:2375 consul://&lt;consul_ip&gt;:8500</code></pre><p>集群使用：</p><pre><code> # 操作对象 manager0 和 consul0 docker -H :4000 info # 在Swarm集群中运行应用 docker -H :4000 run hello-world # 查询Swarm集群的哪个节点在运行该应用 docker -H :4000 ps- 测试Swarm集群的故障； # 获取swarm容器的id或名称 # 操作对象 manager0 docker ps # 删除或关闭当前的主管理者 manager0 docker rm -f &lt;id_name&gt; # 创建或启动Swarm集群管理者 manager0 docker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise &lt;manager0_ip&gt;:4000 consul://&lt;consul_ip&gt;:8500 # 查看该容器的日志 sudo docker logs &lt;id_name&gt; # 获取集群管理者和节点的信息 docker -H :4000 info</code></pre><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><h3 id="Swarm-上的容器选择"><a href="#Swarm-上的容器选择" class="headerlink" title="Swarm 上的容器选择"></a>Swarm 上的容器选择</h3><ul><li>适合无状态服务：web服务、反向代理、采集器等</li><li>不适合有状态服务：数据库、redis、zk等<h3 id="设置Docker仓库"><a href="#设置Docker仓库" class="headerlink" title="设置Docker仓库"></a>设置Docker仓库</h3></li><li>指明Docker仓库地址</li><li>私有仓库增加参数：–with-registry-auth</li><li>使用tag进行版本上线及回滚</li></ul><h3 id="改造无状态化应用容器"><a href="#改造无状态化应用容器" class="headerlink" title="改造无状态化应用容器"></a>改造无状态化应用容器</h3><ul><li>采用共享存储挂载方式</li></ul><h3 id="日志采集服务"><a href="#日志采集服务" class="headerlink" title="日志采集服务"></a>日志采集服务</h3><p>集中式的日志和指标是使用分布式文件系统的必须项，如ELK，Graphana，Graylog 等等。</p><p>这里有许多可选项，有开源项目，也有SaaS类服务。这些打造和整合成可靠的服务是复杂且艰难的。建议先使用云端服务（如Loggly, Logentries）, 当成本上涨的时候，再开始架设自己的日志收集服务。<br>例：ELK 栈日志处理配置:</p><pre><code>docker service update \ --log-driver gelf \--log-opt gelf-address=udp://monitoring.example.com:12201 \--log-opt tag=example-tag \example-service</code></pre><h3 id="创建可附加的网络"><a href="#创建可附加的网络" class="headerlink" title="创建可附加的网络"></a>创建可附加的网络</h3><p>记得使用它，否则无法在Docker Swarm下一条命令跑起一个容器。这是Docker1.13+新功能。如果使用旧版本的Docker, 最好升级下。</p><p>代码：</p><pre><code>docker network create --driver=overlay --attachable core</code></pre><h3 id="增加环境变量"><a href="#增加环境变量" class="headerlink" title="增加环境变量"></a>增加环境变量</h3><p>如果创建Docker镜像的时候，遵循了最佳实践原则（<a href="https://rock-it.pl/how-to-writ" target="_blank" rel="noopener">https://rock-it.pl/how-to-writ</a> … iles/），允许在运行的时候通过环境变量设置一切配置项，那么把应用迁到Swarm的过程完全没有问题。</p><p>例，有用的命令：</p><pre><code>docker service create \--env VAR=VALUE \--env-file FILENAME \...docker service update \--env-add VAR=NEW_VALUE \--env-rm VAR \..</code></pre><p>下一个级别就是使用非公开的API挂载文件像挂载秘钥那样（Authorized keys, SSL certs 等）。作者暂时还未使用此功能，不能详述，但这个功能特性绝对值得思考和使用。</p><h3 id="设置适当实例和批量更新"><a href="#设置适当实例和批量更新" class="headerlink" title="设置适当实例和批量更新"></a>设置适当实例和批量更新</h3><p>保持适当数量的实例，以应对高流量和实例或者节点不可用的情况。同时太多的实例数也会占用CPU和内存，并且导致争抢CUP资源。</p><p>update-parallelism的默认值是1，默认只有一个实例在运行。但这个更新速度太慢了，建议是 replicas / 2。</p><p>相关命令：</p><pre><code>docker service update \--update-parallelism 10 \webappYou can scale multiple services at oncedocker service scale redis=1 nginx=4 webapp=20Check scaling statusdocker service lsCheck details of a service (without stopped containers)docker service ps webapp | grep -v &quot;Shutdown&quot;</code></pre><h3 id="把Swarm配置保存为代码"><a href="#把Swarm配置保存为代码" class="headerlink" title="把Swarm配置保存为代码"></a>把Swarm配置保存为代码</h3><p>最好使用Docker Compose v3版本的语法（<a href="https://docs.docker.com/compos" target="_blank" rel="noopener">https://docs.docker.com/compos</a> … eploy）。</p><p>他允许使用代码指定几乎所有的服务选项。作者在开发的时候使用 Docker-compose.yml，在生产环境（swarm）配置使用 Docker-compose.prod.yml . 部署Docker-compose文件中所描述的服务，需要Docker stack deploy 命令（属于新版本 Stack命令集合中的一部分[<a href="https://docs.docker.com/engine" target="_blank" rel="noopener">https://docs.docker.com/engine</a> … tack/]）</p><p>Docker compose v3例子：</p><pre><code>docker-compose.prod.ymlversion: &#39;3&#39;services:webapp:image: registry.example.com/webappnetworks:- ingressdeploy:replicas: ${WEBAPP_REPLICAS}mode: replicatedrestart_policy:condition: on-failureproxy:image: registry.example.com/webapp-nginx-proxynetworks:- ingressports:- 80:80- 443:443deploy:replicas: ${NGINX_REPLICAS}mode: replicatedrestart_policy:condition: on-failurenetworks:ingress:external: true</code></pre><p>部署的例子（创建或者更新服务）：</p><pre><code>export NGINX_REPLICAS=2 WEBAPP_REPLICAS=5docker login registry.example.comdocker stack deploy \-c docker-compose.prod.yml\--with-registry-auth \frontend</code></pre><p>提示：Docker-compose文件支持环境变量 (${VARIABLE}), 所以，可以动态调整配置作为测试等。</p><h3 id="设置限制"><a href="#设置限制" class="headerlink" title="设置限制"></a>设置限制</h3><p>就经验而言，可以为所有服务设置CPU使用限制。当某一个容器应用占用掉所有主机资源时，此限制可以避免这种情况发生。</p><p>当想把所有容器均匀地发布在所有主机上或是想确保有足够的资源来响应操作时，需使用Reserve-cpu这个参数。</p><p>例如：</p><pre><code>docker service update --limit-cpu 0.25--reserve-cpu 0.1webapp</code></pre><h3 id="监控连接"><a href="#监控连接" class="headerlink" title="监控连接"></a>监控连接</h3><p>曾经在Swarm网络上遇到过一些问题。很多次所有的流量都被路由到同一个容器实例上，而同时有9个容器实例正常且健康的。这种情况下——即流量持续导到一个实例上，做扩容或者缩容操作的时候，加上这个参数–endpoint-mode 。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.ibm.com/developerworks/cn/cloud/library/1511_zhangyq_dockerswarm/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/cloud/library/1511_zhangyq_dockerswarm/index.html</a></p><p><a href="http://dockone.io/article/1486" target="_blank" rel="noopener">http://dockone.io/article/1486</a></p><p><a href="http://dockone.io/article/2318" target="_blank" rel="noopener">http://dockone.io/article/2318</a></p><p><a href="https://rock-it.pl/my-experience-with-docker-swarm-when-you-need-it/" target="_blank" rel="noopener">https://rock-it.pl/my-experience-with-docker-swarm-when-you-need-it/</a></p><p><a href>Docker技术入门于实战~Swarm章节</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用rpmbuild自定义构建rpm包</title>
      <link href="/archives/d1c91b93.html"/>
      <url>/archives/d1c91b93.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="使用rpmbuild自定义构建rpm包"><a href="#使用rpmbuild自定义构建rpm包" class="headerlink" title="使用rpmbuild自定义构建rpm包"></a>使用rpmbuild自定义构建rpm包</h1><p>目前我所知道的 build nginx RPM 的方式(测试过)总共 3 种,大致分为 2 类</p><ul><li>基于源码 build</li><li>基于已有 rpm 替换</li></ul><p>第一种方案的好处就是配置文件等能始终保持最新的,编译版本等不受限制;但是从源码 build 非常耗时,尤其是网络环境复杂的情况下,没有高配置国外服务器很难完成 build,而且要维护 build 所需 spec 文件等,自己维护这些未必能够尽善尽美;</p><p>第二种方式是创建速度快,build 方式简单可靠,但是由于是替换方式,所以 rpm 中的配置不一定能够即使更新,而且只能基于官方build 好以后的二进制文件进行替换,如果想要尝试 master 最新代码则无法实现</p><h2 id="二、基于源码-Build"><a href="#二、基于源码-Build" class="headerlink" title="二、基于源码 Build"></a>二、基于源码 Build</h2><p>对于 Centos RPM build 原理方式这里不再细说，基于源码 build 的关键就在于 spec 文件，我尝试过自己去写，后来对比一些开源项目的感觉 low 得很，所以以前一直采用一个国外哥们写的脚本 build<a href="https://github.com/JohnTheodore/kubernetes-rpm-builder" target="_blank" rel="noopener">参见这里</a>；这个脚本不太好的地方是作者已经停止了维护；经过不懈努力，找到了 Fedora 系统的 rpm 仓库，鼓捣了一阵摸清了套路；以下主要以 Fedora 仓库为例进行 build</p><p>以下 Build 在一台 Do 8核心 16G VPS 上进行，由于众所周知的原因，国内 Build 很费劲，一般国外 VPS 都是按小时收费，有个 2 块钱就够了</p><h3 id="2-1、安装-build-所需依赖"><a href="#2-1、安装-build-所需依赖" class="headerlink" title="2.1、安装 build 所需依赖"></a>2.1、安装 build 所需依赖</h3><p>由于 spec 文件中定义了依赖于 golang 这个包，所以如果不装的话会报错；事实上如果使用刚刚安装的这个 golang 去 build 还是会挂掉，因为实际编译要求 golang &gt; 1.7，直接 yum 装的是 1.6，故下面又使用 gvm 装了一个 1.8 的 golang，上面的 golang 安装只是为了通过 spec 检查</p><pre><code># EPELyum install epel-release -y# update 系统组件yum update -y &amp;&amp; yum upgrade -y# 安装基本的编译依赖yum install golang go-md2man go-bindata gcc bison git rpm-build vim -y# 安装 gvm(用于 golang 版本管理)bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)source /root/.gvm/scripts/gvm# 安装 1.8 之前需要先安装 1.4gvm install go1.4 -Bgvm use go1.4# 使用 golang 1.8 版本 buildgvm install go1.9gvm use go1.9</code></pre><h3 id="2-2、克隆-build-仓库"><a href="#2-2、克隆-build-仓库" class="headerlink" title="2.2、克隆 build 仓库"></a>2.2、克隆 build 仓库</h3><p>Fedora 官方 Kubernetes 仓库地址在 这里，如果有版本选择请自行区分</p><pre><code>git clone https://src.fedoraproject.org/git/rpms/nginx.git</code></pre><h3 id="2-3、从-spec-获取所需文件"><a href="#2-3、从-spec-获取所需文件" class="headerlink" title="2.3、从 spec 获取所需文件"></a>2.3、从 spec 获取所需文件</h3><p>克隆好 build 仓库后首先查看 kubernetes.spec 文件，确定 build 所需文件，spec 文件如下</p><pre><code>%global  _hardened_build     1%global  nginx_user          nginx# Disable strict symbol checks in the link editor.# See: https://src.fedoraproject.org/rpms/redhat-rpm-config/c/078af19%undefine _strict_symbol_defs_build%bcond_with geoip# gperftools exist only on selected arches# gperftools *detection* is failing on ppc64*, possibly only configure# bug, but disable anyway.%ifnarch s390 s390x ppc64 ppc64le%global with_gperftools 1%endif%global with_aio 1%if 0%{?fedora} &gt; 22%global with_mailcap_mimetypes 1%endif</code></pre><p>从 spec 文件中可以看到 build 主要需要两个仓库的源码，一个是 kubernetes 主仓库，存放着主要的 build 源码；另一个是 contrib 仓库，存放着一些配置文件，如 systemd 配置等</p><p>接下来从 spec 文件的 source 段中可以解读到(source0、source1)最终所需的两个仓库压缩文件名为 kubernetes-SHORTCOMMIT、contrib-SHORTCOMIT，source 段如下</p><pre><code>Name:              nginxEpoch:             1Version:           1.11.1Release:           14%{?dist}Summary:           A high performance web server and reverse proxy serverGroup:             System Environment/Daemons# BSD License (two clause)# http://www.freebsd.org/copyright/freebsd-license.htmlLicense:           BSDURL:               http://nginx.org/Source0:           https://nginx.org/download/nginx-%{version}.tar.gzSource10:          nginx.serviceSource11:          nginx.logrotateSource12:          nginx.confSource13:          nginx-upgradeSource14:          nginx-upgrade.8Source100:         index.htmlSource101:         poweredby.pngSource102:         nginx-logo.pngSource103:         404.htmlSource104:         50x.htmlSource200:         README.dynamicSource210:         UPGRADE-NOTES-1.6-to-1.10</code></pre><p>我们准备 build 一个最新的 1.12.1 的 rpm,修改</p><pre><code>Name:              nginxEpoch:             1Version:           1.12.1Release:           14%{?dist}</code></pre><h3 id="2-4、准备源码"><a href="#2-4、准备源码" class="headerlink" title="2.4、准备源码"></a>2.4、准备源码</h3><p>修改好文件以后，就可以下载源码文件了，源码下载不必去克隆 github 项目，直接从 spec 中给出的地址下载即可</p><pre><code>cd nginxwget https://nginx.org/download/nginx-1.12.1.tar.gz</code></pre><h3 id="2-5、build-rpm"><a href="#2-5、build-rpm" class="headerlink" title="2.5、build rpm"></a>2.5、build rpm</h3><p>在正式开始 build 之前，还有一点需要注意的是 默认的 kubernetes.spec 文件中指定了该 rpm 依赖于 docker 这个包，在 CentOS 上可能我们会安装 docker-engine 或者 docker-ce，此时安装 kubernetes rpm 是无法安装的，因为他以来的包不存在，解决的办法就是编译之前删除 spec 文件中的 Requires: docker 即可，最后创建好 build 目录，并放置好源码文件开始 build 即可，当然 build 可以有不同选择</p><h1 id="由于我是-root-用户，所以目录位置在这"><a href="#由于我是-root-用户，所以目录位置在这" class="headerlink" title="由于我是 root 用户，所以目录位置在这"></a>由于我是 root 用户，所以目录位置在这</h1><h1 id="实际生产-强烈不推荐使用-root-build-操作失误会损毁宿主机"><a href="#实际生产-强烈不推荐使用-root-build-操作失误会损毁宿主机" class="headerlink" title="实际生产 强烈不推荐使用 root build(操作失误会损毁宿主机)"></a>实际生产 强烈不推荐使用 root build(操作失误会损毁宿主机)</h1><h1 id="我的是一台临时-vps，所以无所谓了"><a href="#我的是一台临时-vps，所以无所谓了" class="headerlink" title="我的是一台临时 vps，所以无所谓了"></a>我的是一台临时 vps，所以无所谓了</h1><pre><code>mkdir -p /root/rpmbuild/SOURCES/mv ~/nginx/* /root/rpmbuild/SOURCES/cd /root/rpmbuild/SOURCES/# 执行 buildrpmbuild -ba nginx.spec</code></pre><p>注意，由于我们选择的版本已经超出了仓库所支持的最大版本，所以有些 Patch 已经不再适用，如 spec 中的 Patch12、Patch19 会出错，所需要注释掉(%prep 段中也有一个)</p><p>rpmbuild 可选项有很多，常用的 3 个，可以根据自己实际需要进行 build:</p><ul><li>-ba : build 源码包+二进制包</li><li>-bb : 只 build 二进制包</li><li>-bs : 只 build 源码包</li></ul><p>最后 build 完成后如下</p><pre><code>[root@test x86_64]# lltotal 2480-rw-r--r-- 1 root root  543948 Sep 20 17:21 nginx-1.12.1-14.el7.x86_64.rpm-rw-r--r-- 1 root root 1754960 Sep 20 17:21 nginx-debuginfo-1.12.1-14.el7.x86_64.rpm-rw-r--r-- 1 root root   27544 Sep 20 17:21 nginx-mod-http-image-filter-1.12.1-14.el7.x86_64.rpm-rw-r--r-- 1 root root   36992 Sep 20 17:21 nginx-mod-http-perl-1.12.1-14.el7.x86_64.rpm-rw-r--r-- 1 root root   26628 Sep 20 17:21 nginx-mod-http-xslt-filter-1.12.1-14.el7.x86_64.rpm-rw-r--r-- 1 root root   55316 Sep 20 17:21 nginx-mod-mail-1.12.1-14.el7.x86_64.rpm-rw-r--r-- 1 root root   78512 Sep 20 17:21 nginx-mod-stream-1.12.1-14.el7.x86_64.rpm</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://mritd.me/2017/07/12/how-to-build-kubernetes-rpm/" target="_blank" rel="noopener">https://mritd.me/2017/07/12/how-to-build-kubernetes-rpm/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 系列02-docker常用命令</title>
      <link href="/archives/88e80668.html"/>
      <url>/archives/88e80668.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Docker-系列02-docker常用命令"><a href="#Docker-系列02-docker常用命令" class="headerlink" title="Docker 系列02-docker常用命令"></a>Docker 系列02-docker常用命令</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>定义一个Dockerfile文件</p><pre><code># 将官方 Python 运行时用作父镜像FROM python:2.7-slim# 将工作目录设置为 /appWORKDIR /app# 将当前目录内容复制到位于 /app 中的容器中ADD . /app# 安装 requirements.txt 中指定的任何所需软件包RUN pip install -r requirements.txt# 使端口 80 可供此容器外的环境使用EXPOSE 80# 定义环境变量ENV NAME World# 在容器启动时运行 app.pyCMD [&quot;python&quot;, &quot;app.py&quot;]</code></pre><p>构建镜像</p><pre><code>docker build -t friendlyname .</code></pre><p>启动镜像，并且映射本地4000到容器端口80</p><pre><code>docker run -p 4000:80 friendlyname  </code></pre><p>后台方式启动镜像</p><pre><code>docker run -d -p 4000:80 friendlyname</code></pre><p>查看所有正在运行的容器的列表</p><pre><code>docker ps</code></pre><p>停止指定的容器</p><pre><code>docker stop &lt;hash&gt;</code></pre><p>查看所有容器的列表</p><pre><code>docker ps -a</code></pre><p>强制关闭指定的容器</p><pre><code>docker kill &lt;hash&gt;</code></pre><p>删除指定的容器</p><pre><code>docker rm &lt;hash&gt;</code></pre><p>删除所有容器</p><pre><code>docker rm $(docker ps -a -q)</code></pre><p>显示所有镜像</p><pre><code>docker images -a</code></pre><p>删除指定的镜像</p><pre><code>docker rmi &lt;imagename&gt;</code></pre><p>删除所有镜像</p><pre><code>docker rmi $(docker images -q)</code></pre><p>登录docker</p><pre><code>docker login             </code></pre><p>镜像打标签</p><pre><code>docker tag &lt;image&gt; username/repository:tag</code></pre><p>将打完标签的镜像上传</p><pre><code>docker push username/repository:tag</code></pre><h2 id="swarm"><a href="#swarm" class="headerlink" title="swarm"></a>swarm</h2><p>定义一个docker-compose.yml</p><pre><code>version: &quot;3.1&quot;services:  web:    image: username/rep:tag    deploy:      replicas: 4      resources:        limits:          cpus: &quot;0.1&quot;          memory: 50M      restart_policy:        condition: on-failure    ports:      - &quot;80:80&quot;    networks:      - webnetnetworks:  webnet:</code></pre><p>初始话swarm管理节点</p><pre><code>docker swarm init</code></pre><p>列出此 Docker 主机上所有正在运行的应用</p><pre><code>docker stack ls </code></pre><p>运行指定的 Compose 文件</p><pre><code>docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;</code></pre><p>列出与应用关联的服务</p><pre><code>docker stack services &lt;appname&gt;</code></pre><p>列出与应用关联的正在运行的容器</p><pre><code>docker stack ps &lt;appname&gt;</code></pre><p>清除应用</p><pre><code>docker stack rm &lt;appname&gt;                             #</code></pre><h2 id="swarm集群"><a href="#swarm集群" class="headerlink" title="swarm集群"></a>swarm集群</h2><p>swarm 是一组运行 Docker 并且已加入集群中的机器。执行此操作后，您可以继续运行已使用的 Docker 命令，但现在它们在集群上由 swarm 管理节点执行。 swarm 中的机器可以为物理或虚拟机。加入 swarm 后，可以将它们称为节点。</p><p>swarm 管理节点可以使用多项策略来运行容器，例如“最空的节点”– 这将使用容器填充使用最少的机器。或“全局”，这将确保每台机器恰好获得指定容器的一个实例。您可以指示 swarm 管理节点使用 Compose 文件中的这些策略，就像您已使用的策略一样。</p><p>swarm 管理节点是 swarm 中可以执行命令或授权其他机器加入 swarm 作为工作节点的唯一机器。工作节点仅用于提供功能，并且无权告知任何其他机器它可以做什么和不能做什么。</p><p>到目前为止，您已在本地机器上以单主机模式使用 Docker。但是，也可以将 Docker 切换到 swarm mode，并且这可以实现 swarm 的使用。即时启用 swarm mode 可以使当前机器成为 swarm 管理节点。从那时起，Docker 将在您要管理的 swarm 上运行您执行的命令，而不是仅在当前机器上执行命令。</p><p>创建 VM（Mac、Win7、Linux）</p><pre><code>docker-machine create --driver virtualbox myvm1</code></pre><p>创建 VM (Win10)</p><pre><code>docker-machine create -d hyperv --hyperv-virtual-switch &quot;myswitch&quot; myvm1</code></pre><p>查看有关节点的基本信息</p><pre><code>docker-machine env myvm1</code></pre><p>列出 swarm 中的节点</p><pre><code>docker-machine ssh myvm1 &quot;docker node ls&quot;</code></pre><p>检查节点</p><pre><code>docker-machine ssh myvm1 &quot;docker node inspect &lt;node ID&gt;&quot;</code></pre><p>查看加入令牌</p><pre><code>docker-machine ssh myvm1 &quot;docker swarm join-token -q worker&quot;</code></pre><p>打开与 VM 的 SSH 会话；输入“exit”以结束会话</p><pre><code>docker-machine ssh myvm1</code></pre><p>使工作节点退出 swarm</p><pre><code>docker-machine ssh myvm2 &quot;docker swarm leave&quot;</code></pre><p>使主节点退出，终止 swarm</p><pre><code>docker-machine ssh myvm1 &quot;docker swarm leave -f&quot;</code></pre><p>启动当前未运行的 VM</p><pre><code>docker-machine start myvm1</code></pre><p>停止所有正在运行的 VM</p><pre><code>docker-machine stop $(docker-machine ls -q)   </code></pre><p>删除所有 VM 及其磁盘镜像</p><pre><code>docker-machine rm $(docker-machine ls -q)</code></pre><p>将文件复制到节点的主目录</p><pre><code>docker-machine scp docker-compose.yml myvm1:~</code></pre><p>部署应用</p><pre><code>docker-machine ssh myvm1 &quot;docker stack deploy -c &lt;file&gt; &lt;app&gt;&quot;</code></pre><h2 id="docker-网络配置"><a href="#docker-网络配置" class="headerlink" title="docker 网络配置"></a>docker 网络配置</h2><p>列出所有网络</p><pre><code>docker network ls</code></pre><p>通过网络查找容器ip地址</p><pre><code>docker network inspect bridge</code></pre><p>通过断开容器来从网络中删除容器</p><pre><code>docker network disconnect bridge &lt;dockername&gt;</code></pre><p>创建自定义桥接网络</p><pre><code>docker network create -d bridge my_bridge</code></pre><p>指定容器使用的网络</p><pre><code>docker  run -d --net=my_bridge --name db training/postgres</code></pre><p>查看容器连接位置</p><pre><code>docker inspect --format=&#39;{{json .NetworkSettings.Networks}}&#39;  db</code></pre><p>获取容器ip地址</p><pre><code>docker inspect --format=&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; db</code></pre><p>连接容器网络</p><pre><code>docker network connect my_bridge db</code></pre><h2 id="docker-数据卷"><a href="#docker-数据卷" class="headerlink" title="docker 数据卷"></a>docker 数据卷</h2><p>添加数据卷</p><pre><code>docker run -d -P --name web -v /webapp training/webapp python app.py在容器内创建一个新卷/webapp</code></pre><p>查看数据卷</p><pre><code>docker inspect webSource指定主机上的位置并 Destination指定容器内的卷位置。RW显示卷是否为读/写。</code></pre><p>将主机目录挂在为数据卷</p><pre><code>docer run -d -P --name web -v /src/webapp:/webapp training/webapp python app.py主机目录/src/webapp,容器目录/webapp;container-dir必须始终是绝对路径</code></pre><p>查找空闲卷</p><pre><code>docker volume ls -f dangling=true</code></pre><p>删除卷</p><pre><code>docker volume rm &lt;volume name&gt;</code></pre><p>备份，还原或迁移数据卷</p><pre><code>docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdatadocker run -v /dbdata --name dbstore2 ubuntu /bin/bashdocker run --rm --volumes-from dbstore2 -v $(pwd):/backup ubuntu bash -c &quot;cd /dbdata &amp;&amp; tar xvf /backup/backup.tar --strip 1&quot;</code></pre><p>删除所有未使用的卷</p><pre><code>docker volume prune</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.docker-cn.com" target="_blank" rel="noopener">https://docs.docker-cn.com</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux 容器与虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux  docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 系列01-docker安装</title>
      <link href="/archives/ef57bbb7.html"/>
      <url>/archives/ef57bbb7.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Docker-系列01-docker安装"><a href="#Docker-系列01-docker安装" class="headerlink" title="Docker 系列01-docker安装"></a>Docker 系列01-docker安装</h1><p>Docker 提供了两个版本：社区版 (CE) 和企业版 (EE)。</p><p>Docker 社区版 (CE) 是开发人员和小型团队开始使用 Docker 并尝试使用基于容器的应用的理想之选。Docker CE 有两个更新渠道，即 stable 和 edge：</p><ul><li>Stable 每个季度为您提供可靠更新</li><li>Edge 每个月为您提供新功能</li></ul><h2 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h2><p>Docker CE 和 EE 可用于多种平台、云和内部部署。使用下表选择适用于您的最佳安装路径。</p><h3 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h3><ul><li>Mac</li><li>Windows</li></ul><h3 id="云"><a href="#云" class="headerlink" title="云"></a>云</h3><ul><li>Amazon</li><li>Microsoft</li><li>Digital Ocean</li><li>Packet</li><li>SoftLink</li><li>使用docker云代理创建自己的主机</li></ul><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><ul><li>CentOS</li><li>Debian</li><li>Fedora</li><li>Microsoft Windows</li><li>Oracle Linux</li><li>Red Hat</li><li>SUSE</li></ul><h2 id="centos安装docker-ce"><a href="#centos安装docker-ce" class="headerlink" title="centos安装docker ce"></a>centos安装docker ce</h2><h3 id="操作系统要求"><a href="#操作系统要求" class="headerlink" title="操作系统要求"></a>操作系统要求</h3><p>如需安装 Docker CE，您需要 64 位版本的 CentOS 7。</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>Docker 的早期版本称为 docker 或 docker-engine。如果安装了这些版本，请卸载它们及关联的依赖资源。</p><pre><code>$ sudo yum remove docker \                  docker-common \                  docker-selinux \                  docker-engine</code></pre><p>将保留 /var/lib/docker/ 的内容，包括镜像、容器、存储卷和网络。Docker CE 软件包现在称为 docker-ce。</p><h3 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h3><p>您可以通过不同方式安装 Docker CE，具体取决于您的需求：</p><ul><li><p>Docker 的镜像仓库安装(推荐方法。)</p></li><li><p>RPM 软件包并手动进行安装</p></li></ul><h4 id="使用yum进行安装"><a href="#使用yum进行安装" class="headerlink" title="使用yum进行安装"></a>使用yum进行安装</h4><pre><code> $ sudo yum install -y yum-utils device-mapper-persistent-data lvm2 $ sudo yum-config-manager \     --add-repo \     https://download.docker.com/linux/centos/docker-ce.repo $ sudo yum makecache fast $ sudo yum install docker-ce $ sudo systemctl start docker</code></pre><p>如需要edge版本，使用以下开启</p><pre><code> $ sudo yum-config-manager --enable docker-ce-edge (默认关闭) $ sudo yum-config-manager --enable docker-ce-testing (默认关闭)</code></pre><p>安装特定版本：</p><pre><code> $ yum list docker-ce.x86_64  --showduplicates | sort -r $ sudo yum install docker-ce-&lt;VERSION&gt;启动 Docker。</code></pre><h4 id="rpm方式进行安装"><a href="#rpm方式进行安装" class="headerlink" title="rpm方式进行安装"></a>rpm方式进行安装</h4><pre><code> $ wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-&lt;VERSION&gt;.rpm $ sudo yum install /path/to/package.rpm $ sudo systemctl start docker</code></pre><h4 id="二进制方式安装"><a href="#二进制方式安装" class="headerlink" title="二进制方式安装"></a>二进制方式安装</h4><pre><code> $ wget https://download.docker.com/linux/static/stable/x86_64/docker-18.06.1-ce.tgz $ tar -zxvf docker-18.06.1-ce.tgz $ cp docker/docker /usr/bin/docker $ service docker restart $ service docker status  $ systemctl enable docker $ docker version</code></pre><h3 id="升级-DOCKER-CE"><a href="#升级-DOCKER-CE" class="headerlink" title="升级 DOCKER CE"></a>升级 DOCKER CE</h3><pre><code> $ yum -y upgrade </code></pre><h3 id="卸载-Docker-CE"><a href="#卸载-Docker-CE" class="headerlink" title="卸载 Docker CE"></a>卸载 Docker CE</h3><pre><code> $ sudo yum remove docker-ce $ sudo rm -rf /var/lib/docker</code></pre><h2 id="linux安装后步骤"><a href="#linux安装后步骤" class="headerlink" title="linux安装后步骤"></a>linux安装后步骤</h2><h3 id="以非root用户管理docker"><a href="#以非root用户管理docker" class="headerlink" title="以非root用户管理docker"></a>以非root用户管理docker</h3><pre><code> $ groupadd docker $ usermod -aG dockere $USER</code></pre><h3 id="docker开启自启动"><a href="#docker开启自启动" class="headerlink" title="docker开启自启动"></a>docker开启自启动</h3><pre><code>centos7: $ systemctl enable dockercentos6: $ chkconfig docker on</code></pre><h3 id="开启ip转发"><a href="#开启ip转发" class="headerlink" title="开启ip转发"></a>开启ip转发</h3><pre><code> $ sysctl -w net.ipv4.ip_forward=1 $ vim /etc/sysctl.conf   net.ipv4.ip_forward = 1</code></pre><h3 id="指定dns服务器"><a href="#指定dns服务器" class="headerlink" title="指定dns服务器"></a>指定dns服务器</h3><pre><code> $ vim /etc/docker/daemon.json   {        &quot;dns&quot;:[&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;]   } $ sudo service docker restart</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.docker-cn.com" target="_blank" rel="noopener">https://docs.docker-cn.com</a></li><li><a href="http://www.dockerinfo.net/document" target="_blank" rel="noopener">http://www.dockerinfo.net/document</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux 容器与虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux  docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux shell中&amp;&gt;file,2&gt;&amp;1,1&gt;&amp;2区别</title>
      <link href="/archives/7c357ced.html"/>
      <url>/archives/7c357ced.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="linux-shell中-amp-gt-file-2-gt-amp-1-1-gt-amp-2区别"><a href="#linux-shell中-amp-gt-file-2-gt-amp-1-1-gt-amp-2区别" class="headerlink" title="linux shell中&amp;&gt;file,2&gt;&amp;1,1&gt;&amp;2区别"></a>linux shell中&amp;&gt;file,2&gt;&amp;1,1&gt;&amp;2区别</h1><p>shell中几个定义：</p><ul><li><p>0：表示标准输入</p></li><li><p>1：表示标准输出</p></li><li><p>2：表示标准错误输出</p></li><li><blockquote><p>：默认为标准输出重定向，与1&gt;相同（替换）</p></blockquote></li><li><blockquote><blockquote><p>：表示标准输出重定向（追加）</p></blockquote></blockquote></li><li><p>2&gt;&amp;1：表示把标准错误输出 重定向到标准输出</p></li><li><p>&amp;&gt;file：表示把标准输出和标准错误输出 都重定向到文件file中</p></li></ul><p>举例：</p><p>替换：</p><pre><code>grep &quot;aaa&quot; filename &gt; a.log</code></pre><p>追加：</p><pre><code>grep &quot;bbb&quot; filename &gt;&gt;b.log</code></pre><p>2&gt;&amp;1:</p><pre><code>grep &quot;error&quot; filename &gt;/dev/null 2&gt;&amp;1等价于grep &quot;error&quot; filename &gt;/dev/null 2&gt;/dev/null</code></pre><p>&amp;&gt;file:</p><pre><code>grep &quot;error&quot; filename &gt;/dev/null 等价于grep &quot;error&quot; filename &gt;/dev/null 2&gt;/dev/null</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 系统时区更改</title>
      <link href="/archives/9221d952.html"/>
      <url>/archives/9221d952.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="linux-系统时区更改"><a href="#linux-系统时区更改" class="headerlink" title="linux 系统时区更改"></a>linux 系统时区更改</h1><p>方法一：</p><pre><code>tzselect</code></pre><p>方法二: 仅限于RedHat Linux 和 CentOS系统</p><pre><code>timeconfig</code></pre><p>方法三: 适用于Debian</p><pre><code>dpkg-reconfigure tzdata</code></pre><p>方法四: 复制相应的时区文件，替换CentOS系统时区文件；或者创建链接文件</p><pre><code>cp /usr/share/zoneinfo/EST5EDT /etc/localtime 或者 ln -s /usr/share/zoneinfo/EST5EDT /etc/localtime时间同步 yum instlal ntp -y加入crontab * * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP</code></pre><p>时间服务器地址：<br><a href="https://www.ntppool.org/zone" target="_blank" rel="noopener">https://www.ntppool.org/zone</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 根据进程/端口排错</title>
      <link href="/archives/bea17661.html"/>
      <url>/archives/bea17661.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="linux-根据进程-端口排错"><a href="#linux-根据进程-端口排错" class="headerlink" title="linux 根据进程/端口排错"></a>linux 根据进程/端口排错</h1><h2 id="linux根据进程号PID查找启动程序的全路径"><a href="#linux根据进程号PID查找启动程序的全路径" class="headerlink" title="linux根据进程号PID查找启动程序的全路径"></a>linux根据进程号PID查找启动程序的全路径</h2><p>获取进程号</p><pre><code>ps -ef| grep &#39;pidname&#39;</code></pre><p>根据进程查找路径</p><pre><code>ls -ail /proc/pid/</code></pre><h2 id="根据端口号查找到进程占用"><a href="#根据端口号查找到进程占用" class="headerlink" title="根据端口号查找到进程占用"></a>根据端口号查找到进程占用</h2><p>a.</p><pre><code>lsof -i:port</code></pre><p>b.</p><pre><code>netstat -lntp | grep &#39;port&#39;</code></pre><h2 id="根据服务名查找端口占用"><a href="#根据服务名查找端口占用" class="headerlink" title="根据服务名查找端口占用"></a>根据服务名查找端口占用</h2><pre><code>pgrep -f nginx</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Let&#39;s Encrypt通配符HTTPS证书申请</title>
      <link href="/archives/aebc49f0.html"/>
      <url>/archives/aebc49f0.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Let’s-Encrypt通配符HTTPS证书申请"><a href="#Let’s-Encrypt通配符HTTPS证书申请" class="headerlink" title="Let’s Encrypt通配符HTTPS证书申请"></a>Let’s Encrypt通配符HTTPS证书申请</h1><p>Let’s Encrypt 发布的 ACME v2 现已正式支持通配符证书，下面介绍三种方法申请证书。</p><h2 id="使用acme-sh方式"><a href="#使用acme-sh方式" class="headerlink" title="使用acme.sh方式"></a>使用acme.sh方式</h2><p>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书.</p><p>主要步骤:</p><ul><li>安装 acme.sh</li><li>生成证书</li><li>copy 证书到 nginx/apache 或者其他服务</li><li>更新证书</li><li>更新 acme.sh</li><li>出错怎么办, 如何调试</li></ul><p>下面详细介绍.</p><h3 id="1-安装-acme-sh"><a href="#1-安装-acme-sh" class="headerlink" title="1. 安装 acme.sh"></a>1. 安装 acme.sh</h3><pre><code>curl  https://get.acme.sh | sh</code></pre><ul><li>1）安装目录中: ~/.acme.sh/</li><li>2) 自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</li></ul><h3 id="2-生成证书"><a href="#2-生成证书" class="headerlink" title="2. 生成证书"></a>2. 生成证书</h3><p>acme.sh 实现了 acme 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证.</p><h4 id="1-http-方式"><a href="#1-http-方式" class="headerlink" title="1. http 方式"></a>1. http 方式</h4><p>方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.</p><pre><code>acme.sh  --issue  -d mydomain.com -d www.mydomain.com  --webroot  /home/wwwroot/mydomain.com/</code></pre><h4 id="2-dns-方式"><a href="#2-dns-方式" class="headerlink" title="2. dns 方式"></a>2. dns 方式</h4><p>在域名上添加一条 txt 解析记录, 验证域名所有权.</p><p>这种方式的好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证. 坏处是，如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。</p><p>其他api：<a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</a></p><h5 id="手动添加txt记录"><a href="#手动添加txt记录" class="headerlink" title="手动添加txt记录"></a>手动添加txt记录</h5><p>1.生成txt记录</p><pre><code>acme.sh  --issue  --dns   -d mydomain.com</code></pre><p>2.域名管理面板中添加这条 txt 记录即可.</p><p>3.等待验证解析完成之后, 重新生成证书:</p><pre><code>acme.sh  --renew   -d mydomain.com</code></pre><h5 id="通过api自动添加txt记录"><a href="#通过api自动添加txt记录" class="headerlink" title="通过api自动添加txt记录"></a>通过api自动添加txt记录</h5><p>以 dnspod 为例, 登录到 dnspod 账号, 生成 api id 和 api key, 然后:</p><pre><code>export DP_Id=&quot;1234&quot;export DP_Key=&quot;sADDsdasdgdsf&quot;acme.sh   --issue   --dns dns_dp   -d aa.com  -d www.aa.com</code></pre><h3 id="3-copy-安装-证书"><a href="#3-copy-安装-证书" class="headerlink" title="3. copy/安装 证书"></a>3. copy/安装 证书</h3><p>正确的使用方法是使用 –installcert 命令,并指定目标位置, 然后证书文件会被copy到相应的位置, 例如:</p><pre><code>acme.sh  --installcert  -d  &lt;domain&gt;.com   \        --key-file   /etc/nginx/ssl/&lt;domain&gt;.key \        --fullchain-file /etc/nginx/ssl/fullchain.cer \        --reloadcmd  &quot;service nginx force-reload&quot;</code></pre><p>Nginx 的配置 ssl_certificate 使用 /etc/nginx/ssl/fullchain.cer ，而非 /etc/nginx/ssl/<domain>.cer ，否则 SSL Labs 的测试会报 Chain issues Incomplete 错误。</domain></p><p>nginx 配置</p><pre><code>server {    server_name www.fuckbb.tk;    listen 443 http2 ssl;    root /var/www/html;    ssl on;    ssl_certificate /etc/nginx/ssl/fullchain.cer;    ssl_certificate_key /etc/nginx/ssl/fuckbb.tk.key;    ssl_session_timeout 5m;    ssl_protocols  SSLv2 SSLv3 TLSv1;    ssl_ciphers  HIGH:!aNULL:!MD5;    ssl_prefer_server_ciphers on;  }</code></pre><h3 id="4-更新证书"><a href="#4-更新证书" class="headerlink" title="4. 更新证书"></a>4. 更新证书</h3><p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p><h3 id="5-更新-acme-sh"><a href="#5-更新-acme-sh" class="headerlink" title="5. 更新 acme.sh"></a>5. 更新 acme.sh</h3><p>升级 acme.sh 到最新版 :</p><pre><code>acme.sh --upgrade</code></pre><p>开启自动升级:</p><pre><code>acme.sh  --upgrade  --auto-upgrade</code></pre><p>关闭自动更新:</p><pre><code>acme.sh --upgrade  --auto-upgrade  0</code></pre><h3 id="6-出错怎么办："><a href="#6-出错怎么办：" class="headerlink" title="6. 出错怎么办："></a>6. 出错怎么办：</h3><p>如果出错, 请添加 debug log：</p><pre><code>acme.sh  --issue  .....  --debug 或者：acme.sh  --issue  .....  --debug  2</code></pre><h2 id="采用docker方式"><a href="#采用docker方式" class="headerlink" title="采用docker方式"></a>采用docker方式</h2><pre><code>#revoke a certdocker run --rm  -it  \  -v &quot;$(pwd)/out&quot;:/acme.sh  \  --net=host \  neilpang/acme.sh  --revoke -d example.com#use dns modedocker run --rm  -it  \  -v &quot;$(pwd)/out&quot;:/acme.sh  \  neilpang/acme.sh  --issue --dns -d example.com#use api-dns modedocker run --rm  -it  \  -v &quot;$(pwd)/out&quot;:/acme.sh  \  -e Ali_Key=&quot;xxxxxx&quot; \  -e Ali_Secret=&quot;xxxx&quot; \  neilpang/acme.sh  --issue --dns dns_dp -d domain.cn -d *.domain.cn#run cron jobdocker run --rm  -it  \  -v &quot;$(pwd)/out&quot;:/acme.sh  \  --net=host \  neilpang/acme.sh  --cron#run cronjobdocker run --rm  -itd  \  -v &quot;$(pwd)/out&quot;:/acme.sh  \  --net=host \  --name=acme.sh \  neilpang/acme.sh daemon</code></pre><h2 id="certbot方式获取证书-不推荐"><a href="#certbot方式获取证书-不推荐" class="headerlink" title="certbot方式获取证书[不推荐]"></a>certbot方式获取证书[不推荐]</h2><h3 id="1-获取certbot-auto"><a href="#1-获取certbot-auto" class="headerlink" title="1.获取certbot-auto"></a>1.获取certbot-auto</h3><pre><code>wget https://dl.eff.org/certbot-autochmod a+x certbot-auto</code></pre><h3 id="2-开始申请证书"><a href="#2-开始申请证书" class="headerlink" title="2.开始申请证书"></a>2.开始申请证书</h3><pre><code>./certbot-auto --server https://acme-v02.api.letsencrypt.org/directory -d &quot;*.xxx.com&quot; -d &quot;xxx.com&quot; --manual --preerred-challenges dns-01 certonly</code></pre><p>执行完这一步之后，会下载一些需要的依赖，稍等片刻之后，会提示输入邮箱，随便输入都行【该邮箱用于安全提醒以及续期提醒】,然后提示添加txt记录，带添加完成使用dig验证后回车，生成证书<br>/etc/letsencrypt/live/xxx.com/</p><h3 id="3-续期"><a href="#3-续期" class="headerlink" title="3.续期"></a>3.续期</h3><pre><code>./certbot-auto renew</code></pre><h2 id="nginx证书配置"><a href="#nginx证书配置" class="headerlink" title="nginx证书配置"></a>nginx证书配置</h2><pre><code>server {    server_name xxx.com;    listen 443 http2 ssl;    ssl on;    ssl_certificate /etc/cert/xxx.cn/fullchain.pem;    ssl_certificate_key /etc/cert/xxx.cn/privkey.pem;    ssl_trusted_certificate  /etc/cert/xxx.cn/chain.pem;    location / {      proxy_pass http://127.0.0.1:6666;    }}</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos yum安装mysql5.7</title>
      <link href="/archives/30f05cdb.html"/>
      <url>/archives/30f05cdb.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>#centos yum安装mysql5.7</p><p>在测试开发环境，初始化一个数据库，通常选择yum来安装，本文将常见的mysqlyum源及安装方式梳理</p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>centos6或者centos7</p><h2 id="查看系统是否已经安装mysql"><a href="#查看系统是否已经安装mysql" class="headerlink" title="查看系统是否已经安装mysql"></a>查看系统是否已经安装mysql</h2><pre><code>rpm -qa | grep mysqlyum list installed | grep mysql</code></pre><h2 id="卸载当前数据库"><a href="#卸载当前数据库" class="headerlink" title="卸载当前数据库"></a>卸载当前数据库</h2><p>centos6.x或者centos7.x ：</p><pre><code>yum -y remove mysql*</code></pre><h2 id="mysql数据源下载"><a href="#mysql数据源下载" class="headerlink" title="mysql数据源下载"></a>mysql数据源下载</h2><p>centos6.x</p><pre><code>yum install -y http://repo.mysql.com//mysql57-community-release-el6-8.noarch.rpm</code></pre><p>centos7.x</p><pre><code>yum install -y http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm</code></pre><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><pre><code>yum install -y mysql-community-server</code></pre><h2 id="mysqlroot密码修改"><a href="#mysqlroot密码修改" class="headerlink" title="mysqlroot密码修改"></a>mysqlroot密码修改</h2><pre><code># 启动数据库service mysqld start# 查看密码cat  /var/log/mysqld.log |  grep &quot;password&quot; | grep &quot;generated&quot; # 登陆数据库mysql-uroot -p# 修改密码SET PASSWORD = PASSWORD(&#39;your new password&#39;);ALTER USER &#39;root&#39;@&#39;localhost&#39; PASSWORD EXPIRE NEVER;flush privileges;</code></pre><h2 id="mysql常用操作"><a href="#mysql常用操作" class="headerlink" title="mysql常用操作"></a>mysql常用操作</h2><p>设置字符集：</p><pre><code># 在 [mysqld] 前添加如下代码：[client]default-character-set=utf8# 在 [mysqld] 后添加如下代码：character_set_server=utf8# 重启mysql后再登录，看看字符集，6个utf8就算OKshow variables like &#39;%character%&#39;;</code></pre><p>忘记密码时，重置密码：</p><pre><code>service mysqld stopmysqld_safe --user=root --skip-grant-tables --skip-networking &amp;mysql -u root进入MySQL后use mysql;update user set password=password(&quot;new_password&quot;) where user=&quot;root&quot;; flush privileges;</code></pre><p>数据库授权：</p><pre><code>grant all privileges on *.* to uaername@&quot;%&quot; identified by &quot;new password&quot;;</code></pre><p>数据库设置密码复杂度：</p><ul><li><p>validate_password_dictionary_file: 插件用于验证密码强度的字典文件路径。</p></li><li><p>validate_password_length: 密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</p></li><li><p>validate_password_mixed_case_count: 密码至少要包含的小写字母个数和大写字母个数。</p></li><li><p>validate_password_number_count: 密码至少要包含的数字个数。</p></li><li><p>validate_password_policy: 密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG</p></li></ul><pre><code>修改mysql参数配置mysql&gt; set global validate_password_policy=0;Query OK, 0 rows affected (0.05 sec)mysql&gt; set global validate_password_mixed_case_count=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set global validate_password_number_count=3;Query OK, 0 rows affected (0.00 sec)mysql&gt; set global validate_password_special_char_count=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set global validate_password_length=3;Query OK, 0 rows affected (0.00 sec)mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;+--------------------------------------+-------+| Variable_name                        | Value |+--------------------------------------+-------+| validate_password_dictionary_file    |       || validate_password_length             | 3     || validate_password_mixed_case_count   | 0     || validate_password_number_count       | 3     || validate_password_policy             | LOW   || validate_password_special_char_count | 0     |+--------------------------------------+-------+6 rows in set (0.00 sec)# 修改简单密码：mysql&gt; SET PASSWORD =PASSWORD(&#39;root&#39;);mysql&gt; SET PASSWORD FOR username=PASSWORD(&#39;new password&#39;);</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH 5.15安装文档</title>
      <link href="/archives/ddb5881c.html"/>
      <url>/archives/ddb5881c.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="CDH-5-15安装文档"><a href="#CDH-5-15安装文档" class="headerlink" title="CDH 5.15安装文档"></a>CDH 5.15安装文档</h1><p>在测试开发环境，初始化一个数据库，通常选择yum来安装，本文将常见的mysqlyum源及安装方式梳理</p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>操作系统：centos6.8</p><p>数据库：mysql5.7，编码utf-8</p><p>java：jdk1.8</p><h2 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h2><ul><li><p>cloudera-manager-el6-cm5.15.1_x86_64.tar.gz</p></li><li><p>CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel</p></li><li><p>CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1</p></li><li><p>manifest.json</p></li></ul><pre><code>wget https://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.15.1_x86_64.tar.gzwget https://archive.cloudera.com/cdh5/parcels/5.15.1/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcelwget https://archive.cloudera.com/cdh5/parcels/5.15.1/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1wget https://archive.cloudera.com/cdh5/parcels/5.15.1/manifest.json</code></pre><p>CHD5 相关的 Parcel 包放到主节点的/opt/cloudera/parcel-repo/目录中<br>CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1 重命名为 CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha</p><p>这点必须注意，否则，系统会重新下载 CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel 文件</p><p>本文采用离线安装方式，在线安装方式请参照官方文</p><p>主机名 ip地址 安装服务<br>node1 (Master) 172.22.145.177 jdk、cloudera-manager、MySql</p><p>node2 (Agents) 172.22.145.178 jdk、cloudera-manager</p><p>node3 (Agents) 172.22.145.179 jdk、cloudera-manager</p><h2 id="系统环境搭建"><a href="#系统环境搭建" class="headerlink" title="系统环境搭建"></a>系统环境搭建</h2><h3 id="配置系统环境"><a href="#配置系统环境" class="headerlink" title="配置系统环境"></a>配置系统环境</h3><pre><code>echo 0 &gt; /proc/sys/vm/swappinessecho never &gt; /sys/kernel/mm/transparent_hugepage/defrag echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</code></pre><h3 id="配置hostname"><a href="#配置hostname" class="headerlink" title="配置hostname"></a>配置hostname</h3><pre><code>vim /etc/sysconfig/networkhostname node1</code></pre><h3 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h3><pre><code>vim /etc/hosts172.22.145.177 node1172.22.145.178 node2172.22.145.179 node3</code></pre><h3 id="配置免密码登陆"><a href="#配置免密码登陆" class="headerlink" title="配置免密码登陆"></a>配置免密码登陆</h3><pre><code>vim /etc/ssh/sshd_configRSAAuthentication yes      #开启私钥验证PubkeyAuthentication yes   #开启公钥验证service sshd reload生成公钥，私钥ssh-keygen -t rsa -P &#39;&#39;每个节点的公钥放入认证文件cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys以上步骤每台机器需要配置，配置完成严重免密登陆</code></pre><h3 id="关闭防火墙和selinux"><a href="#关闭防火墙和selinux" class="headerlink" title="关闭防火墙和selinux"></a>关闭防火墙和selinux</h3><pre><code>service iptables stopsetenforce 0vi /etc/selinux/config将 SELINUX=enforcing 改为 SELINUX=disabled</code></pre><h3 id="安装jdk环境"><a href="#安装jdk环境" class="headerlink" title="安装jdk环境"></a>安装jdk环境</h3><pre><code>wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gztar -zxvf jdk-8u181-linux-x64.tar.gz -C /usrvim /etc/profileJAVA_HOME=/usr/jdk1.8.0_51PATH=$JAVA_HOME/bin:$PATHCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport JAVA_HOMEexport PATHexport CLASSPATH</code></pre><h3 id="配置ntp时间同步"><a href="#配置ntp时间同步" class="headerlink" title="配置ntp时间同步"></a>配置ntp时间同步</h3><pre><code>ntpdate -d 182.92.12.11</code></pre><h2 id="mysql安装及配置"><a href="#mysql安装及配置" class="headerlink" title="mysql安装及配置"></a>mysql安装及配置</h2><pre><code># yum安装mysql5.7yum install -y http://repo.mysql.com//mysql57-community-release-el6-8.noarch.rpmyum install -y mysql-community-servergroupadd mysqluseradd mysql -g mysql# 启动数据库service mysqld start# 查看密码cat  /var/log/mysqld.log |  grep &quot;password&quot; | grep &quot;generated&quot; # 登陆数据库mysql-uroot -p# 修改密码SET PASSWORD = PASSWORD(&#39;your new password&#39;);grant all privileges on *.*  to  &#39;root&#39;@&#39;%&#39;  identified by &#39;your new password&#39;  with grant option;flush privileges;exit;</code></pre><h3 id="MySQL新建数据库"><a href="#MySQL新建数据库" class="headerlink" title="MySQL新建数据库"></a>MySQL新建数据库</h3><pre><code># amoncreate database amon DEFAULT CHARACTER SET utf8; grant all on amon.* TO &#39;amon&#39;@&#39;%&#39; IDENTIFIED BY &#39;amon&#39;;#hivecreate database hive DEFAULT CHARACTER SET utf8; grant all on hive.* TO &#39;hive&#39;@&#39;%&#39; IDENTIFIED BY &#39;hive&#39;;#ooziecreate database oozie DEFAULT CHARACTER SET utf8; grant all on oozie.* TO &#39;oozie&#39;@&#39;%&#39; IDENTIFIED BY &#39;oozie&#39;;</code></pre><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><pre><code>yum -y install chkconfig bind-utils psmisc libxslt zlib sqlite cyrus-sasl-plain cyrus-sasl-gssapi fuse portmap fuse-libs redhat-lsb</code></pre><h2 id="cloudera-manager-Server-amp-Agent-安装"><a href="#cloudera-manager-Server-amp-Agent-安装" class="headerlink" title="cloudera manager Server &amp; Agent 安装"></a>cloudera manager Server &amp; Agent 安装</h2><h3 id="安装-CM-Server-amp-Agent"><a href="#安装-CM-Server-amp-Agent" class="headerlink" title="安装 CM Server &amp; Agent"></a>安装 CM Server &amp; Agent</h3><p>在所有节点，创建/opt/cloudera-manager</p><pre><code>mkdir /opt/cloudera-managercd /opt/tar -zxvf cloudera-manager-el6-cm5.15.1_x86_64.tar.gz -C /opt/cloudera-manager</code></pre><h3 id="创建用户-所有节点"><a href="#创建用户-所有节点" class="headerlink" title="创建用户(所有节点)"></a>创建用户(所有节点)</h3><pre><code>useradd --system --home=/opt/cloudera-manager/cm-5.15.1/run/cloudera-scm-server/ --no-create-home --shell=/bin/false --comment &quot;Cloudera SCM User&quot; cloudera-scm</code></pre><h3 id="配置CM-Agent"><a href="#配置CM-Agent" class="headerlink" title="配置CM Agent"></a>配置CM Agent</h3><p>修改 node1 节点</p><pre><code>vi /opt/cloudera-manager/cm-5.15.1/etc/cloudera-scm-agent/config.ini将server_host改为为主节点的主机名。在node1 操作将 node1 节点修改后的 (复制到所有节点)</code></pre><h3 id="配置CM-Server的数据库"><a href="#配置CM-Server的数据库" class="headerlink" title="配置CM Server的数据库"></a>配置CM Server的数据库</h3><p>在主节点 node1 初始化CM5的数据库：</p><p>下载 mysql 驱动包</p><p>地址：<a href="https://downloads.mysql.com/archives/c-j/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/c-j/</a></p><pre><code>cd /opt/cloudera-manager/cm-5.15.1/share/cmf/libwget https://cdn.mysql.com/archives/mysql-connector-java-5.1/mysql-connector-java-5.1.46.tar.gztar -zxvf mysql-connector-java-5.1.46.tar.gz &amp;&amp; mv mysql-connector-java-5.1.46/mysql-connector-java-5.1.46.jar . &amp;&amp; rm -rf mysql-connector-java-5.1.46.tar.gz mysql-connector-java-5.1.46</code></pre><p>启动MySQL服务</p><pre><code>service mysql.server startcd /opt/cloudera-manager/cm-5.15.1/share/cmf/schema/./scm_prepare_database.sh mysql cm -h master -uroot -proot --scm-host master scm scm scm  以下信息为正常：[                          main] DbCommandExecutor              INFO  Successfully connected to database.All done, your SCM database is configured correctly!</code></pre><h3 id="创建Parcel目录"><a href="#创建Parcel目录" class="headerlink" title="创建Parcel目录"></a>创建Parcel目录</h3><p>Manager 节点创建目录/opt/cloudera/parcel-repo</p><pre><code>mkdir -p /opt/cloudera/parcel-repochown cloudera-scm:cloudera-scm -R /opt/cloudera/parcel-repocd /opt/cloudera/parcel-repomv CDH-5.15.0-1.cdh5.15.0.p0.21-el6.parcel.sha1  CDH-5.15.0-1.cdh5.15.0.p0.21-el6.parcel.shamv /opt/manifest.json /opt/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel .</code></pre><p>Agent 节点创建目录/opt/cloudera/parcels，执行：</p><pre><code>mkdir -p /opt/cloudera/parcelschown cloudera-scm:cloudera-scm -R /opt/cloudera/parcels</code></pre><h3 id="启动-CM-Manager-amp-Agent-服务"><a href="#启动-CM-Manager-amp-Agent-服务" class="headerlink" title="启动 CM Manager&amp;Agent 服务"></a>启动 CM Manager&amp;Agent 服务</h3><p>在 node1 (master) 执行：<br>Server</p><pre><code>/opt/cloudera-manager/cm-5.15.1/etc/init.d/cloudera-scm-server start</code></pre><p>在 node2-7 (Agents) 执行：<br>Agents</p><pre><code>/opt/cloudera-manager/cm-5.15.1/etc/init.d/cloudera-scm-agent start</code></pre><p>访问 <a href="http://Master:7180" target="_blank" rel="noopener">http://Master:7180</a> 若可以访问（用户名、密码：admin），则安装成功。</p><p>Manager 启动成功需要等待一段时间，过程中会在数据库中创建对应的表需要耗费一些时间。</p><h2 id="CDH5-安装"><a href="#CDH5-安装" class="headerlink" title="CDH5 安装"></a>CDH5 安装</h2><p>CM Manager &amp;&amp; Agent 成功启动后，登录前端页面进行 CDH 安装配置。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://yq.aliyun.com/articles/341408" target="_blank" rel="noopener">https://yq.aliyun.com/articles/341408</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件系统（三）fastdfs和其他文件系统区别 </title>
      <link href="/archives/414cbe1f.html"/>
      <url>/archives/414cbe1f.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="fastdfs和其他文件系统区别"><a href="#fastdfs和其他文件系统区别" class="headerlink" title="fastdfs和其他文件系统区别"></a>fastdfs和其他文件系统区别</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>普通存储方案：Rsync、DAS(IDE/SATA/SAS/SCSI等块)、NAS(NFS、CIFS、SAMBA等文件系统)、SAN(FibreChannel, iSCSI, FoE存储网络块)，Openfiler、FreeNas(ZFS快照复制)由于生产环境中往往由于对存储数据量很大，而SAN存储价格又比较昂贵，因此大多会选择分布式<br>存储来解决一下问题：</p><ul><li>海量数据存储问题</li><li>数据高可用问题(冗余备份)问题</li><li>较高的读写性能和负载均衡问题</li><li>支持多平台多语言问题</li><li>高并发问题</li></ul><p>主要对别指标 csdn这表格太难用了，我还是word整理后搬到这儿来的。</p><p><img src="https://owelinux.github.io/images/2018-09-03-article27-linux-fastdfs-3/fastdfs3.png" alt></p><h2 id="二、常用的分布式文件系统"><a href="#二、常用的分布式文件系统" class="headerlink" title="二、常用的分布式文件系统"></a>二、常用的分布式文件系统</h2><p>常见的分布式文件系统有FastDFS，GFS、HDFS、Ceph 、GridFS 、mogileFS、TFS等。各自适用于不同的领域。它们都不是系统级的分布式文件系统，而是应用级的分布式文件存储服务。</p><h3 id="FastDFS介绍"><a href="#FastDFS介绍" class="headerlink" title="FastDFS介绍"></a>FastDFS介绍</h3><p>请参照FastDFS文件系统(一) fastdfs是什么?</p><h3 id="GFS（Google-File-System）"><a href="#GFS（Google-File-System）" class="headerlink" title="GFS（Google File System）"></a>GFS（Google File System）</h3><p>Google公司为了满足本公司需求而开发的基于Linux的专有分布式文件系统。。尽管Google公布了该系统的一些技术细节，但Google并没有将该系统的软件部分作为开源软件发布。<br>下面分布式文件系统都是类 GFS的产品。</p><h3 id="HDFS（Hadoop-Distributed-File-System）"><a href="#HDFS（Hadoop-Distributed-File-System）" class="headerlink" title="HDFS（Hadoop Distributed File System）"></a>HDFS（Hadoop Distributed File System）</h3><p>Hadoop 实现了一个分布式文件系统，主要用于大数据计算存储，简称HDFS。 Hadoop是Apache Lucene创始人Doug Cutting开发的使用广泛的文本搜索库。它起源于Apache Nutch，后者是一个开源的网络搜索引擎，本身也是Luene项目的一部分。Aapche Hadoop架构是MapReduce算法的一种开源应用，是Google开创其帝国的重要基石。</p><h3 id="Ceph"><a href="#Ceph" class="headerlink" title="Ceph"></a>Ceph</h3><p>github：<a href="https://github.com/ceph/ceph" target="_blank" rel="noopener">https://github.com/ceph/ceph</a></p><p>是加州大学圣克鲁兹分校的Sage weil攻读博士时开发的分布式文件系统。Ceph能够在维护 POSIX 兼容性的同时加入了复制和容错功能。Sage weil并使用Ceph完成了他的论文。说 ceph 性能最高，C++编写的代码，支持Fuse，并且没有单点故障依赖， 于是下载安装， 由于 ceph 使用 btrfs 文件系统， 而btrfs 文件系统需要 Linux 2.6.34 以上的内核才支持。</p><h3 id="GridFS文件系统"><a href="#GridFS文件系统" class="headerlink" title="GridFS文件系统"></a>GridFS文件系统</h3><p>MongoDB是一种知名的NoSql数据库，GridFS是MongoDB的一个内置功能，它提供一组文件操作的API以利用MongoDB存储文件，GridFS的基本原理是将文件保存在两个Collection中，一个保存文件索引，一个保存文件内容，文件内容按一定大小分成若干块，每一块存在一个Document中，这种方法不仅提供了文件存储，还提供了对文件相关的一些附加属性（比如MD5值，文件名等等）的存储。文件在GridFS中会按4MB为单位进行分块存储。</p><h3 id="MogileFS"><a href="#MogileFS" class="headerlink" title="MogileFS"></a>MogileFS</h3><p>由memcahed的开发公司danga一款perl开发的产品，目前国内使用mogielFS的有图片托管网站yupoo等。<br>MogileFS是一套高效的文件自动备份组件，由Six Apart开发，广泛应用在包括LiveJournal等web2.0站点上。<br>MogileFS由3个部分组成：</p><ul><li><p>第1个部分是server端，包括mogilefsd和mogstored两个程序。前者即是 mogilefsd的tracker，它将一些全局信息保存在数据库里，例如站点domain,class,host等。后者即是存储节点(store node)，它其实是个HTTP Daemon，默认侦听在7500端口，接受客户端的文件备份请求。在安装完后，要运行mogadm工具将所有的store node注册到mogilefsd的数据库里，mogilefsd会对这些节点进行管理和监控。</p></li><li><p>第2个部分是utils（工具集），主要是MogileFS的一些管理工具，例如mogadm等。 　　</p></li><li><p>第3个部分是客户端API，目前只有Perl API(MogileFS.pm)、PHP，用这个模块可以编写客户端程序，实现文件的备份管理功能。</p></li></ul><h3 id="TFS"><a href="#TFS" class="headerlink" title="TFS"></a>TFS</h3><p>TFS（Taobao !FileSystem）是一个高可扩展、高可用、高性能、面向互联网服务的分布式文件系统，主要针对海量的非结构化数据，它构筑在普通的Linux机器 集群上，可为外部提供高可靠和高并发的存储访问。TFS为淘宝提供海量小文件存储，通常文件大小不超过1M，满足了淘宝对小文件存储的需求，被广泛地应用 在淘宝各项应用中。它采用了HA架构和平滑扩容，保证了整个文件系统的可用性和扩展性。同时扁平化的数据组织结构，可将文件名映射到文件的物理地址，简化 了文件的访问流程，一定程度上为TFS提供了良好的读写性能。</p><p>官网 ： <a href="http://code.taobao.org/p/tfs/wiki/index/" target="_blank" rel="noopener">http://code.taobao.org/p/tfs/wiki/index/</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://blog.csdn.net/wk313753744/article/details/49943835" target="_blank" rel="noopener">https://blog.csdn.net/wk313753744/article/details/49943835</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastdfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件系统（四）fastdfs部署及使用</title>
      <link href="/archives/60a8f1dd.html"/>
      <url>/archives/60a8f1dd.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="fastdfs部署及使用"><a href="#fastdfs部署及使用" class="headerlink" title="fastdfs部署及使用"></a>fastdfs部署及使用</h1><p>在之前文章，我们了解到几个类型的文件系统优缺点，本文将详细介绍fastdfs的部署及测试使用</p><p>FastDFS is an open source high performance distributed file system (DFS). It’s major functions include: file storing, file syncing and file accessing, and design for high capacity and load balance.</p><p>FastDFS是一个开源高性能分布式文件系统（DFS）。它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡的设计。</p><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><pre><code>[root@sz-145-centos177 ~]# cat /etc/redhat-release CentOS release 6.8 (Final)[root@sz-145-centos177 ~]# uname -aLinux sz-145-centos177 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</code></pre><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><pre><code>yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel -y</code></pre><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table><thead><tr><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>所有安装包</td><td>/usr/local/</td></tr><tr><td>tracker跟踪服务器数据</td><td>/fastdfs/tracker</td></tr><tr><td>storage存储服务器数据</td><td>/fastdfs/storage</td></tr></tbody></table><pre><code>mkdir -p /fastdfs/tracker  #创建跟踪服务器数据目录mkdir -p /fastdfs/storage  #创建存储服务器数据目录# 切换到安装目录准备下载安装包cd /usr/local/ </code></pre><h3 id="安装libfatscommon"><a href="#安装libfatscommon" class="headerlink" title="安装libfatscommon"></a>安装libfatscommon</h3><pre><code>git clone https://github.com/happyfish100/libfastcommon.git --depth 1cd libfastcommon/./make.sh &amp;&amp; ./make.sh install</code></pre><h3 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h3><pre><code>git clone https://github.com/happyfish100/fastdfs.git --depth 1cd fastdfs/./make.sh &amp;&amp; ./make.sh install</code></pre><p>#配置文件准备</p><pre><code>cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.confcp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.confcp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf #客户端文件，测试用cp /usr/local/fastdfs/conf/http.conf /etc/fdfs/ #供nginx访问使用cp /usr/local/fastdfs/conf/mime.types /etc/fdfs/ #供nginx访问使用</code></pre><h3 id="安装fastdfs-nginx-module"><a href="#安装fastdfs-nginx-module" class="headerlink" title="安装fastdfs-nginx-module"></a>安装fastdfs-nginx-module</h3><pre><code>git clone https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1cp /usr/local/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs安装nginxwget http://nginx.org/download/nginx-1.12.2.tar.gztar -zxvf nginx-1.12.2.tar.gzcd nginx-1.12.2/# 修改配置文件，解决报错问题sed -i &#39;s#ngx_module_incs=&quot;/usr/local/include&quot;#ngx_module_incs=&quot;/usr/include/fastdfs /usr/local/include/fastcommon/&quot;#&#39;g /usr/local/fastdfs-nginx-module/src/config sed -i &#39;s#CORE_INCS=&quot;$CORE_INCS /usr/local/include&quot;#CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/local/include/fastcommon/&quot;#&#39;g /usr/local/fastdfs-nginx-module/src/config sed -i &#39;s#(pContext-&gt;range_count &gt; 1 &amp;&amp; !g_http_params.support_multi_range))#(pContext-&gt;range_count &gt; 1))#g&#39; /usr/local/fastdfs-nginx-module/src/common.c | grep &#39;(pContext-&gt;range_count &gt; 1))&#39;# 添加fastdfs-nginx-module模块./configure --add-module=/usr/local/fastdfs-nginx-module/src/make &amp;&amp; make install</code></pre><h3 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h3><h4 id="tracker配置"><a href="#tracker配置" class="headerlink" title="tracker配置"></a>tracker配置</h4><pre><code>vim /etc/fdfs/tracker.conf#需要修改的内容如下port=22122  # tracker服务器端口（默认22122,一般不修改）base_path=/fastdfs/tracker  # 存储日志和数据的根目录#保存后启动/etc/init.d/fdfs_trackerd start #启动tracker服务chkconfig fdfs_trackerd on #自启动tracker服务</code></pre><h4 id="storage配置"><a href="#storage配置" class="headerlink" title="storage配置"></a>storage配置</h4><pre><code>vim /etc/fdfs/storage.conf#需要修改的内容如下port=23000  # storage服务端口（默认23000,一般不修改）base_path=/fastdfs/storage  # 数据和日志文件存储根目录store_path0=/fastdfs/storage  # 第一个存储目录tracker_server=192.168.0.xxx:22122  # tracker服务器IP和端口http.server_port=8888  # http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)#保存后启动/etc/init.d/fdfs_storaged start #启动storage服务chkconfig fdfs_storaged on #自启动storage服务</code></pre><h4 id="验证storage是否登记到tracker服务器"><a href="#验证storage是否登记到tracker服务器" class="headerlink" title="验证storage是否登记到tracker服务器"></a>验证storage是否登记到tracker服务器</h4><p>使用fdfs_monitor /etc/fdfs/storage.conf，运行fdfs_monitor查看storage服务器是否已经登记到tracker服务器。</p><p>可以在任一存储节点上使用如下命令查看集群的状态信息</p><pre><code>fdfs_monitor /etc/fdfs/storage.conf</code></pre><p>如果出现ip_addr = Active, 则表明storage服务器已经登记到tracker服务器，如下：</p><pre><code>Storage 1:        id = 192.168.53.90        ip_addr = 192.168.53.90 (localhost)  ACTIVE</code></pre><h4 id="文件上传下载进行测试："><a href="#文件上传下载进行测试：" class="headerlink" title="文件上传下载进行测试："></a>文件上传下载进行测试：</h4><p>文件上传</p><pre><code>/usr/bin/fdfs_test /etc/fdfs/client.conf upload /var/log/yum.log</code></pre><p>文件下载</p><pre><code>/usr/bin/fdfs_test /etc/fdfs/client.conf download group1 M00/00/00/CnBYbVc8AaOAL78UAAADvvLPPRA782_big.log</code></pre><h4 id="client测试"><a href="#client测试" class="headerlink" title="client测试"></a>client测试</h4><pre><code>vim /etc/fdfs/client.conf#需要修改的内容如下base_path=/fastdfs/trackertracker_server=192.168.1.xxx:22122    #tracker IP地址#保存后测试,返回ID表示成功 eg:group1/M00/00/00/wKgAQ1pysxmAaqhAAA76tz-dVgg.tar.gzfdfs_upload_file /etc/fdfs/client.conf /usr/local/src/nginx-1.12.2.tar.gz</code></pre><h4 id="配置nginx访问"><a href="#配置nginx访问" class="headerlink" title="配置nginx访问"></a>配置nginx访问</h4><pre><code>vim /etc/fdfs/mod_fastdfs.conf#需要修改的内容如下base_path=/fastdfs/storage           #保存日志目录tracker_server=192.168.53.85:22122 storage_server_port=23000         #storage服务器的端口号group_name=group1                 #当前服务器的group名url_have_group_name = true        #文件url中是否有group名store_path_count=1                #存储路径个数，需要和store_path个数匹配store_path0=/fastdfs/storage         #存储路径group_count = 1                   #设置组的个数#配置nginx.configvi /usr/local/nginx/conf/nginx.conf#添加如下配置server {    listen       8888;    ## 该端口为storage.conf中的http.server_port相同    server_name  localhost;    location ~/group[0-9]/M00 {        root /fastdfs/storage/data        ngx_fastdfs_module;    }    error_page   500 502 503 504  /50x.html;    location = /50x.html {    }}# 测试下载，用外部浏览器访问刚才已传过的nginx安装包,引用返回的IDhttp://192.168.0.xxx:8888/group1/M00/00/00/wKgAQ1pysxmAaqhAAA76tz-dVgg.tar.gz# 弹出下载单机部署全部跑通，否则首先检查防火墙，再检查其他配置。</code></pre><h4 id="后续扩容"><a href="#后续扩容" class="headerlink" title="后续扩容"></a>后续扩容</h4><p>在tracker上安装nginx，并且配置upstream 负载均衡到group组机器</p><h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><p>报错一：</p><pre><code>make[1]: *** [objs/addon/src/ngx_http_fastdfs_module.o] Error 1make[1]: Leaving directory `/root/nginx-1.12.2&#39;make: *** [build] Error 2</code></pre><p>解决：</p><pre><code>sed -i &#39;s#ngx_module_incs=&quot;/usr/local/include&quot;#ngx_module_incs=&quot;/usr/include/fastdfs /usr/local/include/fastcommon/&quot;#&#39;g /usr/local/fastdfs-nginx-module/src/config sed -i &#39;s#CORE_INCS=&quot;$CORE_INCS /usr/local/include&quot;#CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/local/include/fastcommon/&quot;#&#39;g /usr/local/fastdfs-nginx-module/src/config </code></pre><p>报错二：</p><pre><code>In file included from /usr/local/fastdfs-nginx-module/src/ngx_http_fastdfs_module.c:6:/usr/local/fastdfs-nginx-module/src/common.c: In function ‘fdfs_http_request_handler’:/usr/local/fastdfs-nginx-module/src/common.c:1245: error: ‘FDFSHTTPParams’ has no member named ‘support_multi_range’make[1]: *** [objs/addon/src/ngx_http_fastdfs_module.o] Error 1make[1]: Leaving directory `/usr/local/nginx-1.12.2&#39;make: *** [build] Error 2</code></pre><p>解决：</p><pre><code>sed -i &#39;s#(pContext-&gt;range_count &gt; 1 &amp;&amp; !g_http_params.support_multi_range))#(pContext-&gt;range_count &gt; 1))#g&#39; /usr/local/fastdfs-nginx-module/src/common.c | grep &#39;(pContext-&gt;range_count &gt; 1))&#39;</code></pre><p>报错三：</p><pre><code>[root@sz-145-centos177 data]# curl &#39;http://172.22.145.177:8888/group1/M00/00/00/rBaRsVuM9uCAEKkSAA76tz-dVgg.tar.gz&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=&quot;white&quot;&gt;&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;nginx/1.12.2&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>解决</p><pre><code>vim /etc/fdfs/mod_fastdfs.confurl_have_group_name = false改为true</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://github.com/happyfish100/fastdfs/wiki" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs/wiki</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastdfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件系统（二）fastdfs是什么? </title>
      <link href="/archives/f14b4aeb.html"/>
      <url>/archives/f14b4aeb.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="fastdfs是什么"><a href="#fastdfs是什么" class="headerlink" title="fastdfs是什么?"></a>fastdfs是什么?</h1><h2 id="一、FastDFS概述"><a href="#一、FastDFS概述" class="headerlink" title="一、FastDFS概述"></a>一、FastDFS概述</h2><p>FastDFS是阿里巴巴开源的一套轻量级,天生就是分布式设计的文件系统，FastDFS的源代码由C语言开发，目前可运行在Linux,FreeBSD，Unix等类操作系统上，FastDFS解决了大数据量文件存储和读写分离,备份容错,负载均衡,动态扩容等问题，这也就是原作者所描述的高性能和高扩展性的文件系统。适合存储4KB~500MB之间的小文件，如图片网站、短视频网站、文档、app下载站等。</p><h2 id="二、FastDFS作者简介"><a href="#二、FastDFS作者简介" class="headerlink" title="二、FastDFS作者简介"></a>二、FastDFS作者简介</h2><p>FastDFS的作者是余庆(happyfish100)，github地址<a href="https://github.com/happyfish100" target="_blank" rel="noopener">https://github.com/happyfish100</a></p><h2 id="三、FastDFS主要特性"><a href="#三、FastDFS主要特性" class="headerlink" title="三、FastDFS主要特性"></a>三、FastDFS主要特性</h2><p>1.为互联网量身定制，海量数据文件存储。</p><p>2.高可用(同组备份机制)。</p><p>3.FastDFS不是通用的文件系统，只能通过api来访问，目前提供c,java,php客户端。phtyon由第三方开发者提供。</p><p>4;FastDFS可以看作是基于key/value pair存储系统，也许称为分布式文件存储服务更合适。</p><p>5;支持高并发(这个好像没体现出支持什么高并发,这个是nginx的功劳吧)</p><h2 id="四、主要用户"><a href="#四、主要用户" class="headerlink" title="四、主要用户"></a>四、主要用户</h2><ul><li><p>京东(<a href="http://www.jd.com/),主要商品图片存储,可以看出来这是fastdfs典型路径" target="_blank" rel="noopener">http://www.jd.com/),主要商品图片存储,可以看出来这是fastdfs典型路径</a><br><a href="http://img12.360buyimg.com/n9/g15/M08/0B/19/rBEhWVMdbUMIAAAAAAEo7QHfEvoAAJwzAC7VvkAASkF751.jpg" target="_blank" rel="noopener">http://img12.360buyimg.com/n9/g15/M08/0B/19/rBEhWVMdbUMIAAAAAAEo7QHfEvoAAJwzAC7VvkAASkF751.jpg</a></p></li><li><p>UC(<a href="http://www.uc.cn/),主要提供网盘服务" target="_blank" rel="noopener">http://www.uc.cn/),主要提供网盘服务</a></p></li><li><p>支付宝(<a href="https://www.alipay.com/" target="_blank" rel="noopener">https://www.alipay.com/</a>)</p></li><li><p>Lockbur高清壁纸分享网站(<a href="http://www.lockbur.com/),主要提供小图片存储服务。" target="_blank" rel="noopener">http://www.lockbur.com/),主要提供小图片存储服务。</a></p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://blog.csdn.net/wk313753744/article/details/49943155" target="_blank" rel="noopener">https://blog.csdn.net/wk313753744/article/details/49943155</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastdfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件系统（一）linux文件系统的选择</title>
      <link href="/archives/55209071.html"/>
      <url>/archives/55209071.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="linux文件系统的选择"><a href="#linux文件系统的选择" class="headerlink" title="linux文件系统的选择"></a>linux文件系统的选择</h1><p>通过综合使用多种标准文件系统Benchmarks对Ext3, Ext4, Reiserfs, XFS, JFS, Reiser4的性能测试对比，<br>对不同应用选择合适的文件系统给出以下方案，供大家参考。文件系统性能测试数据见附表。</p><h2 id="1、大量小文件（LOSF-Lost-of-small-files）I-O应用-如小图片"><a href="#1、大量小文件（LOSF-Lost-of-small-files）I-O应用-如小图片" class="headerlink" title="1、大量小文件（LOSF, Lost of small files）I/O应用(如小图片)"></a>1、大量小文件（LOSF, Lost of small files）I/O应用(如小图片)</h2><p>Reiserfs(首选), Ext4文件系统适合这类负载特征，IO调度算法选择deadline，block size = 4096, ext4关闭日志功能。</p><p>reiserfs mount参数：-o defaults, async, noatime, nodiratime, notail, data=writeback</p><p>ext4 mount参数：-o defaults, async, noatime, nodiratime, data=writeback, barrier=0关闭ext4日志：tune2fs -O as_journal /dev/sdXX</p><h2 id="2、大文件I-O应用-如视频下载、流媒体"><a href="#2、大文件I-O应用-如视频下载、流媒体" class="headerlink" title="2、大文件I/O应用(如视频下载、流媒体)"></a>2、大文件I/O应用(如视频下载、流媒体)</h2><p>EXT4文件系统适合此类负载特征，IO调度算法选择anticipatory, block size = 4096, 关闭日志功能，启用extent(default)。</p><p>mount参数：-o defaults, async, noatime, nodiratime, data=writeback, barrier=0</p><p>关闭ext4日志：tune2fs -O as_journal /dev/sdXX</p><h2 id="3、SSD文件系统选择"><a href="#3、SSD文件系统选择" class="headerlink" title="3、SSD文件系统选择"></a>3、SSD文件系统选择</h2><p>EXT4/Reiserfs可以作为SSD文件系统，但未对SSD做优化，不能充分发挥SSD性能，并影响SSD使用时间。</p><p>Btrfs对SSD作了优化，mount通过参数启用。但Btrfs仍处于实验阶段，生产环境谨慎使用。</p><p>JFFS2/Nilfs2/YAFFS是常用的flash file system，在嵌入式环境广泛应用，建议使用。性能目前还未作测试评估。</p><h2 id="简单分析一下选择Reiserfs和ext4文件系统的原因："><a href="#简单分析一下选择Reiserfs和ext4文件系统的原因：" class="headerlink" title="简单分析一下选择Reiserfs和ext4文件系统的原因："></a>简单分析一下选择Reiserfs和ext4文件系统的原因：</h2><h3 id="1、Reiserfs"><a href="#1、Reiserfs" class="headerlink" title="1、Reiserfs　"></a>1、Reiserfs　</h3><p>大量小文件访问，衡量指标是IOPS，文件系统性能瓶颈在于文件元数据操作、目录操作、数据寻址。</p><p>reiserfs对小文件作了优化，并使用B+ tree组织数据，加速了数据寻址，大大降低了<br>open/create/delete/close等系统调用开销。mount时指定noatime, nodiratime, notail，减少不必要的inode<br>操作，notail关闭tail package功能，以空间换取更高性能。因此，对于随机的小I/O读写，reiserfs是很好的选择。</p><h3 id="2、Ext4"><a href="#2、Ext4" class="headerlink" title="2、Ext4　"></a>2、Ext4　</h3><p>大文件顺序访问，衡量指标是IO吞吐量，文件系统性能瓶颈在于数据块布局(layout)、数据寻址。Ext4对<br>ext3主要作了两方面的优化:　</p><ul><li><p>一是inode预分配。这使得inode具有很好的局部性特征，同一目录文件inode尽量放在一起，加速了目录寻<br>址与操作性能。因此在小文件应用方面也具有很好的性能表现。　</p></li><li><p>二是extent/delay/multi的数据块分配策略。这些策略使得大文件的数据块保持连续存储在磁盘上，数据寻<br>址次数大大减少，显著提高I/O吞吐量。<br>因此，对于顺序大I/O读写，EXT4是很好的选择。另外，XFS性能在大文件方面也相当不错。</p></li></ul><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><blockquote><ul><li>老男孩教育第19期课堂讲解</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastdfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适合职场写总结周报</title>
      <link href="/archives/86faad55.html"/>
      <url>/archives/86faad55.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="适合职场写总结周报"><a href="#适合职场写总结周报" class="headerlink" title="适合职场写总结周报"></a>适合职场写总结周报</h1><h2 id="总结两套适合职场新人写总结套路（知乎作者：文明汪）"><a href="#总结两套适合职场新人写总结套路（知乎作者：文明汪）" class="headerlink" title="总结两套适合职场新人写总结套路（知乎作者：文明汪）"></a>总结两套适合职场新人写总结套路（知乎作者：文明汪）</h2><p>学会基本可以应付职场初期的总结报告，当然，也要适合自己的岗位来写</p><h3 id="第一套：刚进入职场的总结写作套路"><a href="#第一套：刚进入职场的总结写作套路" class="headerlink" title="第一套：刚进入职场的总结写作套路"></a>第一套：刚进入职场的总结写作套路</h3><p>由于这时候的自己是刚刚进入职场，对周围环境、人群、工作内容都不太熟悉，而熟悉这些内容尽量在一个月内搞定，这样才会让领导觉得你成熟。不过要记住，掌握这些也不必觉得自己怎么样，适应职场也是一个逐渐学习、涨经验的过程，你刚开始掌握的东西也仅仅是毛罢了。<br>这一个月内的周总结，可以这样写：</p><ul><li>1、自己在公司内学习了什么？</li></ul><p>这就是等于梳理自己的工作内容，因为刚刚进入职场必须对自己的工作内容了解清楚，不然等过些阵子忙起来，不知道自己要干什么，就会产生一种瞎忙，没有方向的迷茫感，所以，将自己的工作梳理清楚十分重要。</p><ul><li>2、自己在哪些方面得到提高？</li></ul><p>刚进入工作岗位，领导肯定是要重点观察你的，尤其是你在前一两个月内有没有进步，但是一般情况下，领导看到的也只是表面，如果自己将自己的进步写出来，那么对领导来说再好不过了。当然，在写自己哪方面提高的时候，也要分条儿来写，不能胡写一通，而要根据真实情况来描述。</p><ul><li>3、自己有哪些不足，将如何提升？</li></ul><p>工作总结也不能光写自己哪方面提高了，还要写出自己在工作中的不足之处，比如沟通、专业知识欠缺、实操经验欠缺等等。说完自己的不足，再写出自己将要从哪方面提升自己，这样也相当于为自己定了一个计划，一举两得。这样，也会让领导觉得你很有上进心。刚进入职场前一个月，写这样的报告，领导还是比较满意的。</p><h3 id="第二套：适应职场后的总结写作套路"><a href="#第二套：适应职场后的总结写作套路" class="headerlink" title="第二套：适应职场后的总结写作套路"></a>第二套：适应职场后的总结写作套路</h3><p>入职一两个月后，自己的总结报告就要上升一个档次了！因为企业雇佣我们是来为企业解决问题的，不是来学习提升能力的，所以这时候自己应该像一个职场人一样，写一份成熟的总结报告。</p><p>这份总结报告应该这样写：</p><ul><li>1、描述自己在工作中遇到的问题。</li></ul><p>一名出色的职工都具有一双善于发现问题的眼睛，而为企业解决问题的前提就是先要发现问题。所以，报告的开头要先描述自己发现的问题，要描述清楚。而清晰呈现的方法也有很多，比如图表，照片等等。</p><ul><li>2、分析问题产生的原因。</li></ul><p>凡事有因有果，出现问题必定有原因，这原因就有的写了。首先学习一下方法，这个方法是鱼刺图分析法。![](<a href="https://pic3.zhimg.com/v2-b9dc48983685a495e9520d43904539f6_b.jpg&quot;" target="_blank" rel="noopener">https://pic3.zhimg.com/v2-b9dc48983685a495e9520d43904539f6_b.jpg&quot;</a> data-caption=”” data-size=”normal” data-rawwidth=”960” data-rawheight=”600” data-default-watermark-src=”<a href="https://pic3.zhimg.com/v2-a228b1abc84d59f42ff7a14f921eb696_b.jpg&quot;" target="_blank" rel="noopener">https://pic3.zhimg.com/v2-a228b1abc84d59f42ff7a14f921eb696_b.jpg&quot;</a> class=”origin_image zh-lightbox-thumb” width=”960” data-original=”<a href="https://pic3.zhimg.com/v2-b9dc48983685a495e9520d43904539f6_r.jpg" target="_blank" rel="noopener">https://pic3.zhimg.com/v2-b9dc48983685a495e9520d43904539f6_r.jpg</a>)</p><p>鱼头：表示工作中遇到的问题</p><p>鱼刺：利用头脑风暴写出导致这个问题出现的所有原因，之后将原因进行整理分类，分别写到对应鱼刺上。</p><p>当然，还有其他分析方法，比如数据对比、数学模型等等。</p><ul><li>3、制定对应措施。</li></ul><p>针对出现的问题，制定对应的措施，并对每个措施进行效果监测，如果效果不好，则需要不断优化，这也会是你报告中写的一部分。注意：制定完措施，也要对措施进行计划，必要的话要有一个记录表，这根据自己实际工作来安排。</p><ul><li>4、说出效果也就是结果怎样。</li></ul><p>最后就是总结部分，说出通过实施什么措施，解决了什么问题，效果如何。必要的话对结果进行展示或者前后对比。</p><ul><li>5、下周或者下月工作计划</li></ul><p>这部分根据工作来写，有计划总比没有好！哇，这样一份总结报告写出来，我都觉得很不错。</p><h3 id="第三套：符合自己工作实情的总结写作套路"><a href="#第三套：符合自己工作实情的总结写作套路" class="headerlink" title="第三套：符合自己工作实情的总结写作套路"></a>第三套：符合自己工作实情的总结写作套路</h3><p>这就没什么套路了，这个套路就是在工作中自己总结了~逐渐形成自己的总结风格！什么是最好的总结报告，当然有实质内容，能够解决问题的报告最好了。但是由于我们工作的原因，大部分报告都是写写就得了。但是，万一遇到事情了呢？总之，先把方法学会，就什么都不怕了。</p><h2 id="个人总结思路分享"><a href="#个人总结思路分享" class="headerlink" title="个人总结思路分享"></a>个人总结思路分享</h2><p>复盘一般从两个方面进行:一是项目本身,二是你自己。</p><p>从项目本身来说，更多的是工作知识及工作技巧的归纳</p><ul><li>你从这个项目中得出来了哪些经验?</li><li>下一次遇到类似项目时你该怎么做?</li><li>这一次在做这个项目时，中间有哪些问题疏漏，下一次应该如何解决？</li><li>或者这一次有哪些方法用的很是好，下一次可以采纳的？</li><li>从自身来说，就是自己在这次项目中扮演的什么角色，自己哪些做法很好，哪些做法很不成熟？</li><li>为人处世方面的也算上。一块合作的队友他们做的怎么样？如果你们进行角色互换或者下一次整个项目都交给你你会怎么做？</li></ul><p>总之，就是学习长处，改进不足。</p><p>因为：我们只注重了自己想表达什么？而忽略了读者/用户想看什么？我们忽略了用户真正的需求，用户想要什么？忽略了周报的可用性，是否对用户有意义和价值？忽略了周报的易用性，是否方便用户阅读，是否简单易懂，结构清晰，一目了然？如果作为一个读者/用户，看到的周报内容对自己没有任何意义和价值，且结构复杂，内容繁冗，更没有时间和精力去阅读，更不要谈反馈了。</p><p>所以对于一份好的工作周报需要具备以下几个条件：</p><p>一、搞清真正的用户是谁？哪些是你的汇报对象？</p><p>二、内容需要是用户关注的，且对用户有价值与意义的三、内容简洁清晰，形式可视化具有结构性，提供多种查看方式，降低用户阅读成本</p><h3 id="知乎作者：郑喜月"><a href="#知乎作者：郑喜月" class="headerlink" title="知乎作者：郑喜月"></a>知乎作者：郑喜月</h3><p>1.做周总结的时候先把本周做的事情分好类，每个类别下面分别做了什么事，不要12345这样零散的罗列，因为分类会让Boss觉得你对做的事情比较清晰，在分类的过程中你自己梳理了思路，别人看你的报告也比较清晰。</p><p>2.要把每件事情的完成进度写出来，这样你的领导好知道接下来你还将花多少时间做这件事，好评估你的工作量给你指派任务。</p><p>3.取得的成绩要用数据表达出来，这样看起来比较有说服力，尽量不要用“完成得很好”“已经超额完成”这样虚词。</p><p>4.做的不好的不要直接写作的不好，首先分析客观原因，再分析主观原因，并给出积极解决的态度。</p><p>5.未做完的事情要把你下一步准备怎么做简要写一下，让Boss知道你对这件事情是有想法的，而不是因为不会做才拖延。</p><p>6.做完周总结要把下周计划写上去，这样说明你做事是有规划的。</p><p>7.做周规划的时候记得把预期目标写上去，尤其是你要争取公司资源支持的时候，你要告诉领导你做这件事将会带来哪些好处，他才会放心的把资源交给你。</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><blockquote><ul><li><a href="https://www.zhihu.com/question/28852404/answer/457003101" target="_blank" rel="noopener">https://www.zhihu.com/question/28852404/answer/457003101</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机磁盘扩容(适合所有lvm类型)</title>
      <link href="/archives/61bc90fc.html"/>
      <url>/archives/61bc90fc.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="虚拟机磁盘扩容-适合所有lvm类型"><a href="#虚拟机磁盘扩容-适合所有lvm类型" class="headerlink" title="虚拟机磁盘扩容(适合所有lvm类型)"></a>虚拟机磁盘扩容(适合所有lvm类型)</h1><p>这里以convirt为例！</p><h2 id="1-物理机新建磁盘"><a href="#1-物理机新建磁盘" class="headerlink" title="1.物理机新建磁盘"></a>1.物理机新建磁盘</h2><pre><code>[root@sz-145-centos24 ~]# cd /data/convirt/vm_disks[root@sz-145-centos24 vm_disks]# qemu-img create -f raw sz-145-centos177-2.xm 10G</code></pre><h2 id="2-convirt平台修改虚拟机配置"><a href="#2-convirt平台修改虚拟机配置" class="headerlink" title="2.convirt平台修改虚拟机配置"></a>2.convirt平台修改虚拟机配置</h2><p>关机后修改为如下配置</p><p><img src="https://owelinux.github.io/images/2018-08-31-article23-linux-convirt-create/convirt-lvm.png" alt></p><p>修改完成后重启虚拟机，生效配置。</p><h2 id="3-登陆虚拟机配置lvm"><a href="#3-登陆虚拟机配置lvm" class="headerlink" title="3.登陆虚拟机配置lvm"></a>3.登陆虚拟机配置lvm</h2><h3 id="1、查看是否有新增的磁盘-这里为-dev-sdb"><a href="#1、查看是否有新增的磁盘-这里为-dev-sdb" class="headerlink" title="1、查看是否有新增的磁盘(这里为/dev/sdb)"></a>1、查看是否有新增的磁盘(这里为/dev/sdb)</h3><pre><code>[root@sz-145-centos177 ~]# fdisk  -l | grep DiskDisk /dev/sda: 125.8 GB, 125829120512 bytesDisk identifier: 0x0000ec73Disk /dev/sdb: 10.7 GB, 10737418240 bytesDisk identifier: 0x00000000Disk /dev/mapper/vg_templet-lv_root: 116.9 GB, 116912029696 bytesDisk identifier: 0x00000000Disk /dev/mapper/vg_templet-lv_swap: 8388 MB, 8388608000 bytesDisk identifier: 0x00000000</code></pre><h3 id="2、创建pv"><a href="#2、创建pv" class="headerlink" title="2、创建pv"></a>2、创建pv</h3><pre><code>[root@sz-145-centos177 ~]# pvcreate /dev/sdb  Physical volume &quot;/dev/sdb&quot; successfully created</code></pre><h3 id="3、查看vg-name"><a href="#3、查看vg-name" class="headerlink" title="3、查看vg name"></a>3、查看vg name</h3><pre><code>[root@sz-145-centos177 ~]# vgdisplay   --- Volume group ---  VG Name               vg_templet  System ID               Format                lvm2  Metadata Areas        1  Metadata Sequence No  3  VG Access             read/write  VG Status             resizable  MAX LV                0  Cur LV                2  Open LV               2  Max PV                0  Cur PV                1  Act PV                1  VG Size               116.70 GiB  PE Size               4.00 MiB  Total PE              29874  Alloc PE / Size       29874 / 116.70 GiB  Free  PE / Size       0 / 0     VG UUID               kC3k3E-kTBv-isC7-7c7F-VhJu-YBHH-JinGkb</code></pre><h3 id="4、扩容vg"><a href="#4、扩容vg" class="headerlink" title="4、扩容vg"></a>4、扩容vg</h3><pre><code>[root@sz-145-centos177 ~]# vgextend vg_templet /dev/sdb   Volume group &quot;vg_templet&quot; successfully extended</code></pre><h3 id="5、扩容lv"><a href="#5、扩容lv" class="headerlink" title="5、扩容lv"></a>5、扩容lv</h3><pre><code>[root@sz-145-centos177 ~]# num=`vgdisplay |grep &quot;Free&quot; |awk &#39;{print $5}&#39;`[root@sz-145-centos177 ~]# lvresize -l +$num /dev/vg_templet/lv_root   Size of logical volume vg_templet/lv_root changed from 108.88 GiB (27874 extents) to 118.88 GiB (30433 extents).  Logical volume lv_root successfully resized.</code></pre><h3 id="6、LV分区重设大小"><a href="#6、LV分区重设大小" class="headerlink" title="6、LV分区重设大小"></a>6、LV分区重设大小</h3><pre><code>[root@sz-145-centos177 ~]# resize2fs /dev/mapper/vg_templet-lv_root resize2fs 1.41.12 (17-May-2010)Filesystem at /dev/mapper/vg_templet-lv_root is mounted on /; on-line resizing requiredold desc_blocks = 7, new_desc_blocks = 8Performing an on-line resize of /dev/mapper/vg_templet-lv_root to 31163392 (4k) blocks.The filesystem on /dev/mapper/vg_templet-lv_root is now 31163392 blocks long.</code></pre><h3 id="7-检查扩容后磁盘情况"><a href="#7-检查扩容后磁盘情况" class="headerlink" title="7.检查扩容后磁盘情况"></a>7.检查扩容后磁盘情况</h3><pre><code>[root@sz-145-centos177 ~]# df -hFilesystem            Size  Used Avail Use% Mounted on/dev/mapper/vg_templet-lv_root                      117G  2.9G  109G   3% /tmpfs                 1.9G     0  1.9G   0% /dev/shm/dev/sda1             477M   39M  413M   9% /boot</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>convirt2.5安装及报错解决</title>
      <link href="/archives/1de0ee9f.html"/>
      <url>/archives/1de0ee9f.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="convirt2-5安装及报错解决"><a href="#convirt2-5安装及报错解决" class="headerlink" title="convirt2.5安装及报错解决"></a>convirt2.5安装及报错解决</h1><h2 id="1-配置convirt源"><a href="#1-配置convirt源" class="headerlink" title="1.配置convirt源"></a>1.配置convirt源</h2><pre><code>cd/etc/yum.repos.d;wget   --no-cache http://www.convirture.com/repos/definitions/rhel/6.x/convirt.repo</code></pre><h2 id="2-安装socat"><a href="#2-安装socat" class="headerlink" title="2.安装socat"></a>2.安装socat</h2><pre><code>yum install socat</code></pre><h2 id="3-配置代理服务器，没有的话就跳过这一步"><a href="#3-配置代理服务器，没有的话就跳过这一步" class="headerlink" title="3.配置代理服务器，没有的话就跳过这一步"></a>3.配置代理服务器，没有的话就跳过这一步</h2><pre><code>export http_proxy=&quot;http://company-proxy-server:80&quot;</code></pre><h2 id="4-Convirt网站下载所需要的包"><a href="#4-Convirt网站下载所需要的包" class="headerlink" title="4.Convirt网站下载所需要的包"></a>4.Convirt网站下载所需要的包</h2><pre><code>$ wget --no-cache http://www.convirture.com/downloads/convirt/2.5/convirt-install-2.5.tar.gz;$ wget --no-cache http://www.convirture.com/downloads/convirt/2.5/convirt-2.5.tar.gz;$ wget --no-cache http://www.convirture.com/downloads/convirture-tools/2.5/convirture-tools-2.5.tar.gz$ tar -xzf convirt-install-2.5.tar.gz</code></pre><h2 id="5-下载virtualenv和python"><a href="#5-下载virtualenv和python" class="headerlink" title="5.下载virtualenv和python"></a>5.下载virtualenv和python</h2><pre><code>wget --no-check-certificate https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.11.6.tar.gzwget --no-check-certificate https://www.python.org/ftp/python/2.6.6/Python-2.6.6.tgztar zxvf virtualenv-1.11.6.tar.gz=cd virtualenv-1.11.6python setup.py installcd /roottar zxvf Python-2.6.6.tgzcd Python-2.6.6./configuremake &amp;&amp; make install</code></pre><h2 id="6-安装依赖"><a href="#6-安装依赖" class="headerlink" title="6.安装依赖"></a>6.安装依赖</h2><pre><code>cd  ~/convirt-install/install/cms/scripts/;./install_dependencies</code></pre><h2 id="7-配置数据库"><a href="#7-配置数据库" class="headerlink" title="7.配置数据库"></a>7.配置数据库</h2><p>Centos6下自动安装的是mysql，centos7下自动安装的是mariadb数据库，需要替换掉，看”Centos7下安装mysql”文档<br>执行到后面会启动mysqld服务，需要用户密码，因为预先安装的mysql，没有设置root密码，直接按enter键。设置root密码，重复两次（例密码：root）。</p><p>然后系统询问是否删除匿名用户（Y/N），“Y“！</p><p>不允许root远程连接(Y/N)，”Y”.</p><p>删除预置的test数据库(Y/N),”Y”.</p><p>马上重新载入特权表(Y/N),”Y”.</p><h3 id="设置-innodb-缓存和内存池"><a href="#设置-innodb-缓存和内存池" class="headerlink" title="设置 innodb 缓存和内存池"></a>设置 innodb 缓存和内存池</h3><pre><code>vim /etc/my.cnf[mysqld]下添加下面两行innodb_buffer_pool_size=1Ginnodb_additional_mem_pool_size=20M</code></pre><h3 id="重启mysql服务"><a href="#重启mysql服务" class="headerlink" title="重启mysql服务"></a>重启mysql服务</h3><pre><code>/etc/init.d/mysqld   restart</code></pre><h2 id="8-安装ConVirt"><a href="#8-安装ConVirt" class="headerlink" title="8.安装ConVirt"></a>8.安装ConVirt</h2><pre><code>cd  ~/convirt-install/install/cms/scriptsvim install_config# 将CONVIRT-BASE=~改为CONVIRT-BASE=/usr/localsource  ~/convirt-install/install/cms/scripts/install_configtar  -xzf   convirt-2.5.tar.gz  -C $CONVIRT_BASE</code></pre><h2 id="9-设置-TurboGears-python的轻量级框架"><a href="#9-设置-TurboGears-python的轻量级框架" class="headerlink" title="9.设置 TurboGears (python的轻量级框架)"></a>9.设置 TurboGears (python的轻量级框架)</h2><pre><code>/usr/local/convirt/tg2env/bin/pip install funcsigscd /usr/local/convirt/tg2env/libln -s python2.6/ python2.4cd python2.6/site-packages/ln -s Beaker-1.3-py2.6.egg Beaker-1.3-py2.4.eggln -s Beaker-1.10.0-py2.6.egg Beaker-1.10.0-py2.4.egg~/convirt-install/install/cms/scripts/setup_tg2</code></pre><h2 id="10-设置-ConVirt"><a href="#10-设置-ConVirt" class="headerlink" title="10.设置 ConVirt"></a>10.设置 ConVirt</h2><pre><code>vim /usr/local/convirt/src/convirt/web/convirt/development.ini “/sqlalchemy.url”命令查找其位置#sqlalchemy.url=postgres://username:password@hostname:port/databasename?charset=utf8sqlalchemy.url=mysql://root:root@localhost:3306/convirt?charset=utf8</code></pre><p>注：后台收集的cpu、内存等信息都会保存到数据库中，默认为365天，数据量非常大，造成后期mysql查询很慢，磁盘IO很高，如果机器性能不好，应该修改下面的参数，来减少数据保存的时间：</p><pre><code>purge_hr_data = 60purge_day_data = 30purge_week_data = 30purge_month_data =30purge_raw_data = 30task_results_purge_interval=30TaskPaneLimit=7task_panel_row_limit=200notifications_row_limit=200</code></pre><p>刚才设置的mysql密码为root。</p><p>然后执行$~/convirt-install/install/cms/scripts/setup_convirt</p><p>会要求输入passPhrase。</p><p>Enterpassphrase(empty for no passphrase):记住密语以后会用到（例：testOS）</p><p>Entersame passphrase again: 记住密语以后会用到（例：testOS）</p><p>在cms启动时也会用到，通过密语来连接cms和managed server</p><p>PS：</p><p>如果在这里出现 convirt-ctl setup error 同意思的字样，可能得删除数据库中的convirt数据库，然后重新执行</p><pre><code>~/convirt-install/install/cms/scripts/setup_convirt</code></pre><p>有时候mysql数据库是用root用户启动的，那么cms也必须用root用户启动</p><p>##11.使CMS设置生效</p><h3 id="a-启动cms服务"><a href="#a-启动cms服务" class="headerlink" title="a)启动cms服务"></a>a)启动cms服务</h3><pre><code>/usr/local/convirt/convirt-ctl  start</code></pre><p>服务名称为：paster 代理服务:ssh-agent</p><pre><code>ps  -e | grep paster</code></pre><h3 id="b-如果开启着防火墙，配置访问策略（root权限）"><a href="#b-如果开启着防火墙，配置访问策略（root权限）" class="headerlink" title="b)如果开启着防火墙，配置访问策略（root权限）"></a>b)如果开启着防火墙，配置访问策略（root权限）</h3><pre><code>iptables -I INPUT -p tcp --dport 8081 -j  ACCEPT</code></pre><h3 id="c-验证是否运行成功"><a href="#c-验证是否运行成功" class="headerlink" title="c)验证是否运行成功"></a>c)验证是否运行成功</h3><p>不成功就重启下cms服务和防火墙，返回a).b)</p><p>如果多次启动仍然不成功，切换到root用户再次重试</p><p>在另一台机器上浏览器中输入：<a href="http://192.168.108.83:8081" target="_blank" rel="noopener">http://192.168.108.83:8081</a></p><h3 id="d-错误"><a href="#d-错误" class="headerlink" title="d)错误"></a>d)错误</h3><pre><code>a.No local packages or download links found for funcsigserror: Could not find suitable distribution for Requirement.parse(&#39;funcsigs&#39;)ERROR: installing TG2 (2.0.3).ERROR: Failed creating Turbogears2 environment.解决：/usr/local/convirt/tg2env/bin/pip install funcsigs</code></pre><p>b.</p><pre><code>ls: cannot access /usr/local/convirt/tg2env/lib/python2.4/site-packages/Beaker-*py2.4.egg/beaker/ext/google.py: No such file or directoryTurboGears environmnet setup successfully.解决：cd /usr/local/convirt/tg2env/libln -s python2.6/ python2.4cd python2.6/site-packages/ln -s Beaker-1.3-py2.6.egg Beaker-1.3-py2.4.eggln -s Beaker-1.10.0-py2.6.egg Beaker-1.10.0-py2.4.egg</code></pre><h2 id="部署Managed-Servers"><a href="#部署Managed-Servers" class="headerlink" title="部署Managed Servers"></a>部署Managed Servers</h2><h3 id="Centos中安装KVM。"><a href="#Centos中安装KVM。" class="headerlink" title="Centos中安装KVM。"></a>Centos中安装KVM。</h3><pre><code>yum -y groupinstall &#39;Virtualization&#39; &#39;Virtualization Client&#39; &#39;VirtualizationPlatform&#39; &#39;Virtualization Tools&#39;</code></pre><h3 id="修改网络设置"><a href="#修改网络设置" class="headerlink" title="修改网络设置"></a>修改网络设置</h3><pre><code>[root@centos244 ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0TYPE=EthernetONBOOT=yesBOOTPROTO=noneBRIDGE=br0[root@centos244 ~]# cat /etc/sysconfig/network-scripts/ifcfg-br0 DEVICE=br0ONBOOT=yesTYPE=BridgeBOOTPROTO=noneIPADDR=192.168.1.1PREFIX=24GATEWAY=192.168.1.1</code></pre><p>重启网络</p><pre><code>/etc/init.d/network restart</code></pre><h3 id="检查系统cpu是否支持KVM虚拟化"><a href="#检查系统cpu是否支持KVM虚拟化" class="headerlink" title="检查系统cpu是否支持KVM虚拟化"></a>检查系统cpu是否支持KVM虚拟化</h3><pre><code>egrep -c ‘(vmx|svm)’ /proc/cpuinfo0 表示不支持，1 表示支持。</code></pre><h3 id="加载kvm模块"><a href="#加载kvm模块" class="headerlink" title="加载kvm模块"></a>加载kvm模块</h3><pre><code>modprobe  kvmmodprobe  kvm_amdmodprobe  kvm_intel</code></pre><h2 id="配置convirt-tool"><a href="#配置convirt-tool" class="headerlink" title="配置convirt-tool"></a>配置convirt-tool</h2><pre><code>[root@cms ~]# cd /usr/local/cms[root@cms cms]#wget --no-cache http://www.convirture.com/downloads/convirture-tools/2.0.1/convirture-tools-2.0.1.tar.gz[root@cms cms]# scp convirture-tools-2.0.1.tar.gz root@192.168.5.7:/root/[root@ cms ~]# ssh root@192.168.5.7[root@ kvm-test ~]# tar zxvf convirture-tools-2.0.1.tar.gz[root@ kvm-test ~]# cd convirture-tools/install/managed_server/scripts[root@ kvm-test scripts]# ./convirt-tool –h    查看帮助[root@ kvm-test scripts]# ./convirt-tool --detect_only setup   验证platform（平台）而不做更改[root@kvm-test scripts]# ./convirt-tool install_dependencies 安装所需依赖</code></pre><p>桥接已经配置过，且没有开启iptables，就执行以下命令：</p><pre><code>[root@kvm-test scripts]# ./convirt-tool --skip_bridge --skip_firewall setup</code></pre><p>然后，在CMS主机上启动convirt：</p><p>其中的输出信息中，/root/.ssh/cms_id_rsa这个东西很重要，涉及之后虚拟机的vnc连接问题。</p><p>至此，安装成功！</p><h2 id="添加Managed-Server"><a href="#添加Managed-Server" class="headerlink" title="添加Managed Server"></a>添加Managed Server</h2><p>登录<a href="http://192.168.9.21：:8081，用户名admin，密码admin" target="_blank" rel="noopener">http://192.168.9.21：:8081，用户名admin，密码admin</a></p><h2 id="配置VNC管理"><a href="#配置VNC管理" class="headerlink" title="配置VNC管理"></a>配置VNC管理</h2><p>在CMS主机上配置ssh代理，注意回显是否成功</p><p>一般，convirt_ctl启动的时候，会创建~/.ssh/cms_id_rsa文件</p><p>如果没有，就手动创建：</p><pre><code>[root@cms ~]# ssh-keygen -t rsa -f ~/.ssh/cms_id_rsa[root@cms ~]# chmod 0600 ~/.ssh/cms_id_rsa*[root@cms ~]# eval `ssh-agent -s`Agent pid 16323[root@cms ~]# ssh-add .ssh/cms_id_rsaIdentity added: .ssh/cms_id_rsa (.ssh/cms_id_rsa)[root@cms .ssh]# ssh root@kvm-testLast login: Tue Apr 24 17:20:35 2012 from cms</code></pre><p>再登陆kvm-test主机，就无需输入密码了，如果还需要输入密码，可以执行：</p><pre><code>[root@cms ~]# scp ~/.ssh/cms_id_rsa.pub root@kvm-test:/root/.ssh/vnc_proxy_id_rsa.pub[root@cms ~]# ssh root@kvm-test[root@kvm-test ~]# cat vnc_proxy_id_rsa.pub &gt;&gt; authorized_keys</code></pre><p>启动VCN代理转发：</p><pre><code>[root@cms ~]# socat -d -d -d -d TCP-LISTEN:6900 EXEC:’/usr/bin/ssh root@kvm-test socat - TCP\:127.0.0.1\:5902’ &gt; /tmp/6900_5902_qKhAFc.log 2&gt;&amp;1 &amp;</code></pre><p>使用命令创建convirt虚拟机：</p><pre><code>[root@kvm-test ~]# /usr/libexec/qemu-kvm -hda &quot;/data/kvm/c2_appliance.disk.xm&quot; -net &quot;nic,vlan=0,macaddr=00:16:3e:20:d4:44&quot; -net &quot;user,vlan=0&quot;  -boot &quot;c&quot; -m &quot;512&quot; -vnc &quot;:25&quot; -name &quot;convirt_appliance&quot; -smp &quot;2&quot; -redir tcp:2222::22 -redir tcp:8888::8081 -daemonize</code></pre><h2 id="登录web管理"><a href="#登录web管理" class="headerlink" title="登录web管理"></a>登录web管理</h2><p>管理虚拟机时通过VNC applet来实现，所以必需浏览器中有java的支持：</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://blog.csdn.net/kisssun0608/article/details/44885635" target="_blank" rel="noopener">https://blog.csdn.net/kisssun0608/article/details/44885635</a></li><li><a href="https://support.accelerite.com/hc/en-us/articles/206179510-ConVirt-Enterprise-3-4-5-Setup-for-Fedora-RHEL-CentOS" target="_blank" rel="noopener">https://support.accelerite.com/hc/en-us/articles/206179510-ConVirt-Enterprise-3-4-5-Setup-for-Fedora-RHEL-CentOS</a></li><li><a href="https://blog.csdn.net/kobe283734280/article/details/7827482" target="_blank" rel="noopener">https://blog.csdn.net/kobe283734280/article/details/7827482</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux  convirt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下pip安装的几种方式</title>
      <link href="/archives/de6c7712.html"/>
      <url>/archives/de6c7712.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="linux下pip安装的几种方式"><a href="#linux下pip安装的几种方式" class="headerlink" title="linux下pip安装的几种方式"></a>linux下pip安装的几种方式</h1><h2 id="安装方式1"><a href="#安装方式1" class="headerlink" title="安装方式1"></a>安装方式1</h2><pre><code>wget  http://python-distribute.org/distribute_setup.py  sudo python distribute_setup.py  wget  https://github.com/pypa/pip/raw/master/contrib/get-pip.py  sudo python get-pip.py</code></pre><h2 id="安装方式2"><a href="#安装方式2" class="headerlink" title="安装方式2"></a>安装方式2</h2><pre><code>wget https://pypi.python.org/packages/source/p/pip/pip-1.3.1.tar.gz --no-check-certificate   tar xvf pip-1.3.1.tar.gz  python pip-1.3.1/setup.py install  </code></pre><h2 id="安装方式3"><a href="#安装方式3" class="headerlink" title="安装方式3"></a>安装方式3</h2><pre><code>wget https://bootstrap.pypa.io/get-pip.py  python get-pip.py  </code></pre><h2 id="设置其他源"><a href="#设置其他源" class="headerlink" title="设置其他源"></a>设置其他源</h2><pre><code>vim ~/.pip/pip.conf[global]index-url=http://pypi.hustunique.com/simple其他源：index-url=http://mirrors.tuna.tsinghua.edu.cn/pypi/simple  这个比较快一点</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://pypi.Python.org/pypi/setuptools#unix-wget" target="_blank" rel="noopener">https://pypi.Python.org/pypi/setuptools#unix-wget</a></li><li><a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/installing.html</a></li><li><a href="https://blog.csdn.net/jinruoyanxu/article/details/53947570" target="_blank" rel="noopener">https://blog.csdn.net/jinruoyanxu/article/details/53947570</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git部署及常用配置</title>
      <link href="/archives/2ad8fd2a.html"/>
      <url>/archives/2ad8fd2a.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="git部署及常用配置"><a href="#git部署及常用配置" class="headerlink" title="git部署及常用配置"></a>git部署及常用配置</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="在-Linux-上安装："><a href="#在-Linux-上安装：" class="headerlink" title="在 Linux 上安装："></a>在 Linux 上安装：</h3><pre><code>$ sudo yum install git</code></pre><h3 id="在Mac上安装："><a href="#在Mac上安装：" class="headerlink" title="在Mac上安装："></a>在Mac上安装：</h3><p><a href="http://git-scm.com/download/mac" target="_blank" rel="noopener">官方下载</a></p><h3 id="在-Windows-上安装："><a href="#在-Windows-上安装：" class="headerlink" title="在 Windows 上安装："></a>在 Windows 上安装：</h3><ul><li>a.<a href="http://git-scm.com/download/win" target="_blank" rel="noopener">官方下载</a></li><li>b.<a href="http://windows.github.com" target="_blank" rel="noopener">GitHub for Windows</a></li></ul><h3 id="从源代码安装："><a href="#从源代码安装：" class="headerlink" title="从源代码安装："></a>从源代码安装：</h3><pre><code># 最小化的依赖包来编译和安装 Git 的二进制版：$ sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel# 为了能够添加更多格式的文档（如 doc, html, info），你需要安装以下的依赖包：$ sudo yum install asciidoc xmlto docbook2x# 编译并安装：$ tar -zxf git-2.0.0.tar.gz$ cd git-2.0.0$ make configure$ ./configure --prefix=/usr$ make all doc info$ sudo make install install-doc install-html install-info</code></pre><h2 id="初次运行-Git-前的配置"><a href="#初次运行-Git-前的配置" class="headerlink" title="初次运行 Git 前的配置"></a>初次运行 Git 前的配置</h2><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><ul><li><p>/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的 git config 时，它会从此文件读写配置变量。</p></li><li><p>~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 –global 选项让 Git 读写此文件。</p></li><li><p>当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。</p></li></ul><p>每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。</p><p>在 Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是 C:\Users$USER）的 .gitconfig 文件。 Git 同样也会寻找 /etc/gitconfig 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。</p><p>详细配置请参考：<a href="https://git-scm.com/docs/git-config" target="_blank" rel="noopener">https://git-scm.com/docs/git-config</a></p><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><pre><code>$ git config --global user.name &quot;John Doe&quot;$ git config --global user.email johndoe@example.com</code></pre><h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><pre><code>$ git config --global core.editor emacs/vim/nodepad++</code></pre><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><pre><code>$ git config --global http.proxy socks5://127.0.0.1:1080$ git config --global https.proxy socks5://127.0.0.1:1080$ git config --global http.sslVerify false</code></pre><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><pre><code>$ git clone https://github.com/xxxx/xxxx.gitCloning into &#39;xxxx...fatal: unable to access &#39;https://github.com/xxxx/xxxx.git&#39;: OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443如遇到以上错误，是由于连接不上远程git仓库，配置代理即可解决！</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux  git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telegraf+Infludb+Grafana构建可视化监控系统</title>
      <link href="/archives/1847d09.html"/>
      <url>/archives/1847d09.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Telegraf-Infludb-Grafana构建可视化监控系统"><a href="#Telegraf-Infludb-Grafana构建可视化监控系统" class="headerlink" title="Telegraf+Infludb+Grafana构建可视化监控系统"></a>Telegraf+Infludb+Grafana构建可视化监控系统</h1><h2 id="telegraf介绍"><a href="#telegraf介绍" class="headerlink" title="telegraf介绍"></a>telegraf介绍</h2><p>Telegraf是TICK Stack的一部分，是一个插件驱动的服务器代理，用于收集和报告指标。 Telegraf集成了直接从其运行的容器和系统中提取各种指标，事件和日志，从第三方API提取指标，甚至通过StatsD和Kafka消费者服务监听指标。它还具有输出插件，可将指标发送到各种其他数据存储，服务和消息队列，包括InfluxDB，Graphite，OpenTSDB，Datadog，Librato，Kafka，MQTT，NSQ等等。</p><p><img src="https://2bjee8bvp8y263sjpl3xui1a-wpengine.netdna-ssl.com/wp-content/uploads/Tick-Stack-Telegraf-2.png" alt></p><h3 id="telegraf部署"><a href="#telegraf部署" class="headerlink" title="telegraf部署"></a>telegraf部署</h3><pre><code>$ wget https://dl.influxdata.com/telegraf/releases/telegraf-1.7.3_linux_amd64.tar.gz$ tar xf telegraf-1.7.3_linux_amd64.tar.gz</code></pre><h3 id="telegraf配置及优化"><a href="#telegraf配置及优化" class="headerlink" title="telegraf配置及优化"></a>telegraf配置及优化</h3><pre><code>[global_tags][agent]  interval = &quot;10s&quot;  round_interval = true  metric_batch_size = 1000  metric_buffer_limit = 10000  collection_jitter = &quot;0s&quot;  flush_interval = &quot;10s&quot;  flush_jitter = &quot;0s&quot;  precision = &quot;&quot;  debug = false  quiet = false  logfile = &quot;&quot;  hostname = &quot;192.168.1.1&quot;  omit_hostname = false[[outputs.influxdb]]  urls = [&quot;http://192.168.1.1:8086&quot;]  database = &quot;telegraf&quot;  precision = &quot;s&quot;  timeout = &quot;5s&quot;  username = &quot;monitor&quot;  password = &quot;EMZ1LdVUu0pMXbkaoPzpCO9S1J2bqvPi&quot;[[inputs.cpu]]  percpu = true  totalcpu = true  collect_cpu_time = false  report_active = false[[inputs.disk]]  ignore_fs = [&quot;tmpfs&quot;, &quot;devtmpfs&quot;, &quot;devfs&quot;][[inputs.diskio]][[inputs.kernel]][[inputs.mem]][[inputs.processes]][[inputs.swap]][[inputs.system]][[inputs.netstat]][[inputs.net]]  interfaces = [&quot;eth0&quot;]#[[inputs.zookeeper]]# servers = [&quot;192.168.1.1:2181&quot;]</code></pre><h3 id="telegraf启动"><a href="#telegraf启动" class="headerlink" title="telegraf启动"></a>telegraf启动</h3><pre><code>$ nohup /usr/local/telegraf/usr/bin/telegraf --config /usr/local/telegraf/etc/telegraf/telegraf.conf &amp; </code></pre><h2 id="infludb介绍"><a href="#infludb介绍" class="headerlink" title="infludb介绍"></a>infludb介绍</h2><p>聆听翻译 InfluxDB用作涉及大量带时间戳数据的任何用例的数据存储，包括DevOps监控，日志数据，应用程序指标，物联网传感器数据和实时分析。通过配置InfluxDB来保存机器上的空间，以便将数据保留一段定义的时间，自动使系统中不需要的数据到期和删除。 InfluxDB还提供类似SQL的查询语言，用于与数据交互。</p><h3 id="infludb部署"><a href="#infludb部署" class="headerlink" title="infludb部署"></a>infludb部署</h3><pre><code>$ wget https://dl.influxdata.com/influxdb/releases/influxdb-1.6.1_linux_amd64.tar.gz$ tar xvfz influxdb-1.6.1_linux_amd64.tar.gz</code></pre><h3 id="influbd启动"><a href="#influbd启动" class="headerlink" title="influbd启动"></a>influbd启动</h3><pre><code>$ nohup /usr/local/influxdb/usr/bin/influxd &amp;</code></pre><h3 id="创建数据库及配置权限"><a href="#创建数据库及配置权限" class="headerlink" title="创建数据库及配置权限"></a>创建数据库及配置权限</h3><pre><code>$ influx$ create database telegraf# 显示用户$ SHOW USERS# 创建用户$ CREATE USER &quot;username&quot; WITH PASSWORD &#39;password&#39;# 创建管理员权限的用户$ CREATE USER &quot;username&quot; WITH PASSWORD &#39;password&#39; WITH ALL PRIVILEGES# 删除用户$ DROP USER &quot;username&quot;</code></pre><h3 id="数据保存策略"><a href="#数据保存策略" class="headerlink" title="数据保存策略"></a>数据保存策略</h3><p>查看当前数据库的Retention Policies</p><pre><code>$ SHOW RETENTION POLICIES ON &quot;testDB&quot;</code></pre><p>创建新的Retention Policies</p><pre><code>$ CREATE RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot; DURATION 30d REPLICATION 1 DEFAULT</code></pre><p>其中：</p><ul><li><ol><li>rp_name：策略名</li></ol></li><li><ol start="2"><li>db_name：具体的数据库名</li></ol></li><li><ol start="3"><li>30d：保存30天，30天之前的数据将被删除,它具有各种时间参数，比如：h（小时），w（星期）</li></ol></li><li><ol start="4"><li>REPLICATION 1：副本个数，这里填1就可以了</li></ol></li><li><ol start="5"><li>DEFAULT 设为默认的策略</li></ol></li></ul><p>修改Retention Policies</p><pre><code>$ ALTER RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot; DURATION 3w DEFAULT</code></pre><p>删除Retention Policies</p><pre><code>$ DROP RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot;</code></pre><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="https://owelinux.github.io/images/2018-08-24-article19-linux-telegraf-infludb/telegraf-Infludb.png" alt></p><p>模板采用：<a href="https://grafana.com/dashboards/914" target="_blank" rel="noopener">https://grafana.com/dashboards/914</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://www.influxdata.com/time-series-platform/telegraf/" target="_blank" rel="noopener">https://www.influxdata.com/time-series-platform/telegraf/</a></li><li><a href="https://docs.influxdata.com/chronograf/v1.6/introduction/getting-started/" target="_blank" rel="noopener">https://docs.influxdata.com/chronograf/v1.6/introduction/getting-started/</a></li><li><a href="https://kiswo.com/article/1020" target="_blank" rel="noopener">https://kiswo.com/article/1020</a></li><li><a href="https://www.linuxdaxue.com/series/influxdb-series/" target="_blank" rel="noopener">https://www.linuxdaxue.com/series/influxdb-series/</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux  telegraf infludb granfan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>携程大佬分享es使用心得</title>
      <link href="/archives/ff9efe93.html"/>
      <url>/archives/ff9efe93.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="携程大佬分享es使用心得"><a href="#携程大佬分享es使用心得" class="headerlink" title="携程大佬分享es使用心得"></a>携程大佬分享es使用心得</h1><p>ElasticSearch目前在互联网公司主要用于两种应用场景，其一是用于构建业务的搜索功能模块且多是垂直领域的搜索，数据量级一般在千万至数十亿 这个级别；其二用于大规模数据的实时OLAP，经典的如ELKStack，数据规模可能达到千亿或更多。 这两种场景的数据索引和应用访问模式上差异较大，在硬件选型和集群优化方面侧重点也会有所不同。一般来说后一种场景属于大数据范畴，数据量级和集群规模更 大，在管理方面也更有挑战。</p><p>应Medcl大大的邀请，为ES中文社区做今年的Advent开篇，分享一下我在管理自家公司用于日志分析的ES集群方面的一点心得，蜻蜓点水，泛泛而谈，希望大方向上能对大家提供一些帮助。</p><p>这里的自家，即是携程旅行网。从2013年开始接触ES，我们团队先后实践过0.9.x -&gt; 5.0.0中间各个版本，从最初只用于运维内部IIS日志的分析，到如今支持IT、呼叫中心、安全、测试、业务研发等多个部门超过200种日志型数据的实 时检索与分析。 一路走来，愉悦了大家，也死磕了自己。</p><p>目前我们最大的日志单集群有120个data node，运行于70台物理服务器上。数据规模如下:<br>单日索引数据条数600亿，新增索引文件25TB (含一个复制片则为50TB)<br>业务高峰期峰值索引速率维持在百万条/秒<br>历史数据保留时长根据业务需求制定，从10天 - 90天不等<br>集群共3441个索引、17000个分片、数据总量约9300亿, 磁盘总消耗1PB<br>Kibana用户600多人, 每日来自Kibana和第三方的API调用共63万次<br>查询响应时间百分位 75%:0.160s 90%:1.640s 95%:6.691s 99%:14.0039s</p><p>运维这样大规模的ES集群，有哪些值得注意的地方？</p><ul><li><p>一. 必不可少的工具<br>工欲善其事必先利其器，从一开始，哪怕就只有几个node，就应该使用分布式配置管理工具来做集群的部署。随着应用的成熟，集群规模的逐步扩大，效率的提 升会凸显。 官方提供了ES Puppet Module和Chef Cookbook，熟悉这两个工具的同学可以直接拿过来用。 我们自己则是采用的Ansible，编写了一套Playbook来达到类似的效果。 用熟这类工具，对于集群的初始部署，配置批量更改，集群版本升级，重启故障结点都会快捷和安全许多。<br>第二个必备利器就是sense插件。通过这个插件直接调用集群的restful API，在做集群和索引的状态查看，索引配置更改的时候非常方便。语法提示和自动补全功能更是实用，减少了翻看文档的频率。在Kibana5里 面，sense已经成为一个内置的控制台，无需额外安装。</p></li><li><p>二. 硬件配置<br>我们采用的是32vcoreCPU + 128GB RAM的服务器，磁盘配置大部分服务器是12块4TB SATA机械磁盘做的Raid0，少部分机器是刚上了不久的6块800GB SSD raid0，主要目的是想做冷热数据分离，后面谈到集群架构的时候，再进一步解释一下如何利用硬件资源。</p></li><li><p>三. 集群的管理<br>首先很有必要对ES的结点做角色划分和隔离。大家知道ES的data node除了放数据以外，也可以兼任master和client的角色，多数同学会将这些角色混入到data node。然而对于一个规模较大，用户较多的集群，master和client在一些极端使用情况下可能会有性能瓶颈甚至内存溢出，从而使得共存的 data node故障。data node的故障恢复涉及到数据的迁移，对集群资源有一定消耗，容易造成数据写入延迟或者查询减慢。如果将master和client独立出来，一旦出现问 题，重启后几乎是瞬间就恢复的，对用户几乎没有任何影响。另外将这些角色独立出来的以后，也将对应的计算资源消耗从data node剥离出来，更容易掌握data node资源消耗与写入量和查询量之间的联系，便于做容量管理和规划。<br>避免过高的并发，包括控 制shard数量和threadpool的数量。在写入量和查询性能能够满足的前提下，为索引分配尽量少的分片。分片过多会带来诸多负面影响，例如：每次 查询后需要汇总排序的数据更多；过多的并发带来的线程切换造成过多的CPU损耗；索引的删除和配置更新更慢Issue#18776; 过多的shard也带来更多小的segment，而过多的小segment会带来非常显著的heap内存消耗，特别是如果查询线程配置得很多的情况下。 配置过大的threadpool更是会产生很多诡异的性能问题Issue#18161里所描述的问题就是我们所经历过的。 默认的Theadpool大小一般来说工作得很不错了。<br>冷 热数据最好做分离。对于日志型应用来说，一般是每天建立一个新索引，当天的热索引在写入的同时也会有较多的查询。如果上面还存有比较长时间之前的冷数据， 那么当用户做大跨度的历史数据查询的时候，过多的磁盘IO和CPU消耗很容易拖慢写入，造成数据的延迟。所以我们用了一部分机器来做冷数据的存储，利用 ES可以给结点配置自定义属性的功能，为冷结点加上”boxtype”:”weak”的标识，每晚通过维护脚本更新冷数据的索引路由设置index.routing.allocation.{require|include|exclude}， 让数据自动向冷结点迁移。 冷数据的特性是不再写入，用户查的频率较低，但量级可能很大。比如我们有个索引每天2TB，并且用户要求保持过去90天数据随时可查。保持这么大量的索引 为open状态，并非只消耗磁盘空间。ES为了快速访问磁盘上的索引文件，需要在内存里驻留一些数据(索引文件的索引)，也就是所谓的segment memory。稍微熟悉ES的同学知道，JVM heap分配不能超过32GB，对于我们128GB RAM, 48TB磁盘空间的机器而言，如果只跑一个ES实例，只能利用到32GB不到的heap，当heap快用饱和的时候，磁盘上保存的索引文件还不到 10TB，这样显然是不经济的。 因此我们决定在冷结点上跑3个ES实例，每个分配31GB heap空间，从而可以在一台物理服务器上存储30多TB的索引数据并保持open状态，供用户随时搜索。 实际使用下来，由于冷数据搜索频率不高，也没有写入，即时只剩余35GB内存给os做文件系统缓存，查询性能还是可以满足需求的。<br>不同 数据量级的shard最好隔离到不同组别的结点。 大家知道ES会自己平衡shard在集群的分布，这个自动平衡的逻辑主要考量三个因素。其一同一索引下的shard尽量分散到不同的结点;其二每个结点上 的shard数量尽量接近;其三结点的磁盘有足够的剩余空间。这个策略只能保证shard数量分布均匀，而并不能保证数据大小分布均匀。 实际应用中，我们有200多种索引，数据量级差别很大，大的一天几个TB，小的一个月才几个GB，并且每种类型的数据保留时长又千差万别。抛出的问题，就 是如何能比较平衡并充分的利用所有节点的资源。 针对这个问题，我们还是通过对结点添加属性标签来做分组，结合index routing控制的方式来做一些精细化的控制。尽量让不同量级的数据使用不同组别的结点，使得每个组内结点上的数据量比较容易自动平衡。<br>定 期做索引的force merge，并且最好是每个shard merge成一个segment。前面提到过，heap消耗与segment数量也有关系，force merge可以显著降低这种消耗。 如果merge成一个segment还有一个好处，就是对于terms aggregation，搜索时无需构造Global Ordinals，可以提升聚合速度。</p></li><li><p>四. 版本选择<br>我们在2.4版本上稳定跑了很长时间，比较保守的同学可以上2.4，激进有精力折腾的可以考虑最新的5.0。 我们集群两周前从v2.4.0升级到了v5.0.0这个版本，除了升级第一周遇到一个不稳定的问题以外，感觉新版本带来的以下特性还是非常值得去升级的:<br>结点启动的Bootstrap过程加入了很多关键系统参数设置的核验，比如Max File Descriptors, Memory Lock, Virtual Memory设置等等，如果设置不正确会拒绝启动并抛出异常。 与其带着错误的系统参数启动，并在日后造成性能问题，不如启动失败告知用户问题，是个很好的设计！<br>索引性能提升。升级后在同样索引速率下，我们看到cpu消耗下降非常明显，除了对索引速率提升有帮助，也会一定程度提升搜索速率。<br>新的数值型数据结构，存储空间更小，Range和地理位置计算更快速<br>Instant Aggregation对于类似now-7d to now这样的范围查询聚合能够做cache了，实际使用下来，效果明显，用户在Kibana上跑个过去一周数据的聚合，头2次刷新慢点，之后有cache了几乎就瞬间刷出！<br>更多的保护措施保证集群的稳定，比如对一次搜索hit的shard数量做了限制，增强了circuit breaker的特性，更好的防护集群资源被坏查询耗尽。</p></li></ul><p>升级第一周，我们的冷数据结点出现间歇性不响应问题，从而刨出3个issue提交给官方:<br>Issue#21595 Issue#21612 Issue#21611<br>第一个问题确认为Bug，将在5.0.2修复，其他两个目前还不清楚根源，看起来也只在我们的应用场景里遇到了。所幸问题都找到了了规避措施，实施这些措施以后，最近一周我们的集群重新回到以前2.4版本时期的稳定状态。</p><ul><li>五. 监控<br>不差钱没空折腾的建议还是买官方的xpack省心，有精力折腾的，利用ES各种丰富的stats api，用自己熟悉的监控工具采集数据，可视化出来就好了。 那么多监控指标，最最关键的还是以下几类:<br>各类Thread pool的使用情况，active/queue/reject可视化出来。 判断集群是否有性能瓶颈了，看看业务高峰期各类queue是不是很高，reject是不是经常发生，基本可以做到心里有数。<br>JVM的heap used%以及old GC的频率，如果old GC频率很高，并且多次GC过后heap used%几乎下不来，说明heap压力太大，要考虑扩容了。（也有可能是有问题的查询或者聚合造成的，需要结合用户访问记录来判断)。<br>Segment memory大小和Segment的数量。节点上存放的索引较多的时候，这两个指标就值得关注，要知道segment memory是常驻heap不会被GC回收的，因此当heap压力太大的时候，可以结合这个指标判断是否是因为节点上存放的数据过多，需要扩容。 Segement的数量也是比较关键的，如果小的segment非常多，比如有几千，即使segment memory本身不多，但是在搜索线程很多的情况下，依然会吃掉相当多的heap，原因是lucene为每个segment会在thread local里记录状态信息，这块的heap内存开销和(segment数量* thread数量)相关。<br>很有必要记录用户的访问记录。 我们只开放了http api给用户，前置了一个nginx做http代理，将用户第三方api的访问记录通过access log全部记录下来。通过分析访问记录，可以在集群出现性能问题时，快速找到问题根源，对于问题排查和性能优化都很有帮助。</li></ul><p>最后就是多上手实践，遇到问题多查官方资料，多Google看是否有其他人遇到同类问题，精力充足有编程背景的同学也可以多刨刨源码。</p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>携程xx的分享！！</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux  ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elas2.3.4升级到es5.X</title>
      <link href="/archives/a8bec429.html"/>
      <url>/archives/a8bec429.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Elas2-3-4升级到es5-X"><a href="#Elas2-3-4升级到es5-X" class="headerlink" title="Elas2.3.4升级到es5.X"></a>Elas2.3.4升级到es5.X</h1><h2 id="1、Disable-shard-allocation"><a href="#1、Disable-shard-allocation" class="headerlink" title="1、Disable shard allocation"></a>1、Disable shard allocation</h2><pre><code>curl -XPOST http://127.0.0.1:9200/_flush/syncedcurl -XPUT http://127.0.0.1:9200/_cluster/settings -d&#39;{  &quot;persistent&quot;: {    &quot;cluster.routing.allocation.enable&quot;: &quot;none&quot;  }}&#39;</code></pre><h2 id="2、Perform-a-synced-flush"><a href="#2、Perform-a-synced-flush" class="headerlink" title="2、Perform a synced flush"></a>2、Perform a synced flush</h2><pre><code>curl -XPOST http://127.0.0.1:9200/_flush/synced</code></pre><h2 id="3、Shutdown-and-upgrade-all-nodes"><a href="#3、Shutdown-and-upgrade-all-nodes" class="headerlink" title="3、Shutdown and upgrade all nodes"></a>3、Shutdown and upgrade all nodes</h2><pre><code>curl -XPOST http://127.0.0.1:9200/_cluster/nodes/_local/_shutdown</code></pre><h2 id="4、Upgrade-any-plugins"><a href="#4、Upgrade-any-plugins" class="headerlink" title="4、Upgrade any plugins"></a>4、Upgrade any plugins</h2><h2 id="5、Start-the-cluster"><a href="#5、Start-the-cluster" class="headerlink" title="5、Start the cluster"></a>5、Start the cluster</h2><pre><code>curl -XGET  http://127.0.0.1:9200/_cat/healthcurl -XGET  http://127.0.0.1:9200/_cat/nodes</code></pre><h2 id="6、Wait-for-yellow"><a href="#6、Wait-for-yellow" class="headerlink" title="6、Wait for yellow"></a>6、Wait for yellow</h2><h2 id="7、Reenable-allocation"><a href="#7、Reenable-allocation" class="headerlink" title="7、Reenable allocation"></a>7、Reenable allocation</h2><pre><code>curl -XPUT http://127.0.0.1:9200/_cluster/settings -d&#39;{  &quot;persistent&quot;: {    &quot;cluster.routing.allocation.enable&quot;: &quot;all&quot;  }}&#39;curl -XGET  http://127.0.0.1:9200/_cat/healthcurl -XGET  http://127.0.0.1:9200/_cat/recovery</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/setup-upgrade.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/5.5/setup-upgrade.html</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux  ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK(6.x版本)日志分析平台+Granfan可视化</title>
      <link href="/archives/c7d22367.html"/>
      <url>/archives/c7d22367.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="ELK-6-x版本-日志分析平台-Granfan可视化"><a href="#ELK-6-x版本-日志分析平台-Granfan可视化" class="headerlink" title="ELK(6.x版本)日志分析平台+Granfan可视化"></a>ELK(6.x版本)日志分析平台+Granfan可视化</h1><h2 id="系统环境准备"><a href="#系统环境准备" class="headerlink" title="系统环境准备"></a>系统环境准备</h2><pre><code># 系统版本及内核信息[root@test03 config]# uname  -aLinux test03 3.10.0-862.el7.x86_64 #1 SMP Fri Apr 20 16:44:24 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux# 配置java1.8版本[root@test03 local]# wget jdk-8u171-linux-x64.tar.gz[root@test03 local]# tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local/echo &quot;JAVA_HOME=/usr/local/jdk1.8.0_171 &gt;&gt; /etc/profileecho &quot;CLASSPATH=.:\$JAVA_HOME/lib/tools.jar:\$JAVA_HOME/lib/dt.jar&quot; &gt;&gt; /etc/profile echo &quot;PATH=\$JAVA_HOME/bin:\$PATH&quot; &gt;&gt; /etc/profile source /etc/profile</code></pre><h2 id="采集方案（本教程采用第三种方案）"><a href="#采集方案（本教程采用第三种方案）" class="headerlink" title="采集方案（本教程采用第三种方案）"></a>采集方案（本教程采用第三种方案）</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>log_files -&gt; filebeat –&gt; logstash -&gt; - elasticsearch -&gt; kibana</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>log_files -&gt; filebeat -&gt; logstash –&gt; redis -&gt; - logstash -&gt; - elasticsearch -&gt; kibana</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>log_files -&gt; filebeat -&gt; elasticsearch-&gt; kibana</p><h2 id="配置nginx日志格式log-format"><a href="#配置nginx日志格式log-format" class="headerlink" title="配置nginx日志格式log_format"></a>配置nginx日志格式log_format</h2><pre><code>        log_format  main  &#39;$host $remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                &#39;$status $body_bytes_sent $upstream_response_time &quot;$http_referer&quot; &#39;                &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$uid_got&quot; &quot;$uid_set&quot; &quot;$http_x_tencent_ua&quot; &quot;$upstream_addr&quot; &quot;$upstream_http_x_cached_from&quot; &quot;$upstream_http_cache_control&quot;&#39;;</code></pre><h2 id="配置filebeat（根据官网改造支持nginx日志格式）"><a href="#配置filebeat（根据官网改造支持nginx日志格式）" class="headerlink" title="配置filebeat（根据官网改造支持nginx日志格式）"></a>配置filebeat（根据官网改造支持nginx日志格式）</h2><p>下载软件：</p><pre><code>[root@test03 local]# wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-linux-x86_64.tar.gz[root@test03 local]# tar -zxvf filebeat-6.3.2-linux-x86_64.tar.gz</code></pre><p>配置filebeat：</p><pre><code>[root@WEB3 include]# cat /etc/filebeat/config.yml  | grep -Ev  &#39;#|^$&#39;filebeat.prospectors:- input_type: log  paths:    - /var/log/nginx/*access.log  grok_pattern: &#39;%{USERNAME:domain} %{IPV4:client_ip} (.*) \[%{HTTPDATE:timestamp}\] (.*) %{URIPATH:path}(.*)\&quot; (?:%{INT:response_status}|-) (?:%{INT:response_bytes}|-) (?:%{NUMBER:response_time}|-)&#39;  ignore_older: 1hname: 192.168.1.1output.elasticsearch:  enabled: true  hosts: [&quot;192.168.1.1:9200&quot;]  index: &quot;beijing-web-%{+yyyy.MM.dd}&quot;  template.enabled: false  template.versions.2x.enabled: false  template.versions.6x.enabled: falseoutput.file:  enabled: true  path: /tmp/filebeatpath.config: /etc/filebeatpath.data: /tmp/filebeat/datapath.logs: /var/loglogging.to_files: truelogging.files:  path: /var/log  name: filebeat</code></pre><h2 id="配置logstash"><a href="#配置logstash" class="headerlink" title="配置logstash"></a>配置logstash</h2><p>下载软件：</p><pre><code>[root@test03 local]# wget https://artifacts.elastic.co/downloads/logstash/logstash-6.3.2.tar.gz[root@test03 local]# tar -zxvf logstash-6.3.2.tar.gz</code></pre><p>几种插件的使用：</p><h3 id="1、grok插件"><a href="#1、grok插件" class="headerlink" title="1、grok插件"></a>1、grok插件</h3><p>作用:解析message信息或其他操作</p><ul><li><p>logstash的grok： <a href="https://www.elastic.co/guide/enlogstash/current/plugins-filters-grok.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html</a></p></li><li><p>grok正则测试：<a href="http://grokdebug.herokuapp.com" target="_blank" rel="noopener">http://grokdebug.herokuapp.com</a></p></li></ul><h4 id="nginx日志的正则匹配"><a href="#nginx日志的正则匹配" class="headerlink" title="nginx日志的正则匹配"></a>nginx日志的正则匹配</h4><pre><code>match =&gt; {           &quot;message&quot; =&gt; &quot;(?&lt;domain&gt;%{IP:ip}|(?:%{NOTSPACE:subsite}\.)?(?&lt;site&gt;[-a-zA-Z0-9]+?).com|%{NOTSPACE:unknown}) %{IPORHOST:dayuip} - (?&lt;user&gt;[a-zA-Z\.\@\-\+_%]+) \[%{HTTPDATE:timestamp}\] \&quot;%{WORD:verb} (?&lt;request_path&gt;(?&lt;biz&gt;\/[^/?]*)%{URIPATH:}?)(?:%{URIPARAM:request_param})? HTTP/%{NUMBER:httpversion}\&quot; %{NUMBER:response} (?:%{NUMBER:bytes}|-) (?:%{BASE10NUM:request_duration}|-) (?:\&quot;(?:%{URI:referrer}|-)\&quot;|%{QS:referrer}) %{QS:agent} \&quot;(?:%{IPORHOST:clientip}(?:[^\&quot;]*)|-)\&quot; %{QS:uidgot} %{QS:uidset} \&quot;(?:[^\&quot; ]* )*(?&lt;upstream&gt;[^ \&quot;]*|-)\&quot;&quot;      }</code></pre><h4 id="Java的正则匹配"><a href="#Java的正则匹配" class="headerlink" title="Java的正则匹配"></a>Java的正则匹配</h4><pre><code>match =&gt; {      &quot;message&quot; =&gt; &quot;\[entry\]\[ts\](?&lt;ts&gt;.*)\[/ts\]\[lv\](?&lt;lv&gt;.*)\[/lv\]\[th\](?&lt;th&gt;.*)\[/th\]\[lg\](?&lt;lg&gt;.*)\[/lg\]\[cl\](?&lt;cl&gt;.*)\[/cl\]\[m\](?&lt;m&gt;.*)\[/m\]\[ln\](?&lt;ln&gt;.*)\[/ln\]\[bsid\](?&lt;bsid&gt;.*)\[/bsid\]\[esid\](?&lt;esid&gt;.*)\[/esid\](\[cmid\](?&lt;cmid&gt;.*)\[/cmid\])?\[txt\](?&lt;txt&gt;.*)\[/txt\]\[ex\](?&lt;ex&gt;.*)\[/ex\]\[/entry\]&quot;}</code></pre><h4 id="PHP的正则匹配"><a href="#PHP的正则匹配" class="headerlink" title="PHP的正则匹配"></a>PHP的正则匹配</h4><pre><code>match =&gt; {        &quot;message&quot; =&gt; &quot;\[entry\]\[ts\](?&lt;ts&gt;.*)\[/ts\]\[lv\](?&lt;lv&gt;.*)\[/lv\]\[th\](?&lt;th&gt;.*)\[/th\]\[lg\](?&lt;lg&gt;.*)\[/lg\]\[cl\](?&lt;cl&gt;.*)\[/cl\]\[m\](?&lt;m&gt;.*)\[/m\]\[ln\](?&lt;ln&gt;.*)\[/ln\]\[bsid\](?&lt;bsid&gt;.*)\[/bsid\]\[esid\](?&lt;esid&gt;.*)\[/esid\]\[txt\](?&lt;txt&gt;.*)\[/txt\]\[proj\](?&lt;proj&gt;.*)\[/proj\]\[iid\](?&lt;iid&gt;.*)\[/iid\]\[file\](?&lt;file&gt;.*)\[/file\]\[ex\](?&lt;ex&gt;.*)\[/ex\]\[type\](?&lt;logtype&gt;.*)\[/type\]\[/entry\]&quot;}</code></pre><h3 id="2、date-插件"><a href="#2、date-插件" class="headerlink" title="2、date 插件"></a>2、date 插件</h3><p>作用：将解析到的时间作为展示在kibana的time</p><pre><code>filter {        date {               match =&gt; [ &quot;logdate&quot;, &quot;MMM dd yyyy HH:mm:ss&quot; ]             }      }</code></pre><h3 id="logstash配置优化"><a href="#logstash配置优化" class="headerlink" title="logstash配置优化"></a>logstash配置优化</h3><pre><code>input {    beats {        port =&gt; &quot;5043&quot;    }}filter {    grok {        match =&gt; { &quot;message&quot; =&gt; &quot;^(?&lt;domain&gt;%{IP:ip}|(?:%{NOTSPACE:subsite}\.)?(?&lt;site&gt;[-a-zA-Z0-9]+?).com|%{NOTSPACE:unknown}) %{IPORHOST:dayuip} - (?&lt;user&gt;[a-zA-Z\.\@\-\+_%]+) \[%{HTTPDATE:timestamp}\] \&quot;%{WORD:verb} (?&lt;request_path&gt;(?&lt;biz&gt;\/[^/?]*)%{URIPATH:}?)(?:%{URIPARAM:request_param})? HTTP/%{NUMBER:httpversion}\&quot; %{NUMBER:response} (?:%{NUMBER:bytes}|-) (?:%{BASE10NUM:request_duration}|-) (?:\&quot;(?:%{URI:referrer}|-)\&quot;|%{QS:referrer}) %{QS:agent} \&quot;(?:%{IPORHOST:clientip}(?:[^\&quot;]*)|-)\&quot; %{QS:uidgot} %{QS:uidset} %{QS:tencentua} \&quot;(?:[^\&quot; ]* )*(?&lt;upstream&gt;[^ \&quot;]*|-)\&quot; %{QS:cachedfrom} %{QS:cachectrl}&quot;}    }   date {      # Try to pull the timestamp from the &#39;timestamp&#39; field (parsed above with      # grok). The apache time format looks like: &quot;18/Aug/2011:05:44:34 -0700&quot;      locale =&gt; &quot;en&quot;      timezone =&gt; &quot;Asia/Shanghai&quot;      match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]      add_tag =&gt; [ &quot;tsmatch&quot; ]    }    if [ip] {         mutate { add_field =&gt; { &quot;site&quot; =&gt; &quot;unknown&quot; &quot;subsite&quot; =&gt; &quot;ip&quot; } }        } else if [unknown] {         mutate { add_field =&gt; { &quot;site&quot; =&gt; &quot;unknown&quot; &quot;subsite&quot; =&gt; &quot;unknown&quot; } }        } else if ! [subsite] {         mutate { add_field =&gt; { &quot;subsite&quot; =&gt; &quot;-&quot; } }        }    if ![site] {         mutate { add_field =&gt; { &quot;site&quot; =&gt; &quot;unknown&quot; } }        }    mutate {        convert =&gt; { &quot;bytes&quot; =&gt; &quot;integer&quot; &quot;request_duration&quot; =&gt; &quot;float&quot;}    }    if [request_path] =~ &quot;\/count\/a682ab23d4b4c95f84c744b2826419cd&quot; {        mutate { add_field =&gt; {&quot;clkstrm&quot; =&gt; &quot;1&quot; } }    }    if [clientip] =~ &quot;.&quot; {        geoip {            source =&gt; &quot;clientip&quot;        }    }}output {    elasticsearch {        hosts =&gt; [ &quot;192.168.1.1:9200&quot; ]    }#    http {#        format=&gt;&quot;json&quot;#        http_method=&gt;&quot;post&quot;#        url =&gt; &quot;http://localhost:8989/api/v1/metrics&quot;#    }}</code></pre><h2 id="elasticsearch配置调优"><a href="#elasticsearch配置调优" class="headerlink" title="elasticsearch配置调优"></a>elasticsearch配置调优</h2><p>下载软件：</p><pre><code>[root@test03 local]# wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.tar.gz[root@test03 local]# tar -zxvf elasticsearch-6.3.2.tar.gz</code></pre><p>优化文件描述符：</p><pre><code>ulimit -n 65536cat &gt;&gt;/etc/security/limits.conf&lt;&lt;EOF# allow user &#39;elasticsearch&#39; mlockall* soft nofile 65536* hard nofile 131072* soft nproc 2048* hard nproc 4096EOFsed -i &#39;s#*          soft    nproc     1024#*          soft    nproc     2048#&#39;g /etc/security/limits.d/90-nproc.conf echo &quot;vm.max_map_count=655360&quot; &gt;&gt;/etc/sysctl.confsysctl -p</code></pre><p>创建对应目录：</p><pre><code>useradd -M -s /sbin/nologin elasticsearchmkdir -p /var/log/elasticsearch /mnt/elasticsearch /mnt/backupschown -R elasticsearch. /var/log/elasticsearch /mnt/elasticsearch /mnt/backups /usr/local/elasticsearchvim ./bin/elasticsearchES_JAVA_OPTS=&quot;-Xms8g -Xmx8g&quot; export JAVA_HOME=/usr/java/jdk1.8.0_171vim config/elasticsearch.ymlbootstrap.memory_lock: trueswapoff -a</code></pre><p>es配置文件优化:</p><pre><code>[root@test03 elasticsearch-6.3.2]# cat config/elasticsearch.ymlcluster.name: bill-eyenode.name: node-test1node.master: true node.data: true node.ingest: truepath.logs: /var/log/elasticsearchpath.data: /mnt/elasticsearchpath.repo: /mnt/backupsbootstrap.memory_lock: falsebootstrap.system_call_filter: falsenetwork.host: [_site_, _local_, _ens160_]network.publish_host: [_site_, _local_, _ens160_]transport.tcp.port: 9300http.port: 9200http.enabled: truehttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;discovery.zen.ping_timeout: 60sdiscovery.zen.join_timeout: 30sdiscovery.zen.fd.ping_timeout: 180sdiscovery.zen.fd.ping_retries: 8discovery.zen.fd.ping_interval: 30sdiscovery.zen.ping.unicast.hosts: [&quot;192.168.1.1:9200&quot;]discovery.zen.minimum_master_nodes: 2discovery.zen.commit_timeout: 120sgateway.expected_nodes: 1gateway.recover_after_time: 5mgateway.recover_after_nodes: 2indices.breaker.total.limit: 70%indices.breaker.fielddata.limit: 60%  indices.breaker.request.limit: 60%indices.fielddata.cache.size: 30% indices.queries.cache.size: 10%indices.requests.cache.size: 2%indices.recovery.max_bytes_per_sec: 20mb</code></pre><p>启动es：</p><pre><code>sudo -u elasticsearch ./bin/elasticsearch -d </code></pre><h2 id="配置kibana"><a href="#配置kibana" class="headerlink" title="配置kibana"></a>配置kibana</h2><p>下载软件：</p><pre><code>[root@test03 local]# wget https://artifacts.elastic.co/downloads/kibana/kibana-6.3.2-linux-x86_64.tar.gz[root@test03 local]# tar -zxvf kibana-6.3.2-linux-x86_64.tar.gz</code></pre><p>配置kibana：</p><pre><code>[root@test03 kibana-6.3.2-linux-x86_64]# grep -Ev &#39;^$|#&#39; config/kibana.ymlserver.port: 5601server.host: &quot;192.168.1.1&quot;elasticsearch.url: &quot;http://192.168.1.1:9200&quot;kibana.index: &quot;.kibana&quot;elasticsearch.pingTimeout: 2500elasticsearch.requestTimeout: 60000</code></pre><p>启动kibana：</p><pre><code>nohup ./bin/kibana &amp;</code></pre><h2 id="配置granfan"><a href="#配置granfan" class="headerlink" title="配置granfan"></a>配置granfan</h2><p>下载软件：</p><pre><code>[root@test03 local]# wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.2.2.linux-amd64.tar.gz [root@test03 local]# tar -zxvf grafana-5.2.2.linux-amd64.tar.gz </code></pre><p>启动：</p><pre><code>[root@test03 grafana-5.2.2]# nohup ./bin/grafana-server  &amp; </code></pre><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://owelinux.github.io/images/2018-08-22-article16-linux-elk/kibana-filebeat.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/index.html</a></li><li><a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux  ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curl常用命令</title>
      <link href="/archives/42b193b1.html"/>
      <url>/archives/42b193b1.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="curl常用命令"><a href="#curl常用命令" class="headerlink" title="curl常用命令"></a>curl常用命令</h1><h2 id="curl介绍"><a href="#curl介绍" class="headerlink" title="curl介绍"></a>curl介绍</h2><p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre><code>curl(选项)(参数)</code></pre><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li>-a/–append 上传文件时，附加到目标文件</li><li>-A/–user-agent<string>设置用户代理发送给服务器</string></li><li>-anyauth 可以使用“任何”身份验证方法</li><li>-b/–cookie &lt;name=string/file cookie字符串或文件读取位置</li><li>–basic 使用HTTP基本验证</li><li>-B/–use-ascii 使用ASCII /文本传输</li><li>-c/–cookie-jar<file>操作结束后把cookie写入到这个文件中</file></li><li>-C/–continue-at<offset>断点续转</offset></li><li></li><li><em>-d/–data<data>HTTP POST方式传送数据*</data></em></li><li>–data-ascii<data>以ascii的方式post数据</data></li><li>–data-binary<data>以二进制的方式post数据</data></li><li>–negotiate 使用HTTP身份验证</li><li>–digest 使用数字身份验证</li><li>–disable-eprt 禁止使用EPRT或LPRT</li><li>–disable-epsv 禁止使用EPSV</li><li>-D/–dump-header<file>把header信息写入到该文件中</file></li><li>–egd-file<file>为随机数据(SSL)设置EGD socket路径</file></li><li>–tcp-nodelay 使用TCP_NODELAY选项</li><li>-e/–referer 来源网址</li><li>-E/–cert &lt;cert[:passwd]&gt; 客户端证书文件和密码</li><li>–cert-type<type>证书文件类型</type></li><li>–key<key>私钥文件名</key></li><li>–key-type<type>私钥文件类型</type></li><li>–pass<pass>私钥密码</pass></li><li>–engine<eng>加密引擎使用</eng></li><li>–cacert<file>CA证书</file></li><li>–capath<directory>CA目录</directory></li><li>–ciphers<list>SSL密码</list></li><li>–compressed 要求返回是压缩的形势</li><li>–connect-timeout 设置最大请求时间</li><li>–create-dirs 建立本地目录的目录层次结构</li><li>–crlf 上传是把LF转变成CRLF</li><li>-f/–fail 连接失败时不显示http错误</li><li>–ftp-create-dirs 如果远程目录不存在，创建远程目录</li><li>–ftp-method [multicwd/nocwd/singlecwd] 控制CWD的使用</li><li>–ftp-pasv 使用 PASV/EPSV 代替端口</li><li>–ftp-skip-pasv-ip 使用PASV的时候,忽略该IP地址</li><li>–ftp-ssl 尝试用 SSL/TLS 来进行ftp数据传输</li><li>–ftp-ssl-reqd 要求用 SSL/TLS 来进行ftp数据传输</li><li>-F/–form &lt;name=content&gt; 模拟http表单提交数据</li><li>–form-string 模拟http表单提交数据</li><li>-g/–globoff 禁用网址序列和范围使用{}和[]</li><li></li><li><em>-G/–get 以get的方式来发送数据*</em></li><li></li><li><em>-H/–header<line>自定义头信息传递给服务器*</line></em></li><li>–ignore-content-length 忽略的HTTP头信息的长度</li><li>-i/–include 输出时包括protocol头信息</li><li></li><li><em>-I/–head 只显示请求头信息*</em></li><li>-j/–junk-session-cookies 读取文件进忽略session cookie</li><li>–interface<interface>使用指定网络接口/地址</interface></li><li>–krb4<level>使用指定安全级别的krb4</level></li><li>-k/–insecure 允许不使用证书到SSL站点</li><li>-K/–config 指定的配置文件读取</li><li>-l/–list-only 列出ftp目录下的文件名称</li><li></li><li><em>–limit-rate<rate>设置传输速度*</rate></em></li><li>–local-port<num>强制使用本地端口号</num></li><li></li><li><em>-m/–max-time<seconds>设置最大传输时间*</seconds></em></li><li>–max-redirs<num>设置最大读取的目录数</num></li><li>–max-filesize<bytes>设置最大下载的文件总量</bytes></li><li>-M/–manual 显示全手动</li><li>-n/–netrc 从netrc文件中读取用户名和密码</li><li>–netrc-optional 使用 .netrc 或者 URL来覆盖-n</li><li>–ntlm 使用 HTTP NTLM 身份验证</li><li>-N/–no-buffer 禁用缓冲输出</li><li>-o/–output 把输出写到该文件中</li><li>-O/–remote-name 把输出写到该文件中，保留远程文件的文件名</li><li>-p/–proxytunnel 使用HTTP代理</li><li>–proxy-anyauth 选择任一代理身份验证方法</li><li>–proxy-basic 在代理上使用基本身份验证</li><li>–proxy-digest 在代理上使用数字身份验证</li><li>–proxy-ntlm 在代理上使用ntlm身份验证</li><li>-P/–ftp-port<address>使用端口地址，而不是使用PASV</address></li><li>-q 作为第一个参数，关闭 .curlrc</li><li>-Q/–quote<cmd>文件传输前，发送命令到服务器</cmd></li><li>-r/–range<range>检索来自HTTP/1.1或FTP服务器字节范围</range></li><li>–range-file 读取（SSL）的随机文件</li><li>-R/–remote-time 在本地生成文件时，保留远程文件时间</li><li>–retry<num>传输出现问题时，重试的次数</num></li><li>–retry-delay 传输出现问题时，设置重试间隔时间</li><li>–retry-max-time 传输出现问题时，设置最大重试时间</li><li></li><li><em>-s/–silent 静默模式。不输出任何东西*</em></li><li>-S/–show-error 显示错误</li><li>–socks4 &lt;host[:port]&gt; 用socks4代理给定主机和端口</li><li>–socks5 &lt;host[:port]&gt; 用socks5代理给定主机和端口</li><li>–stderr<file></file></li><li>-t/–telnet-option &lt;OPT=val&gt; Telnet选项设置</li><li>–trace<file>对指定文件进行debug</file></li><li>–trace-ascii<file>Like 跟踪但没有hex输出</file></li><li>–trace-time 跟踪/详细输出时，添加时间戳</li><li>-T/–upload-file<file>上传文件</file></li><li>–url<url>Spet URL to work with</url></li><li>-u/–user &lt;user[:password]&gt; 设置服务器的用户和密码</li><li>-U/–proxy-user &lt;user[:password]&gt; 设置代理用户名和密码</li><li>-w/–write-out [format] 什么输出完成后</li><li></li><li><em>-x/–proxy &lt;host[:port]&gt; 在给定的端口上使用HTTP代理*</em></li><li>-X/–request<command>指定什么命令</li><li>-y/–speed-time 放弃限速所要的时间，默认为30</li><li>-Y/–speed-limit 停止传输速度的限制，速度时间</li></ul><h2 id="常用举例"><a href="#常用举例" class="headerlink" title="常用举例"></a>常用举例</h2><h3 id="GET请求-G-–get-省略"><a href="#GET请求-G-–get-省略" class="headerlink" title="GET请求(-G/–get/省略)"></a>GET请求(-G/–get/省略)</h3><pre><code>curl http://www.xxxx.com/show?userId=111</code></pre><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>以application/x-www-url-encoded 方式发送数据(-d/–data)：</p><pre><code>curl -d &quot;username=sunnyxd&amp;password=12345&quot; URL</code></pre><p>以multipart/form-data 的方式发送数据(上传文件，-F/–form)：</p><pre><code>curl -F filename=@/home/sunnyxd/file.tar.gz -F username=sunnyxd URL</code></pre><h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><p>使用cookie (-b/–cookie)</p><pre><code>curl URL -b &quot;username=sunnyxd;password=12345&quot;</code></pre><p>保存cookie (-c/–cookie-jar)</p><pre><code>curl -d &quot;username=sunnyxd&amp;password=12345&quot; -c ./cookie.txt URL 操作结束后把cookie写入文件cookie.txt</code></pre><h3 id="抓取页面-下载"><a href="#抓取页面-下载" class="headerlink" title="抓取页面(下载)"></a>抓取页面(下载)</h3><p>抓取页面保存到test.html：</p><pre><code>curl -o test.html URL或者curl URL &gt; test.html</code></pre><ul><li>-O 下载特定文件，url需要指定到一个具体的文件</li><li>-C - 断点续传，- 自动推断出正确的续传位置，或者直接指定相应的字节偏移</li><li>-f 显示抓取错误信息</li><li>-x ip:port 使用代理</li><li>-s 不显示进度信息</li><li>-e/–referer 伪造来源地址</li><li>–limit-rate 50k 限制下载速度</li><li>–max-filesize bytes 指定可下载的最大文件大小<br>格式化显示响应信息</li><li>-w 一次完整且成功的操作后输出指定格式的内容到标准输出。</li></ul><h3 id="查看接口响应时间"><a href="#查看接口响应时间" class="headerlink" title="查看接口响应时间"></a>查看接口响应时间</h3><pre><code>curl -o /dev/null -s -w &quot;%{time_connect}:%{time_starttransfer}:%{time_total}\n&quot; URL第一个字段，是从命令启动到链接上用的时间第二个字段，是开始传输数据所用的时间第三个字段，是完成传输所用的时间</code></pre><h3 id="查看页面是否可用"><a href="#查看页面是否可用" class="headerlink" title="查看页面是否可用"></a>查看页面是否可用</h3><pre><code>curl -o /dev/null -s -w %{http_code} URL</code></pre><p>监控接口可用性的一个简单demo：</p><pre><code>#!/bin/bashecho &quot;check result:&quot;cat monitor_url | while read linedostatus_code=`curl -o /dev/null -s -w %{http_code} $line`if [ $status_code -eq 200 ]thenecho ${line}&quot;is ok&quot;elseecho ${line}&quot;is fail&quot;fidonecurl -w详细介绍：http://www.letuknowit.com/post/17.html</code></pre><h3 id="设置浏览器代理-A-–user-agent"><a href="#设置浏览器代理-A-–user-agent" class="headerlink" title="设置浏览器代理 (-A/–user-agent)"></a>设置浏览器代理 (-A/–user-agent)</h3><pre><code>curl URL -A &quot;Mozilla/5.0</code></pre><h3 id="只打印响应头部信息"><a href="#只打印响应头部信息" class="headerlink" title="只打印响应头部信息"></a>只打印响应头部信息</h3><p>通过-I或者–head可以只打印出HTTP头部信息：</p><pre><code>curl -I URL</code></pre><h3 id="用户认证-u-–user"><a href="#用户认证-u-–user" class="headerlink" title="用户认证(-u/–user)"></a>用户认证(-u/–user)</h3><p>用于HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：</p><pre><code>curl -u user:pwd URLcurl -u user URL</code></pre><h3 id="通用头部信息传递-H-–header"><a href="#通用头部信息传递-H-–header" class="headerlink" title="通用头部信息传递(-H/–header)"></a>通用头部信息传递(-H/–header)</h3><pre><code>curl -H &quot;Host:127.0.0.1&quot; -H &quot;accept-language:zh-cn&quot; URL</code></pre><h3 id="自动跳转到新网址"><a href="#自动跳转到新网址" class="headerlink" title="自动跳转到新网址"></a>自动跳转到新网址</h3><p>有的网址是自动跳转的。使用-L参数，curl就会跳转到新的网址。</p><pre><code>curl -L URL</code></pre><h3 id="设置请求超时时间"><a href="#设置请求超时时间" class="headerlink" title="设置请求超时时间"></a>设置请求超时时间</h3><pre><code>curl --connect-timeout seconds URL</code></pre><h3 id="设置最大传输时间-m-–max-time"><a href="#设置最大传输时间-m-–max-time" class="headerlink" title="设置最大传输时间(-m/–max-time)"></a>设置最大传输时间(-m/–max-time)</h3><pre><code>curl -m seconds URL</code></pre><h3 id="指定host请求"><a href="#指定host请求" class="headerlink" title="指定host请求"></a>指定host请求</h3><pre><code>curl -H &quot;Host:URL&quot; http://192.168.1.1</code></pre><h3 id="代理请求"><a href="#代理请求" class="headerlink" title="代理请求"></a>代理请求</h3><pre><code>curl -x 192.168.1.1 URL</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">http://man.linuxde.net/curl</a></li><li><a href="https://segmentfault.com/a/1190000005177475" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005177475</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux适用于ssh协议免密登录</title>
      <link href="/archives/3acc515a.html"/>
      <url>/archives/3acc515a.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Linux适用于ssh协议免密登录"><a href="#Linux适用于ssh协议免密登录" class="headerlink" title="Linux适用于ssh协议免密登录"></a>Linux适用于ssh协议免密登录</h1><p>免密应用场景：自动化运维、定时同步、跳板机等</p><h2 id="ssh密钥方式"><a href="#ssh密钥方式" class="headerlink" title="ssh密钥方式"></a>ssh密钥方式</h2><h3 id="生成和导入key"><a href="#生成和导入key" class="headerlink" title="生成和导入key"></a>生成和导入key</h3><p>A服务器执行：</p><pre><code>$ssh-keygen $ll /root/.ssh/总用量 12-rw-------. 1 root root 1675 8月   8 16:39 id_rsa-rw-r--r--. 1 root root  393 8月   8 16:39 id_rsa.pub-rw-r--r--. 1 root root  184 7月  17 16:06 known_hosts</code></pre><blockquote><ul><li>id_rsa:私钥</li><li>id_rsa.pub：公钥</li></ul></blockquote><h3 id="拷贝密钥并授权："><a href="#拷贝密钥并授权：" class="headerlink" title="拷贝密钥并授权："></a>拷贝密钥并授权：</h3><pre><code>方法一：$cat /root/.ssh/id_rsa.pub | ssh root@远程服务器B &#39;cat - &gt;&gt; ~/.ssh/authorized_keys&#39;方法二：$ssh-copy-id  -i /root/.ssh/id_rsa root@远程服务器B</code></pre><h3 id="ssh-config配置"><a href="#ssh-config配置" class="headerlink" title="ssh_config配置"></a>ssh_config配置</h3><blockquote><ul><li>PubkeyAuthentication yes //将该项改为yes</li><li>UsePAM yes ;如果想禁用密码登录改为：UserPAM no</li></ul></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code>$ssh root@远程服务器B</code></pre><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>注：对于普通用户authorized_keys的权限必须限定为600（go-rwx），否则普通用户无法实现无密钥访问，而ROOT用户按照默认即可实现无密钥访问<br>chmod go-rwx ~/.ssh/authorized_keys</p><p>不能免密登录多半是权限问题：</p><blockquote><ul><li>.ssh的权限700，</li><li>authorized_keys的权限600</li><li>排错日志：/var/log/secure</li></ul></blockquote><h2 id="rsync-scp-ssh-密码登录"><a href="#rsync-scp-ssh-密码登录" class="headerlink" title="rsync/scp+ssh+密码登录"></a>rsync/scp+ssh+密码登录</h2><pre><code>$yum -y install rsync sshpass</code></pre><p>sshpass常用命令选项：</p><blockquote><ul><li>-f 密码文件</li><li>-p 密码</li><li>-e 密码不显示屏幕</li></ul></blockquote><pre><code>ssh：$sshpass -f password_filename ssh remote_user@remote_host &#39;df -h&#39;scp:$scp -r /local/dir --rsh=&quot;sshpass -p &#39;my_pass_here&#39; ssh -l remote_user&quot; remote_host:/remote/dirrsync:$rsync --rsh=&quot;sshpass -p &#39;my_pass_here&#39; ssh -l remote_user&quot; remote_host:/remote/dir /local/diror$sshpass -p remote_password rsync -avz --delete -e ssh remote_user@remote_host:/remote/dir /local/dir</code></pre><p>上面的命令中:</p><blockquote><ul><li>remote_use/remote_password是远程的密码</li><li>-avz是打包传送、显示明细、压缩</li><li>-e ssh是关键，即over ssh</li><li>我们要从远程同步到本地</li><li>/remote/dir是远程服务器路径</li><li>/local/dir是本地服务器路径</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化运维之Ansible使用指南</title>
      <link href="/archives/2626bf33.html"/>
      <url>/archives/2626bf33.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="自动化运维之Ansible使用指南"><a href="#自动化运维之Ansible使用指南" class="headerlink" title="自动化运维之Ansible使用指南"></a>自动化运维之Ansible使用指南</h1><h2 id="运维自动化工具介绍"><a href="#运维自动化工具介绍" class="headerlink" title="运维自动化工具介绍"></a>运维自动化工具介绍</h2><p>在日常服务器维护中，从系统安装到程序部署再到发布应用，在大规模的生产环境中，如果需要手动的每台服务器进行安装配置将会给运维人员带来许多繁琐而又重复的工作。这就促使了在每个运维层次中出现了不同的自动化运维工具。<br>常见的自动化运维工具分类有以下几类：</p><h3 id="系统安装运维工具（OS-Provisioning）："><a href="#系统安装运维工具（OS-Provisioning）：" class="headerlink" title="系统安装运维工具（OS Provisioning）："></a>系统安装运维工具（OS Provisioning）：</h3><p>常见的有：PXE,Cobbler，Red Hat Satelite(redhat)系统专用等</p><h3 id="操作系统的配置运维工具-OS-Config-："><a href="#操作系统的配置运维工具-OS-Config-：" class="headerlink" title="操作系统的配置运维工具(OS Config)："></a>操作系统的配置运维工具(OS Config)：</h3><p>常见的有：cfengine，puppet,saltsack,chef等</p><h3 id="应用程序部署工具-Application-Service-Orchestration"><a href="#应用程序部署工具-Application-Service-Orchestration" class="headerlink" title="应用程序部署工具(Application Service Orchestration):"></a>应用程序部署工具(Application Service Orchestration):</h3><p>常见的有:Func,Fabric,ControITier,Capistrano等</p><h3 id="根据工作模式不同上面的运维工具有分为以下两类："><a href="#根据工作模式不同上面的运维工具有分为以下两类：" class="headerlink" title="根据工作模式不同上面的运维工具有分为以下两类："></a>根据工作模式不同上面的运维工具有分为以下两类：</h3><p>agent：基于ssl协议实现，agent工作在被监控端，例如：puppet<br>agentless: 基于ssh key实现，例如：ansible</p><h2 id="ansible介绍"><a href="#ansible介绍" class="headerlink" title="ansible介绍"></a>ansible介绍</h2><p>ansible是一款轻量级自动化运维工具，由Python语言开发，结合了多种自动化运维工具的特性，实现了批量系统配置、批量程序部署、批量命令执行等功能；ansible是基于模块化实现批量操作的。<br><img src="https://upload-images.jianshu.io/upload_images/1542757-c4b2d6eede79a975.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt></p><h2 id="ansible组成"><a href="#ansible组成" class="headerlink" title="ansible组成"></a>ansible组成</h2><p>Ansible： 核心<br>Modules： 包括 Ansible 自带的核心模块及自定义模块<br>Plugins： 完成模块功能的补充，包括连接插件、邮件插件等<br>Playbooks： 网上很多翻译为剧本，个人觉得理解为编排更为合理；定义 Ansible 多任务配置文件，有 Ansible 自动执行<br>Inventory： 定义 Ansible 管理主机的清单<br>ansible特点<br>模块化、部署简单、工作于agentless模式、默认使用ssh协议、支持自定义模块、支持Palybook等</p><h2 id="ansible-基本安装介绍"><a href="#ansible-基本安装介绍" class="headerlink" title="ansible 基本安装介绍"></a>ansible 基本安装介绍</h2><pre><code>### 系统环境$ uname -aLinux note1 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux$ cat /etc/redhat-release CentOS release 6.6 (Final)### epel源$ wget -O /etc/yum.repos.d/epel.repo  http://mirrors.aliyun.com/repo/epel-6.repo### 安装ansible$ yum -y install python-jinja2 PyYAML python-paramiko python-babel python-crypto ansible### 配置ansible主机文件$ &gt; /etc/ansible/hosts         $ cat /etc/ansible/hosts      [web]192.168.70.51[db]192.168.70.50### 配置主机免密钥登陆$ ssh-keygen -t rsa -P &#39;&#39;$ ssh-copy-id  -i ~/.ssh/id_rsa.pub root@192.168.70.51$ ssh-copy-id  -i ~/.ssh/id_rsa.pub root@192.168.70.50### 测试ping$ ansible all -m ping 解决办法:Are you sure you want to continue connecting (yes/no)?方法一：$ vim /etc/ansible/ansible.cfg 或者 ~/.ansible.cfg[defaults]host_key_checking = False方法一：$ export ANSIBLE_HOST_KEY_CHECKING=False$ ansible all -m ping                                192.168.70.50 | success &gt;&gt; {    &quot;changed&quot;: false,     &quot;ping&quot;: &quot;pong&quot;}192.168.70.51 | success &gt;&gt; {    &quot;changed&quot;: false,     &quot;ping&quot;: &quot;pong&quot;}</code></pre><h2 id="Ansible命令参数介绍"><a href="#Ansible命令参数介绍" class="headerlink" title="Ansible命令参数介绍"></a>Ansible命令参数介绍</h2><blockquote><ul><li>-v,–verbose 详细模式，如果命令执行成功，输出详细的结果(-vv –vvv -vvvv)</li><li>-i PATH,–inventory=PATH 指定host文件的路径，默认是在/etc/ansible/hosts</li><li>-f NUM,–forks=NU NUM是指定一个整数，默认是5，指定fork开启同步进程的个数。</li><li>-m NAME,–module-name=NAME 指定使用的module名称，默认是command</li><li>-m DIRECTORY,–module-path=DIRECTORY 指定module的目录来加载module，默认是/usr/share/ansible,</li><li>-a,MODULE_ARGS 指定module模块的参数</li><li>-k,-ask-pass 提示输入ssh的密码，而不是使用基于ssh的密钥认证</li><li>-sudo 指定使用sudo获得root权限</li><li>-K,-ask-sudo-pass 提示输入sudo密码，与–sudo一起使用</li><li>-u USERNAME,-user=USERNAME 指定移动端的执行用户</li><li>-C,-check 测试此命令执行会改变什么内容，不会真正的去执行</li></ul></blockquote><h2 id="主机清单介绍hosts"><a href="#主机清单介绍hosts" class="headerlink" title="主机清单介绍hosts"></a>主机清单介绍hosts</h2><p>Ansible 通过读取默认的主机清单配置/etc/ansible/hosts，可以同时连接到多个远程主机上执行任务，默认路径可以通过修改 ansible.cfg 的 hostfile 参数指定路径。</p><pre><code>[dbserver]  []表示主机的分组名,可以按照功能,系统进行分类,便于进行操作192.168.10.2 one.example.com www.bds.com:5309         #支持指定ssh端口5309 jumper ansible_ssh_port=5309 ansible_ssh_host=192.168.10.2   #设置主机别名为jumperwww[01:50].bds.com       #支持通配符匹配www01.bds.com www02.bds.com[web]                   #提醒下这里面字母是随便定义的web-[a:f].bds.com        #支持字母匹配 web-a.bds.com ..web-f.bds.com为主机指定类型和连接用户[bds]Localhost  ansible_connection=localother1.example.com ansible_connection=ssh ansible_ssh_user=deployother2.example.com ansible_connection=ssh ansible_ssh_user=deployansible hosts配置文件中支持指令注意: 前面如果不配置主机免密钥登录,可以在/etc/ansible/hosts中定义用户和密码,主机ip地址,和ssh端口,这样也可以进行免密码访问,但是这个/hosts文件要保护好,因为所有的密码都写在里面</code></pre><h2 id="hosts文件配置参数介绍"><a href="#hosts文件配置参数介绍" class="headerlink" title="hosts文件配置参数介绍"></a>hosts文件配置参数介绍</h2><blockquote><ul><li>ansible_ssh_host : 指定主机别名对应的真实 IP，如：100 ansible_ssh_host=192.168.1.100，随后连接该主机无须指定完整 IP，只需指定 251 就行</li></ul></blockquote><blockquote><ul><li>ansible_ssh_port : 指定连接到这个主机的 ssh 端口，默认 22</li></ul></blockquote><blockquote><ul><li>ansible_ssh_user : 连接到该主机的 ssh 用户</li></ul></blockquote><blockquote><ul><li>ansible_ssh_pass : 连接到该主机的 ssh 密码（连-k 选项都省了），安全考虑还是建议使用私钥或在命令行指定-k 选项输入</li></ul></blockquote><blockquote><ul><li>ansible_sudo_pass : sudo 密码</li></ul></blockquote><blockquote><ul><li>ansible_sudo_exe : sudo 命令路径</li></ul></blockquote><blockquote><ul><li>ansible_connection : 连接类型，可以是 local、ssh 或 paramiko，ansible1.2 之前默认为 paramiko</li></ul></blockquote><blockquote><ul><li>ansible_ssh_private_key_file : 私钥文件路径</li></ul></blockquote><blockquote><ul><li>ansible_shell_type : 目标系统的 shell 类型，默认为 sh,如果设置 csh/fish，那么命令需要遵循它们语法</li></ul></blockquote><blockquote><ul><li>ansible_python_interpreter : python 解释器路径，默认是/usr/bin/python，但是如要要连BSD系统的话，就需要该指令修改 python 路径</li></ul></blockquote><blockquote><ul><li>ansible__interpreter : 这里的”*”可以是 ruby 或 perl 或其他语言的解释器，作用和 ansible_python_interpreter 类似</li></ul></blockquote><h2 id="ansible-常用模块介绍"><a href="#ansible-常用模块介绍" class="headerlink" title="ansible 常用模块介绍"></a>ansible 常用模块介绍</h2><h3 id="ansible使用帮助"><a href="#ansible使用帮助" class="headerlink" title="ansible使用帮助"></a>ansible使用帮助</h3><pre><code>$ ansible-doc  -l                 #查询ansible的所有模块$ ansible-doc -s module_name      #查看模块的属性信息</code></pre><h3 id="ansible语法"><a href="#ansible语法" class="headerlink" title="ansible语法"></a>ansible语法</h3><pre><code>ansible &lt;pattern_goes_here&gt; -m &lt;module_name&gt; -a &lt;arguments&gt;</code></pre><h3 id="raw模块"><a href="#raw模块" class="headerlink" title="raw模块"></a>raw模块</h3><p>command模块功能相同，但比command的模块功能强大(支持管道和变量)<br>Ansible raw：<a href="https://docs.ansible.com/ansible/raw_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/raw_module.html</a></p><pre><code>$ ansible all -m raw -a &quot;hostname&quot;</code></pre><h3 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h3><p>默认模块 ,用于在各个被管理节点运行指定的命令(不支持管道和变量)<br>Ansible command模块：<a href="https://docs.ansible.com/ansible/list_of_commands_modules.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/list_of_commands_modules.html</a></p><pre><code>$ ansible all -m command -a &quot;hostname &quot;</code></pre><h3 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h3><p>command模块功能相同，但比command的模块功能强大(支持管道和变量)<br>Ansible shell模块：<a href="https://docs.ansible.com/ansible/shell_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/shell_module.html</a></p><pre><code>$ ansible all -m shell -a &quot;cat /etc/passwd| grep root &quot;                         </code></pre><h3 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h3><p>用户模块,用于在各管理节点管理用户所使用<br>Ansible User模块：<a href="https://docs.ansible.com/ansible/user_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/user_module.html</a></p><pre><code>### 创建一个用户$ ansible db -m user -a &#39;name=DBA uid=505 home=/Data/dba shell=/sbin/nologin&#39;    ### 删除一个用户$ ansible db -m user  -a &#39;name=budongshu uid=506  state=absent&#39;</code></pre><h3 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h3><p>Ansible group模块：<a href="https://docs.ansible.com/ansible/group_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/group_module.html</a></p><pre><code>ansible db -m group  -a &#39;name=test  gid=1000&#39; </code></pre><h3 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h3><p>计划定时任务,用于在各管理节点管理计划任务<br>Ansible cron模块：<a href="https://docs.ansible.com/ansible/cron_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/cron_module.html</a></p><pre><code>$ ansible all -m cron -a &quot;name=time minute=&#39;*/2&#39; job=&#39;/usr/sbin/ntpdate </code></pre><h3 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h3><p>复制模块,复制文件到各个节点<br>Ansible copy模块：<a href="https://docs.ansible.com/ansible/copy_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/copy_module.html</a></p><pre><code>$ ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp/ mode=600&quot;</code></pre><h3 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h3><p>文件模块 , 修改各个节点指定的文件属性<br>Ansible File模块：<a href="https://docs.ansible.com/ansible/list_of_files_modules.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/list_of_files_modules.html</a></p><pre><code>$ ansible all -m file -a &#39;path=/tmp/hosts mode=644 owner=DBA&#39;  $ ansible all -m file -a &quot;dest=/tmp/ansible.txt mode=755 owner=root group=root state=directory&quot;### file删除文件或者目录$ ansible all -m file -a &quot;dest=/tmp/ansible.txt state=absent&quot;   注：state的其他选项：link(链接)、hard(硬链接)</code></pre><h3 id="stat-模块"><a href="#stat-模块" class="headerlink" title="stat 模块"></a>stat 模块</h3><p>获取远程文件状态信息，包含atime、ctime、mtime、md5、uid、gid等<br>Ansible Setup模块：<a href="https://docs.ansible.com/ansible/setup_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/setup_module.html</a></p><pre><code>$ ansible all -m stat -a &quot;path=/etc/passwd &quot;</code></pre><h3 id="ping-模块"><a href="#ping-模块" class="headerlink" title="ping 模块"></a>ping 模块</h3><p>测试模块 ,测试各个节点是否正常在线</p><pre><code>$ansible all -m stat -a &#39;path=/etc/passwd&#39;</code></pre><h3 id="template模块"><a href="#template模块" class="headerlink" title="template模块"></a>template模块</h3><p>根据官方的翻译是：template使用了Jinjia2格式作为文件模板，进行文档内变量的替换的模块。他的每次使用都会被ansible标记为changed状态。<br>Ansible Template模块：<a href="https://docs.ansible.com/ansible/template_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/template_module.html</a></p><h3 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h3><p>用于管理节点安装软件所使用<br>Ansible yum模块：<a href="https://docs.ansible.com/ansible/yum_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/yum_module.html</a></p><pre><code>$ ansible all -m yum -a &#39;name=ntp state=present&#39;</code></pre><blockquote><ul><li>卸载的软件只需要将 name=ntp state=absent</li><li>安装特定版本 name=nginx-1.6.2 state=present</li><li>指定某个源仓库安装软件包name=htop enablerepo=epel state=present</li><li>更新软件到最新版 name=nginx state=latest</li></ul></blockquote><h3 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h3><p>管理各个节点的服务<br>Ansible service模块：<a href="https://docs.ansible.com/ansible/service_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/service_module.html</a></p><pre><code>$ ansible all -m service -a &quot;name=ntpd enabled=true state=started&quot;     state 支持其它选项 started stopped restarted</code></pre><h3 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h3><p>自动复制脚本到远程节点,并运行<br>Ansible script模块：<a href="http://docs.ansible.com/ansible/script_module.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible/script_module.html</a></p><pre><code>$ ansible all -m script -a &#39;ansible_test.sh&#39;</code></pre><h3 id="setup模块"><a href="#setup模块" class="headerlink" title="setup模块"></a>setup模块</h3><p>收集ansible的facts信息<br>Ansible script模块：<a href="http://docs.ansible.com/ansible/script_module.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible/script_module.html</a></p><pre><code>$ ansible all -m setup  #收集主机的facts信息,可以通过变量引用这些信息</code></pre><h2 id="ansible-主机清单通配模式介绍"><a href="#ansible-主机清单通配模式介绍" class="headerlink" title="ansible 主机清单通配模式介绍"></a>ansible 主机清单通配模式介绍</h2><p>可以看到上面执行命令的时候有个ansible -m all ,以上我用的all或指定主机,这里也可以进行通配 ,在/etc/ansible/hosts 进行设置如下</p><pre><code>[web]10.10.10.210.10.10.3[db]10.10.10.4 [allhost:children]     #可以把一个组当做另一个组的子成员webdb例子:ansible web -m shell -a ‘uptime’     #代表web组中的所有主机ansible allhost -m shell -a ‘uptime’ #代表allhost组中的所有子成员组其它匹配方式</code></pre><pre><code>1.1 通配所有主机all , *1.2 通配具有规则特征的主机或者主机名one.bds.com.bds.com192.168.10.2192.168.10.1.3 通配俩组的所有主机,组名之间通过冒号分开,表示or的意思web:db1.4 非模式匹配: 表示在 web组不在db组的主机web:!db1.5 交集匹配: 表示同时都在 web 和db组的主机web:&amp;db1.6 匹配一个组的特定编号的主机 从零开始计算web[0]1.7 匹配 web组的第 1 个到第 25 个主机web [0-25]1.8 组合匹配在web组或者在db组中,必须还存在test1组中,但不在test2组中web:db:&amp;test1:!test21.9 大部分人都在patterns应用正则表达式,但你可以.只需要以 ‘~’ 开头即可:~(web|db).*.example.com2.0 同时让我们提前了解一些技能,除了如上,你也可以通过 --limit 标记来添加排除条件,/usr/bin/ansible or /usr/bin/ansible-playbook都支持:ansible-playbook site.yml --limit datacenter22.1 如果你想从文件读取hosts,文件名以@为前缀即可.从Ansible 1.2开始支持该功能:ansible-playbook site.yml --limit @retry_hosts.txt</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://www.jianshu.com/p/b9956ea83a78" target="_blank" rel="noopener">https://www.jianshu.com/p/b9956ea83a78</a></li><li><a href="http://www.yfshare.vip/2017/04/05/Ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">http://www.yfshare.vip/2017/04/05/Ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</a></li><li><a href="http://ansible-tran.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">http://ansible-tran.readthedocs.io/en/latest/index.html</a></li><li><a href="https://docs.ansible.com/ansible/2.3/index.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/2.3/index.html</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux ansible 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>srcache-nginx-module+pika实现nginx页面缓存</title>
      <link href="/archives/7602f51b.html"/>
      <url>/archives/7602f51b.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="srcache-nginx-module-pika实现nginx页面缓存"><a href="#srcache-nginx-module-pika实现nginx页面缓存" class="headerlink" title="srcache-nginx-module+pika实现nginx页面缓存"></a>srcache-nginx-module+pika实现nginx页面缓存</h1><p>缓存应用场景：客户端（浏览器缓存）、数据库缓存、代理层缓存、应用层缓存等；</p><p>针对代理层缓存，我们可以将静态资源放入cdn或者本地页面缓存加快用户访问速度，缓解服务器压力。</p><p>下面我们针对页面缓存采用pika+srcache方案：</p><h2 id="openresty编译模块"><a href="#openresty编译模块" class="headerlink" title="openresty编译模块"></a>openresty编译模块</h2><p>以下必要模块支持：</p><blockquote><ul><li>srcache-nginx-module</li><li>ngx_lua</li><li>memc-nginx-module</li><li>redis2-nginx-module</li><li>redis-nginx-module</li></ul></blockquote><p>生产应用的编译参数：</p><pre><code>[root@WEB3 ~]# /usr/local/openresty/nginx/sbin/nginx -Vnginx version: openresty/1.11.2.4built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) built with OpenSSL 1.0.1e-fips 11 Feb 2013TLS SNI support enabledconfigure arguments: --prefix=/usr/local/openresty/nginx --with-cc-opt=-O2 --add-module=../ngx_devel_kit-0.3.0 --add-module=../echo-nginx-module-0.60 --add-module=../xss-nginx-module-0.05 --add-module=../ngx_coolkit-0.2rc3 --add-module=../set-misc-nginx-module-0.31 --add-module=../form-input-nginx-module-0.12 --add-module=../encrypted-session-nginx-module-0.06 --add-module=../srcache-nginx-module-0.31 --add-module=../ngx_lua-0.10.8 --add-module=../ngx_lua_upstream-0.06 --add-module=../headers-more-nginx-module-0.32 --add-module=../array-var-nginx-module-0.05 --add-module=../memc-nginx-module-0.18 --add-module=../redis2-nginx-module-0.14 --add-module=../redis-nginx-module-0.3.7 --add-module=../rds-json-nginx-module-0.14 --add-module=../rds-csv-nginx-module-0.07 --with-ld-opt=-Wl,-rpath,/usr/local/openresty/luajit/lib --with-pcre=/usr/local/pcre-8.38 --with-stream --with-http_ssl_module</code></pre><h2 id="pika介绍"><a href="#pika介绍" class="headerlink" title="pika介绍"></a>pika介绍</h2><h3 id="Pika是什么"><a href="#Pika是什么" class="headerlink" title="Pika是什么"></a>Pika是什么</h3><p>Pika是DBA和基础架构组联合开发的类Redis 存储系统，所以完全支持Redis协议，用户不需要修改任何代码，就可以将服务迁移至Pika。Pika是一个可持久化的大容量Redis存储服务，兼容string、hash、list、zset、set的绝大接口兼容详情，解决Redis由于存储数据量巨大而导致内存不够用的容量瓶颈，并且可以像Redis一样，通过slaveof命令进行主从备份，支持全同步和部分同步。同时DBA团队还提供了迁移工具， 所以用户不会感知这个迁移的过程，迁移是平滑的。</p><h3 id="与Redis的比较"><a href="#与Redis的比较" class="headerlink" title="与Redis的比较"></a>与Redis的比较</h3><p>Pika相对于Redis，最大的不同就是Pika是持久化存储，数据存在磁盘上，而Redis是内存存储，由此不同也给Pika带来了相对于Redis的优势和劣势</p><p>优势：</p><p>1.容量大：Pika没有Redis的内存限制, 最大使用空间等于磁盘空间的大小</p><p>2.加载db速度快：Pika在写入的时候, 数据是落盘的, 所以即使节点挂了, 不需要rdb或者oplog，Pika重启不用加载所有数据到内存就能恢复之前的数据, 不需要进行回放数据操作。</p><p>3.备份速度快：Pika备份的速度大致等同于cp的速度（拷贝数据文件后还有一个快照的恢复过程，会花费一些时间），这样在对于百G大库的备份是快捷的，更快的备份速度更好的解决了主从的全同步问题</p><p>劣势：<br>由于Pika是基于内存和文件来存放数据, 所以性能肯定比Redis低一些, 但是我们一般使用SSD盘来存放数据, 尽可能跟上Redis的性能。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>从以上的对比可以看出, 如果你的业务场景的数据比较大，Redis 很难支撑， 比如大于50G，或者你的数据很重要，不允许断电丢失，那么使用Pika 就可以解决你的问题。 而在实际使用中，Pika的性能大约是Redis的50%。</p><h3 id="Pika的特点"><a href="#Pika的特点" class="headerlink" title="Pika的特点"></a>Pika的特点</h3><p>1.容量大，支持百G数据量的存储<br>2.兼容Redis，不用修改代码即可平滑从Redis迁移到Pika<br>3.支持主从(slaveof)<br>4.完善的运维命令</p><h3 id="当前适用情况"><a href="#当前适用情况" class="headerlink" title="当前适用情况"></a>当前适用情况</h3><p>目前Pika在线上部署并运行了20多个巨型（承载数据与Redis相比）集群 粗略的统计如下：当前每天承载的总请求量超过100亿，当前承载的数据总量约3TB</p><h3 id="二进制包安装部署"><a href="#二进制包安装部署" class="headerlink" title="二进制包安装部署"></a>二进制包安装部署</h3><pre><code>cd /usr/local/wget https://github.com/Qihoo360/pika/releases/download/v3.0.0/pika-linux-x86_64-v3.0.0.tar.bz2tar -jxvf pika-linux-x86_64-v3.0.0.tar.bz2 mv pika-linux-x86_64-v3.0.0  pika# 增加开机自启动echo &quot;/usr/local/pika/output/bin/pika -c /usr/local/pika/output/conf/pika.conf&quot; &gt;&gt; /etc/rc.local# 启动/usr/local/pika/output/bin/pika -c /usr/local/pika/output/conf/pika.conf# 验证[root@WEB3 output]# ss -lntp | grep 9221LISTEN     0      128               127.0.0.1:9221                     *:*      users:((&quot;pika&quot;,23138,50))LISTEN     0      128             10.30.10.11:9221                     *:*      users:((&quot;pika&quot;,23138,49))</code></pre><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>cat nginx.conf</p><pre><code>   lua_package_path &quot;/usr/local/openresty/nginx/lua/?.lua;;&quot;;   lua_shared_dict config 320m;   lua_shared_dict srcache_locks 10m;   lua_shared_dict mn_whiteurl 1m;   init_by_lua_file /usr/local/openresty/nginx/lua/init.lua;   access_by_lua_file /usr/local/openresty/nginx/lua/waf.lua;   body_filter_by_lua_file /usr/local/openresty/nginx/lua/body_cache.lua;   include /usr/local/openresty/nginx/conf.d/*.conf;    server {        listen       80;        server_name  www.test.com;        root /var/www/test;        index  index.html index.htm index.php;        access_log  /var/log/nginx/access.log main;        error_log /var/log/nginx/error.log;        userid on;        userid_domain test.com;        userid_expires 1095d;        upstream redis_m {           server 127.0.0.1:9221;           server 192.168.1.1:9221 backup;           keepalive 4096;        }        upstream memcache_m {           server 127.0.0.1:11214;           server 192.168.1.1:11214 backup;           keepalive 4096;        }        location /memc {                internal;                set $memc_cmd $arg_cmd;                memc_cmds_allowed get set add delete flush_all;                memc_connect_timeout 300ms;                memc_send_timeout 300ms;                memc_read_timeout 300ms;                set_unescape_uri $memc_key $arg_key;                set $memc_exptime $arg_expiretime;                memc_pass memcache_m;        }        location = /redisttl {            internal;            set_unescape_uri $key $arg_key;            set_md5 $key;            redis2_query ttl $key;            redis2_pass redis_m;        }        location = /redispersist {            internal;            set_unescape_uri $key $arg_key;            set_md5 $key;            redis2_query persist $key;            redis2_pass redis_m;        }        location = /redis2clearcache {                internal;                set_unescape_uri $exptime $arg_expiretime;                set_unescape_uri $key $arg_key;                redis2_query expire $key $exptime;                redis2_pass redis_m;        }        location = /redis {                internal;                set $redis_key $arg_key;                redis_pass redis_m;        }        location = /redis2 {                internal;                set_unescape_uri $exptime $arg_expiretime;                set_unescape_uri $key $arg_key;                redis2_query set $key $echo_request_body;                redis2_query expire $key $exptime;                redis2_pass redis_m;        }        location = /lua_memc_del {                set $cache_stale 0;  # 1 day                content_by_lua &#39;                ngx.header.content_type = &quot;text/plain&quot;;                if ngx.var.arg_pwd ~= &quot;to8to&quot; then                        ngx.say(&quot;error&quot;);                else                        local res = ngx.location.capture(&quot;/redis2clearcache&quot;, {                                        args = { expiretime = ngx.var.cache_stale,key = ngx.var.arg_key}                                        })                        if res.status == 200 then                                ngx.say(res.body);                        else                                ngx.say(&quot;not exist&quot;);                        end                end                &#39;;        }        location / {                if (!-e $request_filename)                {                rewrite ^(.*)$ /index.php last;                }        }        location ~* ^.+\.(ico|gif|jpg|jpeg|png|css|js|txt|swf|wav|bmp|webp|apk|zip|rar)$ {                access_log off;                expires 30d;        }        location ~* &quot;\.htaccess$&quot; {            deny  all;        }        location ~* &quot;/(\.svn|\.git|runtime|protected|framework)/&quot; {            deny all;        }        location ~* &quot;^/(assets|html|css|js|images|img|static)/(.*)\.(php|php5)$&quot;        {            deny all;        }        location ~ \.php$ {                if (!-e $request_filename)                {                    rewrite ^(.*)$ /index.php last;                }                try_files /index.php =404;                set $prefix_wap &quot;wap&quot;;                set_md5 $key $prefix_wap$host$request_uri;                set $mtime 3600;                set $skip 0;                if ($request_uri ~* ^\/(\?(.*))?$)                {                        set $skip 1;                        set $mtime 0;                }                if ($request_uri ~* /index/Citycookie )                {                        set $skip 1;                        set $mtime 0;                }                if ($request_uri ~* ^/test(.*)$)                {                        set $skip 0;                        set $mtime 604800;                }                #此if判断一定要放在最后,否则会出现POST请求被缓存的情况                if ($request_method = POST)                {                         set $skip 1;                         set $mtime 0;                }                srcache_fetch_skip $skip;                srcache_store_skip $skip;                set $cache_status 0;                add_header  Cache-status $cache_status;                set $cache_lock srcache_locks;                set $cache_ttl /redisttl;                set $cache_persist /redispersist;                set $cache_key $prefix_wap$host$request_uri;                set $cache_stale 86400;  # 1 day                set_by_lua $expireTime &#39;return ngx.var.mtime + ngx.var.cache_stale&#39;;                rewrite_by_lua_file /usr/local/openresty/lualib/resty/cache.lua;                if ($http_x_skip_fetch != TRUE){                        srcache_fetch GET /redis key=$key;                }                srcache_store PUT /redis2 key=$key&amp;expiretime=$expireTime;                srcache_methods GET PUT POST;                add_header X-Cached-From $srcache_fetch_status;                add_header Cache-Control max-age=$mtime;                if ( $mtime = 0)                {                    add_header Cache-Control no-cache;                }                fastcgi_pass   127.0.0.1:9000;                fastcgi_index  index.php;                fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name;                include        fastcgi_params;                fastcgi_intercept_errors on;        }    }</code></pre><h2 id="验证缓存情况"><a href="#验证缓存情况" class="headerlink" title="验证缓存情况"></a>验证缓存情况</h2><pre><code>[root@WEB3 ~]# curl -I  -H &#39;host:www.test.com&#39; http://127.0.0.1/test/HTTP/1.1 200 OKServer: openrestyDate: Tue, 07 Aug 2018 08:49:36 GMTContent-Type: text/html;charset=utf-8Content-Length: 90799Connection: keep-aliveVary: Accept-EncodingCache-status: 0X-Cached-From: HITCache-Control: max-age=604800Set-Cookie: uid=fwAAAVtpXSC+sTyIAwMHAg==; expires=Fri, 06-Aug-21 08:49:36 GMT; domain=test.com; path=/</code></pre><h2 id="缓存命中率分析"><a href="#缓存命中率分析" class="headerlink" title="缓存命中率分析"></a>缓存命中率分析</h2><pre><code> awk &#39;{if($(NF-1) ~ &quot;HIT&quot;) hit++} END {printf &quot;file:&#39;$a&#39; time:&#39;$LAST_DAY&#39;: %d %d %.2f%n&quot; ,hit,NR,hit/NR}&#39; /var/log/nginx/access.log</code></pre><h2 id="本文涉及的lua脚本"><a href="#本文涉及的lua脚本" class="headerlink" title="本文涉及的lua脚本"></a>本文涉及的lua脚本</h2><p><a href="https://raw.githubusercontent.com/owelinux/owelinux.github.io/master/images/2018-08-07-article12-linux-srcache-nginx-module/cache.lua" target="_blank" rel="noopener">cache.lua</a></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><blockquote><ul><li><a href="https://github.com/Qihoo360/pika/wiki" target="_blank" rel="noopener">https://github.com/Qihoo360/pika/wiki</a></li><li><a href="https://github.com/openresty/srcache-nginx-module" target="_blank" rel="noopener">https://github.com/openresty/srcache-nginx-module</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx pika cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lucene查询语法，适用于ELk：kibana查询</title>
      <link href="/archives/654c9140.html"/>
      <url>/archives/654c9140.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="lucene查询语法，适用于ELk：kibana查询"><a href="#lucene查询语法，适用于ELk：kibana查询" class="headerlink" title="lucene查询语法，适用于ELk：kibana查询"></a>lucene查询语法，适用于ELk：kibana查询</h1><p>Kibana在ELK中扮演着数据可视化角色，用来查询及展示数据；<br>Elasticsearch查询采用的是luncene搜索引擎，其4过滤查询语法和lucene一致。</p><p><img src="http://owelinux.github.io/images/2018-08-03-article11-linux-luncene/elk-lucene.png" alt></p><p><a href="http://demo.elastic.co/app/kibana#/discover" target="_blank" rel="noopener">Kibana官方在线演示</a></p><h2 id="字段搜索"><a href="#字段搜索" class="headerlink" title="字段搜索"></a>字段搜索</h2><p>Lucene支持实时数据。执行搜索时，您可以指定字段，也可以使用默认字段。字段名称和默认字段是特定于实现的。</p><pre><code>限定字段全文搜索：field:value精确搜索：关键字加上双引号 filed:&quot;value&quot;http.code:404 搜索http状态码为404的文档</code></pre><p>字段本身是否存在</p><pre><code>_exists_:http：返回结果中需要有http字段_missing_:http：不能含有http字段</code></pre><h2 id="通配符搜索"><a href="#通配符搜索" class="headerlink" title="通配符搜索"></a>通配符搜索</h2><p>Lucene支持单个术语内的单个和多个字符通配符搜索（不在短语查询中）。</p><pre><code>? 匹配单个字符* 匹配0到多个字符te?t,test*,te*t</code></pre><p>注意：您不能使用*或？符号作为搜索的第一个字符。</p><h2 id="正则表达式搜索"><a href="#正则表达式搜索" class="headerlink" title="正则表达式搜索"></a>正则表达式搜索</h2><p>Lucene支持正向表达式搜索.</p><pre><code>name:/joh?n(ath[oa]n)/</code></pre><h2 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h2><pre><code>quikc~ brwn~ foks~~:在一个单词后面加上~启用模糊搜索，可以搜到一些拼写错误的单词first~ 这种也能匹配到 frist</code></pre><p>还可以设置编辑距离（整数），指定需要多少相似度</p><pre><code>cromm~1 会匹配到 from 和 chrome默认2，越大越接近搜索的原始值，设置为1基本能搜到80%拼写错误的单词</code></pre><h2 id="近似搜索"><a href="#近似搜索" class="headerlink" title="近似搜索"></a>近似搜索</h2><p>在短语后面加上~，可以搜到被隔开或顺序不同的单词</p><pre><code>&quot;where select&quot;~5 表示 select 和 where 中间可以隔着5个单词，可以搜到 select password from users where id=1</code></pre><h2 id="范围搜索"><a href="#范围搜索" class="headerlink" title="范围搜索"></a>范围搜索</h2><p>数值/时间/IP/字符串 类型的字段可以对某一范围进行查询</p><pre><code>length:[100 TO 200]sip:[&quot;172.24.20.110&quot; TO &quot;172.24.20.140&quot;]date:{&quot;now-6h&quot; TO &quot;now&quot;}tag:{b TO e} 搜索b到e中间的字符count:[10 TO *] * 表示一端不限制范围count:[1 TO 5} [ ] 表示端点数值包含在范围内，{ } 表示端点数值不包含在范围内，可以混合使用，此语句为1到5，包括1，不包括5可以简化成以下写法：age:&gt;10age:&lt;=10age:(&gt;=10 AND &lt;20)</code></pre><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>使用^使一个词语比另一个搜索优先级更高，默认为1，可以为0~1之间的浮点数，来降低优先级</p><pre><code>quick^2 fox</code></pre><h2 id="布尔运算符搜索"><a href="#布尔运算符搜索" class="headerlink" title="布尔运算符搜索"></a>布尔运算符搜索</h2><p>布尔运算符允许通过逻辑运算符组合术语。Lucene支持AND，“+”，OR，NOT和“ - ”作为布尔运算符（注意：布尔运算符必须是ALL CAPS）。</p><p>OR</p><pre><code>&quot;jakarta apache&quot; jakartaor&quot;jakarta apache&quot; OR jakarta</code></pre><p>AND</p><pre><code>&quot;jakarta apache&quot; AND &quot;Apache Lucene&quot;</code></pre><p>+:搜索结果中必须包含此项</p><pre><code>+jakarta lucene</code></pre><p>NOT</p><pre><code>&quot;jakarta apache&quot; NOT &quot;Apache Lucene&quot;NOT &quot;jakarta apache&quot;</code></pre><p>-：不能含有此项</p><pre><code>&quot;jakarta apache&quot; -&quot;Apache Lucene&quot;</code></pre><h2 id="分组搜索"><a href="#分组搜索" class="headerlink" title="分组搜索"></a>分组搜索</h2><p>Lucene支持使用括号将子句分组以形成子查询。如果要控制查询的布尔逻辑，这可能非常有用。</p><pre><code>(jakarta OR apache) AND jakarta</code></pre><h2 id="字段分组搜索"><a href="#字段分组搜索" class="headerlink" title="字段分组搜索"></a>字段分组搜索</h2><p>Lucene支持使用括号将多个子句分组到单个字段。</p><pre><code>title:(+return +&quot;pink panther&quot;)host:(baidu OR qq OR google) AND host:(com OR cn)</code></pre><h2 id="转义特殊字符搜索"><a href="#转义特殊字符搜索" class="headerlink" title="转义特殊字符搜索"></a>转义特殊字符搜索</h2><p>Lucene支持转义属于查询语法的特殊字符。</p><pre><code>+ - = &amp;&amp; || &gt; &lt; ! ( ) { } [ ] ^ &quot; ~ * ? : \ /以上字符当作值搜索的时候需要用\转义\(1\+1\)\=2用来查询(1+1)=2</code></pre><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><blockquote><ul><li><a href="https://lucene.apache.org/core/5_2_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html" target="_blank" rel="noopener">https://lucene.apache.org/core/5_2_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax</a></li><li><a href="https://segmentfault.com/a/1190000002972420#articleHeader10" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002972420#articleHeader10</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lucene ELK kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>metricbeat部署及监控linux系统指标汇总</title>
      <link href="/archives/a73b344.html"/>
      <url>/archives/a73b344.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Metricbeat"><a href="#Metricbeat" class="headerlink" title="Metricbeat"></a>Metricbeat</h1><h2 id="轻量型指标采集器"><a href="#轻量型指标采集器" class="headerlink" title="轻量型指标采集器"></a>轻量型指标采集器</h2><p>用于从系统和服务收集指标。从 CPU 到内存，从 Redis 到 Nginx，Metricbeat 能够以一种轻量型的方式，输送各种系统和服务统计数据。</p><h2 id="系统级监控，更简洁"><a href="#系统级监控，更简洁" class="headerlink" title="系统级监控，更简洁"></a>系统级监控，更简洁</h2><p>将 Metricbeat 部署到您所有的 Linux、Windows 和 Mac 主机，并将它连接到 Elasticsearch 就大功告成啦：您可以获取系统级的 CPU 使用率、内存、文件系统、磁盘 IO 和网络 IO 统计数据，以及获得如同系统上 top 命令类似的各个进程的统计数据。探索<a href="https://demo.elastic.co/app/kibana#/dashboard/Metricbeat-system-overview?_g=()&_a=(description:'',filters:!(),fullScreenMode:!f,options:(darkTheme:!f,useMargins:!f),panels:!((gridData:(h:5,i:'9',w:48,x:0,y:0),id:System-Navigation,panelIndex:'9',type:visualization,version:'6.3.1'),(embeddableConfig:(vis:(defaultColors:('0%20-%20100':'rgb(0,104,55)'))),gridData:(h:10,i:'11',w:8,x:0,y:5),id:c6f2ffd0-4d17-11e7-a196-69b9a7a020a9,panelIndex:'11',type:visualization,version:'6.3.1'),(embeddableConfig:(vis:(defaultColors:('0%20-%20100':'rgb(0,104,55)'))),gridData:(h:25,i:'12',w:24,x:24,y:15),id:fe064790-1b1f-11e7-bec4-a5e9ec5cab8b,panelIndex:'12',type:visualization,version:'6.3.1'),(gridData:(h:25,i:'13',w:24,x:0,y:15),id:'855899e0-1b1c-11e7-b09e-037021c4f8df',panelIndex:'13',type:visualization,version:'6.3.1'),(embeddableConfig:(vis:(defaultColors:('0%25%20-%2015%25':'rgb(247,252,245)','15%25%20-%2030%25':'rgb(199,233,192)','30%25%20-%2045%25':'rgb(116,196,118)','45%25%20-%2060%25':'rgb(35,139,69)'))),gridData:(h:30,i:'14',w:48,x:0,y:40),id:'7cdb1330-4d1a-11e7-a196-69b9a7a020a9',panelIndex:'14',type:visualization,version:'6.3.1'),(embeddableConfig:(vis:(defaultColors:('0%20-%20100':'rgb(0,104,55)'))),gridData:(h:10,i:'16',w:8,x:32,y:5),id:'522ee670-1b92-11e7-bec4-a5e9ec5cab8b',panelIndex:'16',type:visualization,version:'6.3.1'),(gridData:(h:10,i:'17',w:8,x:40,y:5),id:'1aae9140-1b93-11e7-8ada-3df93aab833e',panelIndex:'17',type:visualization,version:'6.3.1'),(gridData:(h:10,i:'18',w:8,x:24,y:5),id:'825fdb80-4d1d-11e7-b5f2-2b7c1895bf32',panelIndex:'18',type:visualization,version:'6.3.1'),(gridData:(h:10,i:'19',w:8,x:16,y:5),id:d3166e80-1b91-11e7-bec4-a5e9ec5cab8b,panelIndex:'19',type:visualization,version:'6.3.1'),(gridData:(h:10,i:'20',w:8,x:8,y:5),id:'83e12df0-1b91-11e7-bec4-a5e9ec5cab8b',panelIndex:'20',type:visualization,version:'6.3.1')),query:(language:lucene,query:(query_string:(analyze_wildcard:!t,default_field:'*',query:'*'))),timeRestore:!f,title:'%5BMetricbeat%20System%5D%20Overview',viewMode:view)" target="_blank" rel="noopener">在线演示</a>。</p><h2 id="安装-Metricbeat"><a href="#安装-Metricbeat" class="headerlink" title="安装 Metricbeat"></a>安装 Metricbeat</h2><pre><code>wget https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-6.3.2-linux-x86_64.tar.gztar -zxvf metricbeat-6.3.2-linux-x86_64.tar.gzmv metricbeat-6.3.2-linux-x86_64 metricbeat</code></pre><h2 id="配置-Metricbeat"><a href="#配置-Metricbeat" class="headerlink" title="配置 Metricbeat"></a>配置 Metricbeat</h2><pre><code>metricbeat.config.modules:  path: ${path.config}/modules.d/*.yml  reload.enabled: falsesetup.template.settings:  index.number_of_shards: 1  index.codec: best_compressionsetup.kibana:  host: &quot;localhost:5602&quot;output.elasticsearch:  hosts: [&quot;192.168.1.1:29200&quot;]## 开启sytem监控$ cat modules.d/system.yml - module: system  period: 10s  metricsets:    - cpu    - load    - memory    - network    - process    - process_summary    #- core    - diskio    - socket  processes: [&#39;.*&#39;]  process.include_top_n:    by_cpu: 5      # include top 5 processes by CPU    by_memory: 5   # include top 5 processes by memory- module: system  period: 1m  metricsets:    - filesystem    #- fsstat  processors:  - drop_event.when.regexp:      system.filesystem.mount_point: &#39;^/(sys|cgroup|proc|dev|etc|host|lib)($|/)&#39;- module: system  period: 1m  metricsets:    - uptime</code></pre><h2 id="启动kibana、es、metricbeat"><a href="#启动kibana、es、metricbeat" class="headerlink" title="启动kibana、es、metricbeat"></a>启动kibana、es、metricbeat</h2><pre><code>/usr/local/metricbeat/metricbeat -e -c /usr/local/metricbeat/metricbeat.yml</code></pre><h2 id="使用Granfan可视化"><a href="#使用Granfan可视化" class="headerlink" title="使用Granfan可视化"></a>使用Granfan可视化</h2><h3 id="系统指标采集汇总"><a href="#系统指标采集汇总" class="headerlink" title="系统指标采集汇总"></a>系统指标采集汇总</h3><table><thead><tr><th>指标类型</th><th align="right">指标</th><th align="center">指标含义</th></tr></thead><tbody><tr><td>cpu</td><td align="right">system.cpu.total.pct</td><td align="center">cpu使用总的百分比</td></tr><tr><td>cpu</td><td align="right">system.cpu.cores</td><td align="center">cpu核数</td></tr><tr><td>cpu</td><td align="right">system.cpu.iowait.pct</td><td align="center">等待输入输出的CPU时间百分比</td></tr><tr><td>cpu</td><td align="right">system.cpu.user.pct</td><td align="center">用户空间占用CPU百分比</td></tr><tr><td>cpu</td><td align="right">system.cpu.system.pct</td><td align="center">内核空间占用CPU百分比</td></tr><tr><td>cpu</td><td align="right">system.cpu.nice.pct</td><td align="center">进程改变占用CPU百分比</td></tr><tr><td>cpu</td><td align="right">system.cpu.idle.pct</td><td align="center">空闲CPU百分比</td></tr><tr><td>memory</td><td align="right">system.memory.used.bytes</td><td align="center">内存使用大小</td></tr><tr><td>memory</td><td align="right">system.memory.used.pct</td><td align="center">内存使用百分比</td></tr><tr><td>memory</td><td align="right">system.memory.free</td><td align="center">内存剩余大小</td></tr><tr><td>memory</td><td align="right">system.memory.total</td><td align="center">内存总大小</td></tr><tr><td>memory</td><td align="right">system.memory.swap.used.pct</td><td align="center">swap内存使用百分比</td></tr><tr><td>memory</td><td align="right">system.memory.swap.used.bytes</td><td align="center">swap内存使用大小</td></tr><tr><td>memory</td><td align="right">system.memory.swap.free</td><td align="center">swap剩余内存</td></tr><tr><td>memory</td><td align="right">system.memory.swap.total</td><td align="center">swap内存总大小</td></tr><tr><td>network</td><td align="right">system.network.name</td><td align="center">网卡名</td></tr><tr><td>network</td><td align="right">system.network.in.packets</td><td align="center">网卡入口包数量</td></tr><tr><td>network</td><td align="right">system.network.in.errors</td><td align="center">网卡入口错误包数量</td></tr><tr><td>network</td><td align="right">system.network.in.dropped</td><td align="center">网卡入口拒收包数量</td></tr><tr><td>network</td><td align="right">system.network.in.bytes</td><td align="center">网卡入口包大小</td></tr><tr><td>network</td><td align="right">system.network.out.packets</td><td align="center">网卡出口网卡包数量</td></tr><tr><td>network</td><td align="right">system.network.out.bytes</td><td align="center">网卡出口包大小</td></tr><tr><td>network</td><td align="right">system.network.out.errors</td><td align="center">网卡出口错误包数量</td></tr><tr><td>network</td><td align="right">system.network.out.dropped</td><td align="center">网卡出口拒收包数量</td></tr><tr><td>load</td><td align="right">system.load.1</td><td align="center">1分钟的系统平均负载</td></tr><tr><td>load</td><td align="right">system.load.5</td><td align="center">5分钟的系统平均负载</td></tr><tr><td>load</td><td align="right">system.load.15</td><td align="center">15分钟的系统平均负载</td></tr><tr><td>process_summary</td><td align="right">system.process.summary.stopped</td><td align="center">停止进程</td></tr><tr><td>process_summary</td><td align="right">system.process.summary.zombie</td><td align="center">僵尸进程</td></tr><tr><td>process_summary</td><td align="right">system.process.summary.unknown</td><td align="center">无状态进程</td></tr><tr><td>process_summary</td><td align="right">system.process.summary.total</td><td align="center">进程总数</td></tr><tr><td>process_summary</td><td align="right">system.process.summary.sleeping</td><td align="center">休眠进程</td></tr><tr><td>process_summary</td><td align="right">system.process.summary.running</td><td align="center">运行进程</td></tr><tr><td>uptime</td><td align="right">system.uptime.duration.ms</td><td align="center">系统运行时间</td></tr><tr><td>socket</td><td align="right">system.socket.local.ip</td><td align="center">本机ip</td></tr><tr><td>diskio</td><td align="right">system.diskio.iostat.read.per_sec.bytes</td><td align="center">每秒从设备（drive expressed）读取的数据量(kB_read/s)</td></tr><tr><td>diskio</td><td align="right">system.diskio.iostat.write.per_sec.bytes</td><td align="center">每秒向设备（drive expressed）写入的数据量(kB_wrtn/s)</td></tr><tr><td>diskio</td><td align="right">system.diskio.iostat.read.request.per_sec</td><td align="center">每秒读取的扇区数(rsec/s)</td></tr><tr><td>diskio</td><td align="right">system.diskio.iostat.write.request.per_sec</td><td align="center">每秒写入的扇区数(wsec/s)</td></tr><tr><td>diskio</td><td align="right">system.diskio.iostat.read.request.merges_per_sec</td><td align="center">每秒这个设备相关的读取请求有多少被Merge(rrqm/s)</td></tr><tr><td>diskio</td><td align="right">system.diskio.iostat.write.request.merges_per_sec</td><td align="center">每秒这个设备相关的写入请求有多少被Merge(wrqm/s)</td></tr><tr><td>diskio</td><td align="right">system.diskio.iostat.await</td><td align="center">每一个IO请求的处理的平均时间（单位是微秒)</td></tr><tr><td>diskio</td><td align="right">system.diskio.read.bytes</td><td align="center">读取的总数据量(kB_read)</td></tr><tr><td>diskio</td><td align="right">system.diskio.write.bytes</td><td align="center">写入的总数量数据量(kB_wrtn)</td></tr><tr><td>filesystem</td><td align="right">system.filesystem.device_name</td><td align="center">文件系统设备名</td></tr><tr><td>filesystem</td><td align="right">system.filesystem.free</td><td align="center">磁盘剩余空间</td></tr><tr><td>filesystem</td><td align="right">system.filesystem.mount_point</td><td align="center">磁盘挂载分区</td></tr><tr><td>filesystem</td><td align="right">system.filesystem.total</td><td align="center">磁盘总大小</td></tr><tr><td>filesystem</td><td align="right">system.filesystem.used.pct</td><td align="center">磁盘使用率</td></tr><tr><td>filesystem</td><td align="right">system.filesystem.used.bytes</td><td align="center">磁盘使用大小</td></tr><tr><td>filesystem</td><td align="right">system.filesystem.used.bytes</td><td align="center">磁盘使用大小</td></tr></tbody></table><h3 id="增加主机分组，并在grafana引用"><a href="#增加主机分组，并在grafana引用" class="headerlink" title="增加主机分组，并在grafana引用"></a>增加主机分组，并在grafana引用</h3><pre><code>[root@bj-ops3 metricbeat]# grep -Ev &#39;#|^$&#39; metricbeat.yml metricbeat.config.modules:  path: ${path.config}/modules.d/*.yml  reload.enabled: falsesetup.template.settings:  index.number_of_shards: 1  index.codec: best_compressionname: 192.168.1.1fields:  group: OPSsetup.kibana:  host: &quot;localhost:5602&quot;output.elasticsearch:  hosts: [&quot;192.168.1.1:29200&quot;]</code></pre><h2 id="grafana配置"><a href="#grafana配置" class="headerlink" title="grafana配置"></a>grafana配置</h2><p><img src="https://owelinux.github.io/images/2018-07-28-article10-linux-metricbeat-diskio/mericbeat_group.png" alt></p><h3 id="绘图模板"><a href="#绘图模板" class="headerlink" title="绘图模板"></a>绘图模板</h3><p><a href="https://grafana.com/dashboards/7225" target="_blank" rel="noopener">system-metrics</a></p><h3 id="效果如下图"><a href="#效果如下图" class="headerlink" title="效果如下图"></a>效果如下图</h3><p><img src="https://owelinux.github.io/images/2018-07-28-article10-linux-metricbeat-diskio/system_merticbeat.png" alt></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><blockquote><ul><li><a href="https://www.elastic.co/cn/products/beats/metricbeat" target="_blank" rel="noopener">https://www.elastic.co/cn/products/beats/metricbeat</a></li><li><a href="https://www.elastic.co/guide/en/beats/metricbeat/current/exported-fields-system.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/metricbeat/current/exported-fields-system.html</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux 监控 metricbeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令lsof详解</title>
      <link href="/archives/b85c2d0.html"/>
      <url>/archives/b85c2d0.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="linux常用命令lsof详解"><a href="#linux常用命令lsof详解" class="headerlink" title="linux常用命令lsof详解"></a>linux常用命令lsof详解</h1><h2 id="lsof-简介"><a href="#lsof-简介" class="headerlink" title="lsof 简介"></a>lsof 简介</h2><p>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接 和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p><p>可以列出被进程所打开的文件的信息。被打开的文件可以是：</p><blockquote><ul><li>1.普通的文件</li><li>2.目录</li><li>3.网络文件系统的文件</li><li>4.字符设备文件</li><li>5.(函数)共享库</li><li>6.管道，命名管道</li><li>7.符号链接</li><li>8.底层的socket字流，网络socket，unix域名socket</li><li>9.在linux里面，大部分的东西都是被当做文件的…..还有其他很多</li></ul></blockquote><h2 id="lsof-常用参数"><a href="#lsof-常用参数" class="headerlink" title="lsof 常用参数"></a>lsof 常用参数</h2><blockquote><ul><li>lsof filename 显示打开指定文件的所有进程</li><li>lsof -a 表示两个参数都必须满足时才显示结果</li><li>lsof -c string 显示COMMAND列中包含指定字符的进程所有打开的文件</li><li>lsof -u username 显示所属user进程打开的文件</li><li>lsof -g gid 显示归属gid的进程情况</li><li>lsof +d /DIR/ 显示目录下被进程打开的文件</li><li>lsof +D /DIR/ 同上，但是会搜索目录下的所有目录，时间相对较长</li><li>lsof -d FD 显示指定文件描述符的进程</li><li>lsof -n 不将IP转换为hostname，缺省是不加上-n参数</li><li>lsof -i 用以显示符合条件的进程情况</li><li>lsof -i[46] [protocol][@hostname|hostaddr][:service|port]</li><li>lsof +L/-L 打开或关闭文件的连结数计算，当+L没有指定时，所有的连结数都会显示(默认)；若+L后指定数字，则只要连结数小于该数字的信息会显示；连结数会显示在NLINK列。<br>例如：+L1将显示没有unlinked的文件信息；+aL1，则显示指定文件系统所有unlinked的文件信息。-L 默认参数，其后不能跟数字，将不显示连结数信息lsof +L1</li></ul></blockquote><h2 id="lsof-使用实例"><a href="#lsof-使用实例" class="headerlink" title="lsof 使用实例"></a>lsof 使用实例</h2><h3 id="1-列出所有打开的文件"><a href="#1-列出所有打开的文件" class="headerlink" title="1.列出所有打开的文件:"></a>1.列出所有打开的文件:</h3><pre><code>lsof备注: 如果不加任何参数，就会打开所有被打开的文件，建议加上一下参数来具体定位</code></pre><h3 id="2-查看谁正在使用某个文件"><a href="#2-查看谁正在使用某个文件" class="headerlink" title="2. 查看谁正在使用某个文件"></a>2. 查看谁正在使用某个文件</h3><pre><code>lsof   /filepath/file</code></pre><h3 id="3-递归查看某个目录的文件信息"><a href="#3-递归查看某个目录的文件信息" class="headerlink" title="3.递归查看某个目录的文件信息"></a>3.递归查看某个目录的文件信息</h3><pre><code>lsof +D /filepath/filepath2/备注: 使用了+D，对应目录下的所有子目录和文件都会被列出</code></pre><h3 id="4-比使用-D选项，遍历查看某个目录的所有文件信息-的方法"><a href="#4-比使用-D选项，遍历查看某个目录的所有文件信息-的方法" class="headerlink" title="4. 比使用+D选项，遍历查看某个目录的所有文件信息 的方法"></a>4. 比使用+D选项，遍历查看某个目录的所有文件信息 的方法</h3><pre><code>lsof | grep ‘/filepath/filepath2/’</code></pre><h3 id="5-列出某个用户打开的文件信息"><a href="#5-列出某个用户打开的文件信息" class="headerlink" title="5. 列出某个用户打开的文件信息"></a>5. 列出某个用户打开的文件信息</h3><pre><code>lsof  -u username</code></pre><h3 id="6-列出某个程序所打开的文件信息"><a href="#6-列出某个程序所打开的文件信息" class="headerlink" title="6. 列出某个程序所打开的文件信息"></a>6. 列出某个程序所打开的文件信息</h3><pre><code>lsof -c mysql备注: -c 选项将会列出所有以mysql开头的程序的文件，其实你也可以写成 lsof | grep mysql, 但是第一种方法明显比第二种方法要少打几个字符了</code></pre><h3 id="7-列出多个程序多打开的文件信息"><a href="#7-列出多个程序多打开的文件信息" class="headerlink" title="7. 列出多个程序多打开的文件信息"></a>7. 列出多个程序多打开的文件信息</h3><pre><code>lsof -c mysql -c apache</code></pre><h3 id="8-列出某个用户以及某个程序所打开的文件信息"><a href="#8-列出某个用户以及某个程序所打开的文件信息" class="headerlink" title="8. 列出某个用户以及某个程序所打开的文件信息"></a>8. 列出某个用户以及某个程序所打开的文件信息</h3><pre><code>lsof -u test -c mysql</code></pre><h3 id="9-列出除了某个用户外的被打开的文件信息"><a href="#9-列出除了某个用户外的被打开的文件信息" class="headerlink" title="9. 列出除了某个用户外的被打开的文件信息"></a>9. 列出除了某个用户外的被打开的文件信息</h3><pre><code>lsof   -u ^root备注：^这个符号在用户名之前，将会把是root用户打开的进程不让显示</code></pre><h3 id="10-通过某个进程号显示该进行打开的文件"><a href="#10-通过某个进程号显示该进行打开的文件" class="headerlink" title="10. 通过某个进程号显示该进行打开的文件"></a>10. 通过某个进程号显示该进行打开的文件</h3><pre><code>lsof -p 1</code></pre><h3 id="11-列出多个进程号对应的文件信息"><a href="#11-列出多个进程号对应的文件信息" class="headerlink" title="11. 列出多个进程号对应的文件信息"></a>11. 列出多个进程号对应的文件信息</h3><pre><code>lsof -p 123,456,789</code></pre><h3 id="12-列出除了某个进程号，其他进程号所打开的文件信息"><a href="#12-列出除了某个进程号，其他进程号所打开的文件信息" class="headerlink" title="12. 列出除了某个进程号，其他进程号所打开的文件信息"></a>12. 列出除了某个进程号，其他进程号所打开的文件信息</h3><pre><code>lsof -p ^1</code></pre><h3 id="13-列出所有的网络连接"><a href="#13-列出所有的网络连接" class="headerlink" title="13 . 列出所有的网络连接"></a>13 . 列出所有的网络连接</h3><pre><code>lsof -i</code></pre><h3 id="14-列出所有tcp-网络连接信息"><a href="#14-列出所有tcp-网络连接信息" class="headerlink" title="14. 列出所有tcp 网络连接信息"></a>14. 列出所有tcp 网络连接信息</h3><pre><code>lsof  -i tcp</code></pre><h3 id="15-列出所有udp网络连接信息"><a href="#15-列出所有udp网络连接信息" class="headerlink" title="15. 列出所有udp网络连接信息"></a>15. 列出所有udp网络连接信息</h3><pre><code>lsof  -i udp</code></pre><h3 id="16-列出谁在使用某个端口"><a href="#16-列出谁在使用某个端口" class="headerlink" title="16. 列出谁在使用某个端口"></a>16. 列出谁在使用某个端口</h3><pre><code>lsof -i:3306</code></pre><h3 id="17-列出谁在使用某个特定的udp端口"><a href="#17-列出谁在使用某个特定的udp端口" class="headerlink" title="17. 列出谁在使用某个特定的udp端口"></a>17. 列出谁在使用某个特定的udp端口</h3><pre><code>lsof -i udp:55lsof -i tcp:80</code></pre><h3 id="18-列出某个用户的所有活跃的网络端口"><a href="#18-列出某个用户的所有活跃的网络端口" class="headerlink" title="18. 列出某个用户的所有活跃的网络端口"></a>18. 列出某个用户的所有活跃的网络端口</h3><pre><code>lsof  -a -u test -i</code></pre><h3 id="19-列出所有网络文件系统"><a href="#19-列出所有网络文件系统" class="headerlink" title="19. 列出所有网络文件系统"></a>19. 列出所有网络文件系统</h3><pre><code>lsof -N</code></pre><h3 id="20-域名socket文件"><a href="#20-域名socket文件" class="headerlink" title="20.域名socket文件"></a>20.域名socket文件</h3><pre><code>lsof -u</code></pre><h3 id="21-某个用户组所打开的文件信息"><a href="#21-某个用户组所打开的文件信息" class="headerlink" title="21.某个用户组所打开的文件信息"></a>21.某个用户组所打开的文件信息</h3><pre><code>lsof -g 5555</code></pre><h3 id="22-根据文件描述列出对应的文件信息"><a href="#22-根据文件描述列出对应的文件信息" class="headerlink" title="22. 根据文件描述列出对应的文件信息"></a>22. 根据文件描述列出对应的文件信息</h3><pre><code>lsof -d description(like 2)</code></pre><h3 id="23-根据文件描述范围列出文件信息"><a href="#23-根据文件描述范围列出文件信息" class="headerlink" title="23. 根据文件描述范围列出文件信息"></a>23. 根据文件描述范围列出文件信息</h3><pre><code>lsof -d 2-3</code></pre><h3 id="24-搜索打开的网络连接"><a href="#24-搜索打开的网络连接" class="headerlink" title="24.搜索打开的网络连接"></a>24.搜索打开的网络连接</h3><pre><code>lsof –i@10.65.64.23</code></pre><h3 id="25-寻找本地断开的打开文件"><a href="#25-寻找本地断开的打开文件" class="headerlink" title="25.寻找本地断开的打开文件"></a>25.寻找本地断开的打开文件</h3><pre><code>lsof –a +L1 /data </code></pre><h3 id="26-恢复删除的文件"><a href="#26-恢复删除的文件" class="headerlink" title="26.恢复删除的文件"></a>26.恢复删除的文件</h3><pre><code>a.使用lsof来查看当前是否有进程打开/var/logmessages文件，如下：  # lsof |grep /var/log/messages syslogd   1283      root    2w      REG        3,3  5381017    1773647 /var/log/messages (deleted)  PID 1283（syslogd）打开文件的文件描述符为 2b.我们可以在 /proc/1283/fd/2 （fd下的每个以数字命名的文件表示进程对应的文件描述符）中查看相应的信息，如下：  # head -n 10 /proc/1283/fd/2 Aug  4 13:50:15 holmes86 syslogd 1.4.1: restart. Aug  4 13:50:15 holmes86 kernel: klogd 1.4.1, log source = /proc/kmsg started. Aug  4 13:50:15 holmes86 kernel: Linux version 2.6.22.1-8 (root@everestbuilder.linux-ren.org ) (gcc version 4.2.0) #1 SMP Wed Jul 18 11:18:32 EDT 2007 Aug  4 13:50:15 holmes86 kernel: BIOS-provided physical RAM map: Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 0000000000000000 - 000000000009f000 (usable) Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 000000000009f000 - 00000000000a0000 (reserved) Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 0000000000100000 - 000000001f7d3800 (usable) Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 000000001f7d3800 - 0000000020000000 (reserved) Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 00000000e0000000 - 00000000f0007000 (reserved) Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 00000000f0008000 - 00000000f000c000 (reserved)  /proc/1283/fd/2 文件内容就是删除数据中的信息c.使用 I/O 重定向将其复制到文件中，如:  # cat /proc/1283/fd/2 &gt; /var/log/messages   对于许多应用程序，尤其是日志文件和数据库，这种恢复删除文件的方法非常有用。在 Solaris 中查找删除的文件 # lsof -a -p 8663 -d ^txtCOMMAND  PID   USER   FD   TYPE        DEVICE SIZE/OFF    NODE NAMEhttpd   8663 nobody  cwd   VDIR         136,8     1024       2 /httpd   8663 nobody    0r  VCHR          13,2          6815752 /devices/pseudo/mm@0:nullhttpd   8663 nobody    1w  VCHR          13,2          6815752 /devices/pseudo/mm@0:nullhttpd   8663 nobody    2w  VREG         136,8      185  145465 / (/dev/dsk/c0t0d0s0)httpd   8663 nobody    4r  DOOR                    0t0      58 /var/run/name_service_door                        (door to nscd[81]) (FA:-&gt;0x30002b156c0)httpd   8663 nobody   15w  VREG         136,8      185  145465 / (/dev/dsk/c0t0d0s0)httpd   8663 nobody   16u  IPv4 0x300046d27c0      0t0     TCP *:80 (LISTEN)httpd   8663 nobody   17w  VREG         136,8        0  145466                                                          /var/apache/logs/access_loghttpd   8663 nobody   18w  VREG         281,3        0 9518013 /var/run (swap) 使用 -a 和 -d 参数对输出进行筛选，以排除代码程序段，&quot;^&quot;是取反的意思。Name 列显示出，其中的两个文件（FD 2 和 15）使用磁盘名代替了文件名，并且它们的类型为 VREG（常规文件）。在 Solaris 中，删除的文件将显示文件所在的磁盘的名称。通过这个线索，就可以知道该 FD 指向一个删除的文件。实际上，查看 /proc/8663/fd/15 就可以得到所要查找的数据。</code></pre><h3 id="27-lsof-修改句柄限制"><a href="#27-lsof-修改句柄限制" class="headerlink" title="27.lsof 修改句柄限制"></a>27.lsof 修改句柄限制</h3><pre><code># lsof -n|awk &#39;{print $2}&#39;|sort|uniq -c |sort -nr|more           131 24204           57 24244           57 24231           56 24264  其中第一列是打开的文件句柄数量，第二行是进程号。得到进程号后，我们可以通过ps命令得到进程的详细内容。#ps -aef|grep 24204   mysql    24204 24162 99 16:15 ?        00:24:25 /usr/sbin/mysqld  查看得知是mysql进程打开最多文件句柄数量。但是他目前只打开了131个文件句柄数量，远远底于系统默认值1024。但是如果系统并发特别大，尤其是squid服务器，很有可能会超过1024。这时候就必须要调整系统参数，以适应应用变化。Linux关于打开文件句柄数量，有硬性限制和软性限制。可以通过ulimit来设定这两个参数。方法如下，以root用户运行以下命令：#ulimit -HSn 4096  </code></pre><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><blockquote><ul><li><a href="http://czmmiao.iteye.com/blog/1734384" target="_blank" rel="noopener">http://czmmiao.iteye.com/blog/1734384</a></li><li><a href="https://blog.csdn.net/kozazyh/article/details/5495532" target="_blank" rel="noopener">https://blog.csdn.net/kozazyh/article/details/5495532</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prometheus监控之snmp流量采集</title>
      <link href="/archives/58e5c53a.html"/>
      <url>/archives/58e5c53a.html</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h2 id="下载并运行prometheus"><a href="#下载并运行prometheus" class="headerlink" title="下载并运行prometheus"></a>下载并运行prometheus</h2><pre><code>wget https://github.com/prometheus/prometheus/releases/download/v2.3.2/prometheus-2.3.2.linux-amd64.tar.gztar -zxvf prometheus-2.3.2.linux-amd64.tar.gzmv prometheus-2.3.2.linux-amd64 prometheus</code></pre><h2 id="配置prometheus监控本身"><a href="#配置prometheus监控本身" class="headerlink" title="配置prometheus监控本身"></a>配置prometheus监控本身</h2><pre><code>global:  scrape_interval:     15s # By default, scrape targets every 15 seconds.  # Attach these labels to any time series or alerts when communicating with  # external systems (federation, remote storage, Alertmanager).  external_labels:    monitor: &#39;codelab-monitor&#39;# A scrape configuration containing exactly one endpoint to scrape:# Here it&#39;s Prometheus itself.scrape_configs:  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.  - job_name: &#39;prometheus&#39;    # Override the global default and scrape targets from this job every 5 seconds.    scrape_interval: 5s    static_configs:      - targets: [&#39;localhost:9090&#39;]</code></pre><h3 id="启动prometheus"><a href="#启动prometheus" class="headerlink" title="启动prometheus"></a>启动prometheus</h3><pre><code>./prometheus --config.file=prometheus.yml</code></pre><h3 id="打开浏览器验证"><a href="#打开浏览器验证" class="headerlink" title="打开浏览器验证"></a>打开浏览器验证</h3><p><a href="http://localhost:9090/graph" target="_blank" rel="noopener">http://localhost:9090/graph</a></p><h2 id="配置写数据到es"><a href="#配置写数据到es" class="headerlink" title="配置写数据到es"></a>配置写数据到es</h2><h3 id="下载prometheusbeat"><a href="#下载prometheusbeat" class="headerlink" title="下载prometheusbeat"></a>下载prometheusbeat</h3><pre><code>mkdir -p ${GOPATH}/github.com/infonova/prometheusbeatcd ${GOPATH}/github.com/infonova/prometheusbeatgit clone https://github.com/infonova/prometheusbeatmake package./prometheusbeat -c prometheusbeat.yml -e -d &quot;*&quot;# 查看服务是否启动ss -lntp | grep 8088LISTEN     0      65535                     *:8088                     *:*      users:((&quot;prometheusbeat&quot;,29237,6))</code></pre><h3 id="配置prometheus输入es"><a href="#配置prometheus输入es" class="headerlink" title="配置prometheus输入es"></a>配置prometheus输入es</h3><pre><code>#remote_write:#  - url: &quot;http://localhost:9201/write&quot;remote_write:  - url: &quot;http://localhost:8088/prometheus&quot;</code></pre><h2 id="监控snmp"><a href="#监控snmp" class="headerlink" title="监控snmp"></a>监控snmp</h2><h3 id="安装snmp服务"><a href="#安装snmp服务" class="headerlink" title="安装snmp服务"></a>安装snmp服务</h3><pre><code>yum -y install net-snmp*防火墙#prometheus-A INPUT -s 192.168.1.0/23 -p tcp -m state --state NEW -m tcp --dport 9100 -j ACCEPT-A INPUT -s 192.168.1.0/23 -p tcp -m state --state NEW -m tcp --dport 9116 -j ACCEPT-A INPUT -s 192.168.1.0/23 -p udp -m state --state NEW -m udp --dport 161 -j ACCEPT</code></pre><h3 id="安装snmp插件"><a href="#安装snmp插件" class="headerlink" title="安装snmp插件"></a>安装snmp插件</h3><pre><code>wget https://github.com/prometheus/snmp_exporter/releases/download/v0.11.0/snmp_exporter-0.11.0.linux-amd64.tar.gztar -zxvf snmp_exporter-0.11.0.linux-amd64.tar.gz./snmp_exporter </code></pre><h3 id="配置prometheus的snmp"><a href="#配置prometheus的snmp" class="headerlink" title="配置prometheus的snmp"></a>配置prometheus的snmp</h3><pre><code>  - job_name: &#39;snmp&#39;    static_configs:      - targets:        - 192.168.1.1        labels:          tag: aliyun-hb2-10    metrics_path: /snmp    params:      module: [if_mib]    relabel_configs:      - source_labels: [__address__]        target_label: __param_target      - source_labels: [__param_target]        target_label: instance      - target_label: __address__        replacement: 191.168.1.1:9116</code></pre><h3 id="验证snmp监控数据"><a href="#验证snmp监控数据" class="headerlink" title="验证snmp监控数据"></a>验证snmp监控数据</h3><pre><code>curl &#39;http://localhost:9116/snmp?target=192.168.1.1&#39; </code></pre><h3 id="snmp指标"><a href="#snmp指标" class="headerlink" title="snmp指标"></a>snmp指标</h3><p>针对普通网络设备的端口，MIB的相关定义是Interface组，主要管理如下信息:<br>ifIndex 端口索引号<br>ifDescr 端口描述<br>ifType 端口类型<br>ifMtu 最大传输包字节数<br>ifSpeed 端口速度<br>ifPhysAddress 物理地址<br>ifOperStatus 操作状态<br>ifLastChange 上次状态更新时间<br><em>ifInOctets 输入字节数 </em>ifInUcastPkts 输入非广播包数<br><em>ifInNUcastPkts 输入广播包数 </em>ifInDiscards 输入包丢弃数<br><em>ifInErrors 输入包错误数 </em>ifInUnknownProtos 输入未知协议包数<br><em>ifOutOctets 输出字节数 </em>ifOutUcastPkts 输出非广播包数<br><em>ifOutNUcastPkts 输出广播包数 </em>ifOutDiscards 输出包丢弃数<br><em>ifOutErrors 输出包错误数<br>ifOutQLen 输出队长<br>其中，</em>号标识的是与网络流量有关的信息。<br>1、获取CISCO2900端口1的上行总流量<br>snmpwalk -v 1 -c public 192.168.1.254 IF-MIB::ifInOctets.1<br>返回结果<br>IF-MIB::ifInOctets.1 = Counter32: 4861881<br>2、五秒后再获取一次<br>snmpwalk -v 1 -c public 192.168.1.254 IF-MIB::ifInOctets.1<br>返回结果<br>IF-MIB::ifInOctets.1 = Counter32: 4870486<br>3、计算结果<br>（后值48704863-前值4861881）/ 5＝1721b/s （应该是BYTE）</p><h3 id="配置snmp告警指标"><a href="#配置snmp告警指标" class="headerlink" title="配置snmp告警指标"></a>配置snmp告警指标</h3><pre><code>cat rules/traffic.yml groups:  - name: traffic    rules:    - record: traffic_out_bps       expr: (ifHCOutOctets - (ifHCOutOctets offset 1m)) *8/60      #expr: sum by (tag, job, instance, ifIndex) ((ifHCOutOctets - (ifHCOutOctets offset 1m)) *8/60)      #labels:      #  instance: &quot;{{ $labels.instance }}&quot;      #  ifIndex: &quot;{{ $labels.ifIndex }}&quot;    - record: traffic_in_bps      expr: (ifHCInOctets - (ifHCInOctets offset 1m)) *8/60    ### alert    - alert: BeijingProxyTrafficOutProblem      expr: (sum by(tag) (avg_over_time(traffic_out_bps{ifIndex=~&quot;7|9&quot;, tag=~&quot;beijing.+&quot;}[5m]) /1024/1024)) &gt;= 200      for: 2m      labels:        level: CRITICAL      annotations:        message: &quot;traffic out has problem (network: {{ $labels.tag }}, current: {{ $value }}Mbps)&quot;    - alert: BeijingProxyTrafficInProblem      expr: (sum by(tag) (avg_over_time(traffic_in_bps{ifIndex=~&quot;7|9&quot;, tag=~&quot;beijing.+&quot;}[5m]) /1024/1024)) &gt;= 500      for: 2m      labels:        level: CRITICAL      annotations:        message: &quot;traffic in has problem (network: {{ $labels.tag }}, current: {{ $value }}Mbps)&quot;    - alert: BeijingProxyWanTrafficOutProblem      expr: (sum by(tag) (avg_over_time(traffic_out_bps{ifIndex=~&quot;6|8&quot;, tag=~&quot;beijing.+&quot;}[5m]) /1024/1024)) &gt;= 30      for: 2m      labels:        level: CRITICAL      annotations:        message: &quot;traffic out bond0 has problem (network: {{ $labels.tag }}, current: {{ $value }}Mbps)&quot;    - alert: BeijingProxyWanTrafficInProblem      expr: (sum by(tag) (avg_over_time(traffic_in_bps{ifIndex=~&quot;6|8&quot;, tag=~&quot;beijing.+&quot;}[5m]) /1024/1024)) &gt;= 30      for: 2m      labels:        level: CRITICAL      annotations:        message: &quot;traffic in bond0 has problem (network: {{ $labels.tag }}, current: {{ $value }}Mbps)&quot;    - alert: AliyunProxyTrafficOutProblem      expr: (sum by(tag) (avg_over_time(traffic_out_bps{ifIndex=&quot;2&quot;, tag=~&quot;aliyun.+&quot;}[5m]) /1024/1024)) &gt; 200      for: 2m      labels:        level: CRITICAL      annotations:        message: &quot;traffic out has problem (network: {{ $labels.tag }}, current: {{ $value }}Mbps)&quot;    - alert: AliyunProxyTrafficInProblem      expr: (sum by(tag) (avg_over_time(traffic_in_bps{ifIndex=&quot;2&quot;, tag=~&quot;aliyun.+&quot;}[5m]) /1024/1024)) &gt; 200      for: 2m      labels:        level: CRITICAL      annotations:        message: &quot;traffic in has problem (network: {{ $labels.tag }}, current: {{ $value }}Mbps)&quot;</code></pre><h3 id="snmp-传输到granfan"><a href="#snmp-传输到granfan" class="headerlink" title="snmp 传输到granfan"></a>snmp 传输到granfan</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/infonova/prometheusbeat" target="_blank" rel="noopener">https://github.com/infonova/prometheusbeat</a><br><a href="https://prometheus.io" target="_blank" rel="noopener">https://prometheus.io</a><br><a href="https://github.com/prometheus/snmp_exporter" target="_blank" rel="noopener">https://github.com/prometheus/snmp_exporter</a><br><a href="https://blog.csdn.net/huithe/article/details/7588673" target="_blank" rel="noopener">https://blog.csdn.net/huithe/article/details/7588673</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus snmp 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Access Log日志统计分析常用命令</title>
      <link href="/archives/9e1be8b6.html"/>
      <url>/archives/9e1be8b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-日志格式"><a href="#Nginx-日志格式" class="headerlink" title="Nginx 日志格式"></a>Nginx 日志格式</h2><pre><code>log_format  main  &#39;$host $remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;        &#39;$status $body_bytes_sent $upstream_response_time &quot;$http_referer&quot; &#39;        &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$uid_got&quot; &quot;$uid_set&quot; &quot;$http_x_tencent_ua&quot; &quot;$upstream_addr&quot; &quot;$upstream_http_x_cached_from&quot; &quot;$upstream_http_cache_control&quot;&#39;;</code></pre><h2 id="IP-相关统计"><a href="#IP-相关统计" class="headerlink" title="IP 相关统计"></a>IP 相关统计</h2><h3 id="统计IP访问量"><a href="#统计IP访问量" class="headerlink" title="统计IP访问量"></a>统计IP访问量</h3><pre><code>awk &#39;{print $2}&#39; access.log | sort -n | uniq | wc -l</code></pre><h3 id="查看某一时间段的IP访问量-4-5点"><a href="#查看某一时间段的IP访问量-4-5点" class="headerlink" title="查看某一时间段的IP访问量(4-5点)"></a>查看某一时间段的IP访问量(4-5点)</h3><pre><code>grep &quot;07/Apr/2017:0[4-5]&quot; access.log | awk &#39;{print $1}&#39; | sort | uniq -c| sort -nr | wc -l</code></pre><h3 id="查看访问最频繁的前100个IP"><a href="#查看访问最频繁的前100个IP" class="headerlink" title="查看访问最频繁的前100个IP"></a>查看访问最频繁的前100个IP</h3><pre><code>awk &#39;{print $2}&#39; access.log | sort -n |uniq -c | sort -rn | head -n 100</code></pre><h3 id="查看访问100次以上的IP"><a href="#查看访问100次以上的IP" class="headerlink" title="查看访问100次以上的IP"></a>查看访问100次以上的IP</h3><pre><code>awk &#39;{print $2}&#39; access.log | sort -n |uniq -c |awk &#39;{if($1 &gt;100) print $0}&#39;|sort -rn</code></pre><h3 id="查询某个IP的详细访问情况-按访问频率排序"><a href="#查询某个IP的详细访问情况-按访问频率排序" class="headerlink" title="查询某个IP的详细访问情况,按访问频率排序"></a>查询某个IP的详细访问情况,按访问频率排序</h3><pre><code>grep &#39;104.217.108.66&#39; access.log |awk &#39;{print $7}&#39;|sort |uniq -c |sort -rn |head -n 100</code></pre><h2 id="页面访问统计"><a href="#页面访问统计" class="headerlink" title="页面访问统计"></a>页面访问统计</h2><h3 id="查看访问最频的页面-TOP100"><a href="#查看访问最频的页面-TOP100" class="headerlink" title="查看访问最频的页面(TOP100)"></a>查看访问最频的页面(TOP100)</h3><pre><code>awk &#39;{print $7}&#39; access.log | sort |uniq -c | sort -rn | head -n 100</code></pre><h3 id="查看访问最频的页面-排除php页面】-TOP100"><a href="#查看访问最频的页面-排除php页面】-TOP100" class="headerlink" title="查看访问最频的页面([排除php页面】(TOP100)"></a>查看访问最频的页面([排除php页面】(TOP100)</h3><pre><code>grep -v &quot;.php&quot;  access.log | awk &#39;{print $7}&#39; | sort |uniq -c | sort -rn | head -n 100</code></pre><h3 id="查看页面访问次数超过100次的页面"><a href="#查看页面访问次数超过100次的页面" class="headerlink" title="查看页面访问次数超过100次的页面"></a>查看页面访问次数超过100次的页面</h3><pre><code>cat access.log | cut -d &#39; &#39; -f 7 | sort |uniq -c | awk &#39;{if ($1 &gt; 100) print $0}&#39; | less</code></pre><h3 id="查看最近1000条记录，访问量最高的页面"><a href="#查看最近1000条记录，访问量最高的页面" class="headerlink" title="查看最近1000条记录，访问量最高的页面"></a>查看最近1000条记录，访问量最高的页面</h3><pre><code>tail -1000 access.log |awk &#39;{print $7}&#39;|sort|uniq -c|sort -nr|less</code></pre><h2 id="每秒请求量统计"><a href="#每秒请求量统计" class="headerlink" title="每秒请求量统计"></a>每秒请求量统计</h2><h3 id="统计每秒的请求数-top100的时间点-精确到秒"><a href="#统计每秒的请求数-top100的时间点-精确到秒" class="headerlink" title="统计每秒的请求数,top100的时间点(精确到秒)"></a>统计每秒的请求数,top100的时间点(精确到秒)</h3><pre><code>awk &#39;{print $5}&#39; access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100</code></pre><h2 id="每分钟请求量统计"><a href="#每分钟请求量统计" class="headerlink" title="每分钟请求量统计"></a>每分钟请求量统计</h2><h3 id="统计每分钟的请求数-top100的时间点-精确到分钟"><a href="#统计每分钟的请求数-top100的时间点-精确到分钟" class="headerlink" title="统计每分钟的请求数,top100的时间点(精确到分钟)"></a>统计每分钟的请求数,top100的时间点(精确到分钟)</h3><pre><code>awk &#39;{print $5}&#39; access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100</code></pre><h2 id="每小时请求量统计"><a href="#每小时请求量统计" class="headerlink" title="每小时请求量统计"></a>每小时请求量统计</h2><h3 id="统计每小时的请求数-top100的时间点-精确到小时"><a href="#统计每小时的请求数-top100的时间点-精确到小时" class="headerlink" title="统计每小时的请求数,top100的时间点(精确到小时)"></a>统计每小时的请求数,top100的时间点(精确到小时)</h3><pre><code>awk &#39;{print $5}&#39; access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100</code></pre><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>在nginx log中最后一个字段加入$request_time</p><h3 id="列出传输时间超过-3-秒的页面，显示前20条"><a href="#列出传输时间超过-3-秒的页面，显示前20条" class="headerlink" title="列出传输时间超过 3 秒的页面，显示前20条"></a>列出传输时间超过 3 秒的页面，显示前20条</h3><pre><code>cat access.log|awk &#39;($NF &gt; 3){print $7}&#39;|sort -n|uniq -c|sort -nr|head -20</code></pre><h3 id="列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条"><a href="#列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条" class="headerlink" title="列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条"></a>列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条</h3><pre><code>cat access.log|awk &#39;($NF &gt; 1 &amp;&amp;  $7~/\.php/){print $7}&#39;|sort -n|uniq -c|sort -nr|head -100</code></pre><h2 id="蜘蛛抓取统计"><a href="#蜘蛛抓取统计" class="headerlink" title="蜘蛛抓取统计"></a>蜘蛛抓取统计</h2><h3 id="统计蜘蛛抓取次数"><a href="#统计蜘蛛抓取次数" class="headerlink" title="统计蜘蛛抓取次数"></a>统计蜘蛛抓取次数</h3><pre><code>grep &#39;Baiduspider&#39; access.log |wc -l</code></pre><h3 id="统计蜘蛛抓取404的次数"><a href="#统计蜘蛛抓取404的次数" class="headerlink" title="统计蜘蛛抓取404的次数"></a>统计蜘蛛抓取404的次数</h3><pre><code>grep &#39;Baiduspider&#39; access.log |grep &#39;404&#39; | wc -l</code></pre><h2 id="TCP连接统计"><a href="#TCP连接统计" class="headerlink" title="TCP连接统计"></a>TCP连接统计</h2><h3 id="查看当前TCP连接数"><a href="#查看当前TCP连接数" class="headerlink" title="查看当前TCP连接数"></a>查看当前TCP连接数</h3><pre><code>netstat -tan | grep &quot;ESTABLISHED&quot; | grep &quot;:80&quot; | wc -l</code></pre><h3 id="用tcpdump嗅探80端口的访问看看谁最高"><a href="#用tcpdump嗅探80端口的访问看看谁最高" class="headerlink" title="用tcpdump嗅探80端口的访问看看谁最高"></a>用tcpdump嗅探80端口的访问看看谁最高</h3><pre><code>tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F&quot;.&quot; &#39;{print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4}&#39; | sort | uniq -c | sort -nr</code></pre><h2 id="脚本分析"><a href="#脚本分析" class="headerlink" title="脚本分析"></a>脚本分析</h2>]]></content>
      
      
      <categories>
          
          <category> linux运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志分析 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维必须熟悉的工具汇总</title>
      <link href="/archives/f25fecdf.html"/>
      <url>/archives/f25fecdf.html</url>
      
        <content type="html"><![CDATA[<ul><li>操作系统：Centos※, Ubuntu, Redhat※, suse，Freebsd</li><li>网站服务：Openresry(Nginx)※, Apache※, Lighttpd, Php※, Tomcat※, Resin</li><li>数据库：MySQL※, MariaDB，PostgreSQL, InfluxDB, Oracle</li><li>DB中间件：MyCat, Amoeba, MySQL-proxy</li><li>代理相关：Lvs+Keepalived, Haproxy(七层), Nginx（四层+七层）, Apache, Heartbeat, Squid（此行都是※）</li><li>网站缓存：Squid※, Nginx※, Varnish</li><li>NOSQL库：Memcached※,Memcachedb,TokyoTyrant※,MongoDB※,Cassandra※,Redis※,CouchDB, Codis, Pika</li><li>存储相关：Nfs※, Moosefs(mfs)※, Hadoop※, glusterfs※, Lustre, FastDFS</li><li>版本管理：svn※, git※</li><li>监控报警：Nagios※, Cacti※, Zabbix※, Munin, Hyperic, Mrtg, Graphite, smokping, Prometheus， Grafana</li><li>域名解析：Bind※, Powerdns, Dnsmasq※</li><li>同步软件:Rsync※,Inotify※,Sersync※,Drbd※,Csync2, Union,Lsyncd,Scp※</li><li>批量管理：Ssh+Rsync+Sersync※, Saltstack※, Expect※, Puppet※, Ansible, Cfengine</li><li>虚拟化：kvm※, Xen※, Docker, K8s</li><li>云计算：Openstack※, Docker, Cloudstack</li><li>内网软件：Iptables※, Zebra※, Iftraf, Ntop※, Tc※, Iftop, Traceroute, Jstack, Vmstat, Lsof, Sar, Iftop</li><li>邮件软件：Qmail, Posfix※, Sendmail</li><li>远程拨号：Openvpn※, Pptp, Openswan※, Ipip※</li><li>统一认证：Openldap(可结合微软活动目录)※</li><li>队列工具：ActiveMQ, RabbitMQ※, Metaq, MemcacheQ, Zeromq</li><li>打包发布：Mvn※, Ants※, Jenkins※, Svn</li><li>测试软件：Ab,Smokeping, Siege, JMeter, Webbench, LoadRunner, http_load（都是※）</li><li>日志相关：Syslog, Rsyslog, Awstats, Flume logstash scribe Kafka, Storm，ELK(Elasticsearch+Logstash+Kibana)</li><li>DB代理：Mysql-proxy, Amoeba（更多还是程序实现读写分离）</li><li>搜索软件：Sphinx,Xapian（大公司会自己开发类似百度的小规模内部搜索引擎）</li></ul><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul><li>以上所有软件参照老男孩老师整理归档，另外更新了最近几年工作中用的最多的。</li><li>带※的为最近几年用的比较多，可信任使用的。</li><li>需要了解具体，直接Google官方文档即可。</li><li>以上软件掌握带*的就行，万变不离其宗，做到举一反三。</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统调优指南(centos7.X)</title>
      <link href="/archives/b6b0fa45.html"/>
      <url>/archives/b6b0fa45.html</url>
      
        <content type="html"><![CDATA[<h2 id="关闭不必要的服务-如打印服务等"><a href="#关闭不必要的服务-如打印服务等" class="headerlink" title="关闭不必要的服务(如打印服务等)"></a>关闭不必要的服务(如打印服务等)</h2><pre><code>for owelinux in `chkconfig --list | grep &quot;3:on&quot; | awk &#39;{print $1}&#39;`; do chkconfig $owelinux off; donefor owelinux in crond network sshd rsyslog sysstat iptables; do chkconfig $owelinux on; done</code></pre><h2 id="关闭不需要的tty"><a href="#关闭不需要的tty" class="headerlink" title="关闭不需要的tty"></a>关闭不需要的tty</h2><pre><code>\cp /etc/securetty  /etc/securetty.bak&gt;/etc/securettyecho &quot;tty1&quot; &gt;&gt;/etc/securettyecho &quot;tty2&quot; &gt;&gt;/etc/securettyecho &quot;tty3&quot; &gt;&gt;/etc/securetty</code></pre><h2 id="调整linux-文件描述符大小"><a href="#调整linux-文件描述符大小" class="headerlink" title="调整linux 文件描述符大小"></a>调整linux 文件描述符大小</h2><pre><code>\cp /etc/security/limits.conf /etc/security/limits.conf.$(date +%F)ulimit -HSn 65535echo -ne &quot;* soft nofile 65535* hard nofile 65535&quot; &gt;&gt;/etc/security/limits.confecho &quot;ulimit -c unlimited&quot; &gt;&gt; /etc/profilesource /etc/profile</code></pre><h2 id="修改shell命令的history-记录个数和连接超时时间"><a href="#修改shell命令的history-记录个数和连接超时时间" class="headerlink" title="修改shell命令的history 记录个数和连接超时时间"></a>修改shell命令的history 记录个数和连接超时时间</h2><pre><code>echo &quot;export HISTCONTROL=ignorespace&quot; &gt;&gt;/etc/profileecho &quot;export HISTCONTROL=erasedups&quot; &gt;&gt;/etc/profileecho &quot;HISTSIZE=500&quot; &gt;&gt; /etc/profile#修改帐户TMOUT值，设置自动注销时间echo &quot;export TMOUT=300&quot; &gt;&gt;/etc/profileecho &quot;set autologout=300&quot; &gt;&gt;/etc/csh.cshrcsource /etc/profile</code></pre><h2 id="清空系统版本信息加入登录警告"><a href="#清空系统版本信息加入登录警告" class="headerlink" title="清空系统版本信息加入登录警告"></a>清空系统版本信息加入登录警告</h2><pre><code>&gt;/etc/motd&gt;/etc/issue&gt;/etc/redhat-releaseecho &quot;Authorized uses only. All activity may be monitored   and reported.&quot; &gt;&gt;/etc/motdecho &quot;Authorized uses only. All activity may be monitored   and reported.&quot; &gt;&gt; /etc/issueecho &quot;Authorized uses only. All activity may be monitored   and reported.&quot; &gt;&gt; /etc/issue.netchown root:root /etc/motd /etc/issue  /etc/issue.netchmod 644 /etc/motd /etc/issue  /etc/issue.net</code></pre><h2 id="优化内核TCP参数"><a href="#优化内核TCP参数" class="headerlink" title="优化内核TCP参数"></a>优化内核TCP参数</h2><pre><code>cat &gt;&gt;/etc/sysctl.conf&lt;&lt;EOFnet.ipv4.tcp_fin_timeout = 1net.ipv4.tcp_keepalive_time = 1200net.ipv4.tcp_mem = 94500000 915000000 927000000net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_timestamps = 0net.ipv4.tcp_synack_retries = 1net.ipv4.tcp_syn_retries = 1net.ipv4.tcp_tw_recycle = 1net.core.rmem_max = 16777216net.core.wmem_max = 16777216net.core.netdev_max_backlog = 262144net.ipv4.tcp_max_orphans = 3276800net.ipv4.tcp_max_syn_backlog = 262144net.core.wmem_default = 8388608net.core.rmem_default = 8388608EOF/sbin/sysctl -p</code></pre><h2 id="登录机器发邮件告警"><a href="#登录机器发邮件告警" class="headerlink" title="登录机器发邮件告警"></a>登录机器发邮件告警</h2><pre><code>yum -y install mailxcat &gt;&gt;/root/.bashrc &lt;&lt; EOFecho &#39;ALERT - Root Shell Access (Server Name) on:&#39; \`date\`\`who\`\`hostname\` | mail -s &quot;Alert:Root Access from \`who | cut -d &quot;(&quot; -f2 | cut -d &quot;)&quot; #-f1\`&quot; blue.yunwei@bluepay.asiaEOF</code></pre><h2 id="定时校正服务器时间"><a href="#定时校正服务器时间" class="headerlink" title="定时校正服务器时间"></a>定时校正服务器时间</h2><pre><code>echo &#39;0 * * * * /usr/sbin/ntpdate -u  0.cn.pool.ntp.org;/sbin/hwclock -w &gt; /dev/null 2&gt;&amp;1&#39; &gt;&gt; /var/spool/cron/root/usr/sbin/ntpdate -u  0.cn.pool.ntp.org;/sbin/hwclock -wsystemctl  restart crond</code></pre><h2 id="停止ipv6"><a href="#停止ipv6" class="headerlink" title="停止ipv6"></a>停止ipv6</h2><pre><code>echo 1 &gt; /proc/sys/net/ipv6/conf/all/disable_ipv6</code></pre><h2 id="修改yum源"><a href="#修改yum源" class="headerlink" title="修改yum源"></a>修改yum源</h2><pre><code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backupwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repoyum -y reinstall epel-releaseyum clean allyum makecache</code></pre><h2 id="关闭Selinux"><a href="#关闭Selinux" class="headerlink" title="关闭Selinux"></a>关闭Selinux</h2><pre><code>setenforce 0sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/&#39; /etc/selinux/config</code></pre><h2 id="安装必要的服务，更新系统软件"><a href="#安装必要的服务，更新系统软件" class="headerlink" title="安装必要的服务，更新系统软件"></a>安装必要的服务，更新系统软件</h2><pre><code>yum -y groupinstall &quot;Development tools&quot;yum -y install ntpdate sysstat lrzsz wget nmap tree curl  epel-release lsof nano bash-completion net-tools lsof vim-enhanced</code></pre><h2 id="ssh优化，加快连接速度"><a href="#ssh优化，加快连接速度" class="headerlink" title="ssh优化，加快连接速度"></a>ssh优化，加快连接速度</h2><pre><code>#1、配置空闲登出的超时间隔:#2、禁用   .rhosts 文件#3、禁用基于主机的认证#4、禁止   root 帐号通过 SSH   登录#5、用警告的   Banner#6、iptables防火墙处理 SSH 端口22123#7、修改 SSH   端口和限制 IP 绑定：#8、禁用空密码：#9、记录日志：mv /etc/ssh/ /etc/sshbakmkdir -p /application/toolscd /application/toolsyum -y install wget C gcc ccwget https://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-7.6p1.tar.gztar -zxf openssh-7.6p1.tar.gzcd openssh-7.6p1yum install -y zlib-devel openssl-devel pam pam-devel./configure --prefix=/usr --sysconfdir=/etc/ssh --without-zlib-version-check  --with-pamchmod 600 /etc/ssh/*_keymake -j4rpm -e --nodeps `rpm -qa | grep openssh`make installssh -Vcp contrib/redhat/sshd.init /etc/init.d/sshdchkconfig --add sshdmv /etc/ssh/sshd_config /etc/ssh/sshd_config_`date +%F`cat &gt;/etc/ssh/sshd_config&lt;&lt;EOFPort 22123PidFile /var/run/sshd.pidSyslogFacility AUTHLogLevel INFOLoginGraceTime 30PermitRootLogin noStrictModes yesMaxAuthTries 3MaxSessions 15#AllowUsers root lovelinuxPubkeyAuthentication yesAuthorizedKeysFile  .ssh/authorized_keysPasswordAuthentication yesPermitEmptyPasswords noChallengeResponseAuthentication yesGSSAPIAuthentication noGSSAPICleanupCredentials yesUsePAM noClientAliveInterval 0ClientAliveCountMax 3UseDNS noSubsystem   sftp    /usr/lib/ssh/sftp-serverCiphers aes128-ctr,aes192-ctr,aes256-ctrMacs    hmac-sha2-256,hmac-sha2-512EOFecho &quot;#save sshd messages also to sshd.log&quot; &gt;&gt;/etc/rsyslog.confecho &quot;local5.* /var/log/sshd.log&quot; &gt;&gt;/etc/rsyslog.confsystemctl restart rsyslogsystemctl stop sshd &amp;&amp; systemctl start sshdsystemctl reload sshd</code></pre><h2 id="删除系统不需要的用户和用户组"><a href="#删除系统不需要的用户和用户组" class="headerlink" title="删除系统不需要的用户和用户组"></a>删除系统不需要的用户和用户组</h2><pre><code>   for i in adm lp sync shutdown halt news uucp operator games gopher   do      userdel $i  2&gt;/dev/null   done &amp;&amp; action &quot;delete user: &quot; /bin/true || action &quot;delete user: &quot; /bin/false   for i in adm  news uucp games dip pppusers popusers slipusers   do      groupdel $i  2&gt;/dev/null   done</code></pre><h2 id="修改密码认证的复杂度，和过期时间"><a href="#修改密码认证的复杂度，和过期时间" class="headerlink" title="修改密码认证的复杂度，和过期时间"></a>修改密码认证的复杂度，和过期时间</h2><pre><code>mv /etc/pam.d/system-auth /etc/pam.d/system-auth_`date +%F`cat &gt;/etc/pam.d/system-auth&lt;&lt;EOF#%PAM-1.0# This file is auto-generated.# User changes will be destroyed the next time authconfig is run.auth        required      pam_env.soauth required pam_tally.so onerr=fail deny=6 unlock_time=1800auth        sufficient    pam_unix.so nullok try_first_passauth        requisite     pam_succeed_if.so uid &gt;= 500 quietauth        required      pam_deny.soauth    sufficient    /lib/security/pam_unix.so likeauth nullokaccount     required      pam_unix.soaccount     sufficient    pam_localuser.soaccount     sufficient    pam_succeed_if.so uid &lt; 500 quietaccount     required      pam_permit.sopassword    requisite     pam_cracklib.so try_first_pass retry=3  minlen=8 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtokpassword    required      pam_deny.sosession     optional      pam_keyinit.so revokesession     required      pam_limits.sosession     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uidsession     required      pam_unix.soetc/pam.d/system-authEOFcat &gt;/etc/pam.d/sshd&lt;&lt;EOF#%PAM-1.0#auth       required pam_google_authenticator.so nullokauth       required     pam_sepermit.soauth       substack     password-authauth       include      postlogin# Used with polkit to reauthorize users in remote sessions-auth      optional     pam_reauthorize.so prepareaccount    required     pam_nologin.soaccount    include      password-authpassword   include      password-auth# pam_selinux.so close should be the first session rulesession    required     pam_selinux.so closesession    required     pam_loginuid.so# pam_selinux.so open should only be followed by sessions to be executed in the user contextsession    required     pam_selinux.so open env_paramssession    required     pam_namespace.sosession    optional     pam_keyinit.so force revokesession    include      password-authsession    include      postlogin# Used with polkit to reauthorize users in remote sessions-session   optional     pam_reauthorize.so prepareEOF</code></pre><h2 id="使用noatime文件系统挂载选项"><a href="#使用noatime文件系统挂载选项" class="headerlink" title="使用noatime文件系统挂载选项"></a>使用noatime文件系统挂载选项</h2><h2 id="删除CentOS自带的sendmail，改用postfix"><a href="#删除CentOS自带的sendmail，改用postfix" class="headerlink" title="删除CentOS自带的sendmail，改用postfix"></a>删除CentOS自带的sendmail，改用postfix</h2><h2 id="增加SWAP分区大小（一般是内存的2倍）"><a href="#增加SWAP分区大小（一般是内存的2倍）" class="headerlink" title="增加SWAP分区大小（一般是内存的2倍）"></a>增加SWAP分区大小（一般是内存的2倍）</h2><pre><code>dd if=/dev/zero of=/mnt/swapfile bs=4M count=1024mkswap /mnt/swapfileswapon /mnt/swapfileecho &quot;/mnt/swapfile swap swap defaults 0 0&quot; &gt;&gt;/etc/fstabmount -afree -m | grep -i swap</code></pre><h2 id="使用iptables关闭不需要对外开放的端口"><a href="#使用iptables关闭不需要对外开放的端口" class="headerlink" title="使用iptables关闭不需要对外开放的端口"></a>使用iptables关闭不需要对外开放的端口</h2><pre><code>systemctl disable firewalldsystemctl stop firewalldyum -y install iptables-servicessystemctl start iptablessystemctl start ip6tablessystemctl enable iptablessystemctl enable ip6tablesiptables -Fiptables -A INPUT -i lo -j ACCEPTiptables -A INPUT -p tcp --dport 22123 -j ACCEPTiptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPTiptables -A INPUT -p icmp -j ACCEPTiptables -A INPUT -j DROPservice iptables save</code></pre><h2 id="启动系统审计服务"><a href="#启动系统审计服务" class="headerlink" title="启动系统审计服务"></a>启动系统审计服务</h2><pre><code>yum install audit*.* -ycat &gt;&gt;/etc/audit/audit.rules&lt;&lt;EOF-w /var/log/audit/ -k LOG_audit-w /etc/audit/ -p wa -k CFG_audit-w /etc/sysconfig/auditd -p wa -k CFG_auditd.conf-w /etc/libaudit.conf -p wa -k CFG_libaudit.conf-w /etc/audisp/ -p wa -k CFG_audisp-w /etc/cups/ -p wa -k CFG_cups-w /etc/init.d/cups -p wa -k CFG_initd_cups-w /etc/netlabel.rules -p wa -k CFG_netlabel.rules-w /etc/selinux/mls/ -p wa -k CFG_MAC_policy-w /usr/share/selinux/mls/ -p wa -k CFG_MAC_policy-w /etc/selinux/semanage.conf -p wa -k CFG_MAC_policy-w /usr/sbin/stunnel -p x-w /etc/security/rbac-self-test.conf -p wa -k CFG_RBAC_self_test-w /etc/aide.conf -p wa -k CFG_aide.conf-w /etc/cron.allow -p wa -k CFG_cron.allow-w /etc/cron.deny -p wa -k CFG_cron.deny-w /etc/cron.d/ -p wa -k CFG_cron.d-w /etc/cron.daily/ -p wa -k CFG_cron.daily-w /etc/cron.hourly/ -p wa -k CFG_cron.hourly-w /etc/cron.monthly/ -p wa -k CFG_cron.monthly-w /etc/cron.weekly/ -p wa -k CFG_cron.weekly-w /etc/crontab -p wa -k CFG_crontab-w /var/spool/cron/root -k CFG_crontab_root-w /etc/group -p wa -k CFG_group-w /etc/passwd -p wa -k CFG_passwd-w /etc/gshadow -k CFG_gshadow-w /etc/shadow -k CFG_shadow-w /etc/security/opasswd -k CFG_opasswd-w /etc/login.defs -p wa -k CFG_login.defs-w /etc/securetty -p wa -k CFG_securetty-w /var/log/faillog -p wa -k LOG_faillog-w /var/log/lastlog -p wa -k LOG_lastlog-w /var/log/tallylog -p wa -k LOG_tallylog-w /etc/hosts -p wa -k CFG_hosts-w /etc/sysconfig/network-scripts/ -p wa -k CFG_network-w /etc/inittab -p wa -k CFG_inittab-w /etc/rc.d/init.d/ -p wa -k CFG_initscripts-w /etc/ld.so.conf -p wa -k CFG_ld.so.conf-w /etc/localtime -p wa -k CFG_localtime-w /etc/sysctl.conf -p wa -k CFG_sysctl.conf-w /etc/modprobe.conf -p wa -k CFG_modprobe.conf-w /etc/pam.d/ -p wa -k CFG_pam-w /etc/security/limits.conf -p wa -k CFG_pam-w /etc/security/pam_env.conf -p wa -k CFG_pam-w /etc/security/namespace.conf -p wa -k CFG_pam-w /etc/security/namespace.init -p wa -k CFG_pam-w /etc/aliases -p wa -k CFG_aliases-w /etc/postfix/ -p wa -k CFG_postfix-w /etc/ssh/sshd_config -k CFG_sshd_config-w /etc/vsftpd.ftpusers -k CFG_vsftpd.ftpusers-a exit,always -F arch=b32 -S sethostname-w /etc/issue -p wa -k CFG_issue-w /etc/issue.net -p wa -k CFG_issue.netEOFsystemctl enable auditdservice auditd  restart</code></pre><h2 id="部署完整性检查工具软件"><a href="#部署完整性检查工具软件" class="headerlink" title="部署完整性检查工具软件"></a>部署完整性检查工具软件</h2><pre><code>yum -y install aide#1）执行初始化，建立第一份样本库aide -imv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz#2）更新到样本库aide -ucd /var/lib/aide/mv aide.db.new.gz aide.db.gz#3）定期执行入侵检测，并发送报告# crontab -e#45 17 * * * /usr/sbin/aide -C -V4 | /bin/mail -s ”AIDE REPORT $（date +%Y%m%d）” abcdefg#163.comecho &#39;45 23 * * * aide -C &gt;&gt; /var/log/aide/`date +%Y%m%d`_aide.log&#39; &gt;&gt; /var/spool/cron/root#记录aide可执行文件的md5 checksum：md5sum /usr/sbin/aide</code></pre><h2 id="关闭ctrl-alt-del重启机器"><a href="#关闭ctrl-alt-del重启机器" class="headerlink" title="关闭ctrl+alt+del重启机器"></a>关闭ctrl+alt+del重启机器</h2><pre><code>rm -f /usr/lib/systemd/system/ctrl-alt-del.targe &amp;&amp; init q#恢复  ln -s /usr/lib/systemd/system/reboot.target /usr/lib/systemd/system/ctrl-alt-del.target</code></pre><h2 id="文件加锁及修改默认权限"><a href="#文件加锁及修改默认权限" class="headerlink" title="文件加锁及修改默认权限"></a>文件加锁及修改默认权限</h2><pre><code>#1、限制   at/cron给授权的用户:rm -f /etc/cron.deny /etc/at.denyecho root &gt;/etc/cron.allowecho root &gt;/etc/at.allowchown root:root /etc/cron.allow /etc/at.allowchmod 400 /etc/cron.allow /etc/at.allow#2、Crontab文件限制访问权限:chown root:root /etc/crontabchmod 400 /etc/crontabchown -R root:root /var/spool/cronchmod -R go-rwx /var/spool/cronchown -R root:root /etc/cron.*chmod -R go-rwx /etc/cron.*#3、加锁重要口令文件和组文件chattr +i /etc/passwdchattr +i /etc/shadowchattr +i /etc/groupchattr +i /etc/gshadowchattr +i /etc/xinetd.confchattr +i /etc/services</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做运维需要注意什么？</title>
      <link href="/archives/45d44ad3.html"/>
      <url>/archives/45d44ad3.html</url>
      
        <content type="html"><![CDATA[<p>运维应该怎么分阶段学习？</p><ul><li>机器名不要设置为localhost。</li><li>只读共享，不需要（ro，sync），只需（ro）即可。</li><li>要学会规范，按照要求部署，哪怕一个字符都不要错。</li><li>敲路径时候尽量复制粘贴。少自己敲字符。防止简单的字符错误。</li><li>记得开机自动挂载放到/etc/rc.loacl（带注释）。不要放在fstab里（NFS不能放，本地系统可以放）。</li><li>切换root方法，sudo su -</li><li>每隔步骤操作后都要及时检查，确保每一步正确，起码不犯超级菜的错误。</li><li>NFS服务端共享目录可写时，不要给777权限，修改用户或属组nfsnobody。可读时权限属组都不需要动，就默认root即可。</li><li>增加SecureCRT标签时，不需要新建标签。直接复制标签然后去改（配置现成的）。</li><li>提前关闭iptables和防火墙，克隆虚拟机之前就优化好。</li><li>确保所有服务器uid为65534的用户为nfsnobody或者所有服务器都有具备uid为65534这样的用户。</li><li>模拟错误：模拟重现故障的能力是运维人员最重要的能力。</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lnmp一键部署脚本</title>
      <link href="/archives/24beeabf.html"/>
      <url>/archives/24beeabf.html</url>
      
        <content type="html"><![CDATA[<h2 id="Lnmp一键部署脚本"><a href="#Lnmp一键部署脚本" class="headerlink" title="Lnmp一键部署脚本"></a>Lnmp一键部署脚本</h2><pre><code>#!/bin/bash##DATE:2016-7-25##USER:owelinux###install wallet#######install mysql##################################################yum -y install cmake ncurses-devel  bison libaio  make gcc gcc-c++mkdir  -p /application/toolscd /application/toolswget http://pkgs.fedoraproject.org/repo/pkgs/community-mysql/mysql-boost-5.7.14.tar.gz/f90464874ee635ff63c436d1b64fe311/mysql-boost-5.7.14.tar.gztar xvf mysql-boost-5.7.14.tar.gzcd mysql-5.7.14/cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql/ \-DMYSQL_DATADIR=/data/mysqlData/mysql21406/  \-DWITH_MYISAM_STORAGE_ENGINE=1 \-DWITH_INNOBASE_STORAGE_ENGINE=1  \-DDEFAULT_CHARSET=utf8 \-DDEFAULT_COLLATION=utf8_general_ci  \-DDOWNLOAD_BOOST=1 \-DDOWNLOAD_BOOST=1  \-DWITH_BOOST=./boost/ #boost路径修改一下 指向你源码路径make  -j4 &amp;&amp; make installgroupadd mysqluseradd -M -g mysql -s /sbin/nologin mysqlchown -R mysql:mysql /application/mysqlmkdir -p /data/mysqlData/mysql21406mkdir /data/mysqlData/mysql21406/binlogmkdir /data/mysqlData/mysql21406/relaylogchmod 750 /data/mysqlData/mysql21406/binlogchmod 750 /data/mysqlData/mysql21406/relaylogchown -R mysql:mysql /data/mysqlData/* # 初始化mysql/application/mysql/bin/mysqld --initialize --user=mysql --basedir=/application/mysql/ --datadir=/data/mysqlData/mysql21406/data/application/mysql/bin/mysql_ssl_rsa_setup -d /data/mysqlData/mysql21406/data/#上传mys.cnf配置文件cd /data/mysqlData/mysql21406chown -R mysql:mysql /data/mysqlData/mysql21406# 修改配置文件vim /data/mysqlData/mysql21406/my.cnf# 启动mysql/application/mysql/bin/mysqld_safe --defaults-file=/data/mysqlData/mysql21406/my.cnf --user=mysql &amp;/application/mysql/bin/mysql -uroot -S /data/mysqlData/mysql21406/mysql.sock -p# 设置root密码SET PASSWORD =PASSWORD(&#39;root&#39;);SET PASSWORD FOR username=PASSWORD(&#39;new password&#39;);create database zabbix character set utf8 collate utf8_bin;grant all privileges on zabbix.* to &#39;zabbix&#39;@&#39;%&#39;  identified by &#39;zabbix&#39;;flush privileges;# 设置开机自启动echo &quot;export PATH=\$PATH:/application/mysql/bin&quot;&gt;&gt;/etc/profilesource /etc/profileecho &#39;/application/mysql/bin/mysqld_safe --defaults-file=/data/mysqlData/mysql21406/my.cnf --user=mysql &amp;&#39; &gt;&gt;/etc/rc.local#安装nginx#######################################################useradd -M -s /sbin/nologin nginx#mkdir -p /var/log/nginx#cd /application/tools#wget http://nginx.org/download/nginx-1.10.1.tar.gz#tar zxvf nginx-1.10.1.tar.gz#cd nginx-1.10.1#yum -y install epel-release#yum -y install openssl openssl-devel  gcc C pcre pcre-devel bzip2-devel libcurl-devel libpng-devel libmcrypt-devel libxml2-devel readline-devel freetype freetype-devel#./configure --user=nginx --group=nginx --prefix=/application/nginx --with-http_stub_status_module --with-http_ssl_module#make &amp;&amp; make installyum -y install openssl openssl-devel  gcc C pcre pcre-devel bzip2-devel libcurl-devel libpng-devel libmcrypt-devel libxml2-devel readline-devel gd-devel perl-devel perl-ExtUtils-Embed#安装openrestyyum -y install epel-releaseyum -y install openssl openssl-devel  gcc C pcre pcre-devel bzip2-devel libcurl-devel libpng-devel libmcrypt-devel libxml2-devel libxslt-devel readline-devel gd-devel perl-devel perl-ExtUtils-Embedmkdir -p /application/toolscd /application/toolswget https://openresty.org/download/openresty-1.13.6.1.tar.gztar zxvf openresty-1.13.6.1.tar.gzcd openresty-1.13.6.1./configure \--prefix=/application/openresty \--with-http_iconv_module \--with-luajit \--user=nginx \--group=nginx \--with-select_module \--with-poll_module \--with-threads \--with-ipv6 \--with-http_v2_module \--with-http_ssl_module \--with-http_realip_module \--with-http_addition_module \--with-http_xslt_module \--with-http_xslt_module=dynamic \--with-http_image_filter_module \--with-http_image_filter_module=dynamic \--with-http_sub_module \--with-http_gunzip_module \--with-http_gzip_static_module \--with-http_auth_request_module \--with-http_random_index_module \--with-http_secure_link_module \--with-http_degradation_module \--with-http_slice_module \--with-http_stub_status_module \--with-http_perl_module \--with-http_perl_module=dynamic \--with-stream \--with-stream=dynamic \--with-stream_ssl_module \--with-pcre \--with-pcre-jitgmake -j4 &amp;&amp; gmake installuseradd -s /sbin/nologin -M nginxln -sv /application/openresty/nginx  /application/nginxln -s /application/openresty/nginx/sbin/nginx  /usr/sbin/nginx \/application/nginx/sbin/nginx# 设置开机自启动echo &quot;export PATH=\$PATH:/application/openresty/nginx/sbin&quot; &gt;&gt;/etc/profilesource /etc/profilechmod +x /etc/rc.localecho &quot;/application/openresty/nginx/sbin/nginx&quot; &gt;&gt;/etc/rc.localmkdir -p /data/tmp/nginx/client_tempmkdir -p /data/tmp/nginx/proxy_tempchmod 711 /data/tmp/nginx#安装php###############################################yum -y install epel-release#cd /application/tools#wget http://www.atomicorp.com/installers/atomic#sh ./atomicyum -y install  gcc gcc-c++   C  autoconf  make mcrypt  mhash zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers libxslt libxslt-devel libmcrypt libmcrypt-devel libpng12 libpng12-devel libcurl  libcurl-devel readline-devel libXpm-devel gmp gmp-devel  mysql-devel unixODBC unixODBC-devel pspell-devel net-snmp net-snmp-develcd /application/toolswget http://cn2.php.net/distributions/php-7.1.2.tar.gztar -zxvf php-7.1.2.tar.gzcd php-7.1.2./configure \  --prefix=/application/php7 \  --with-mysqli=mysqlnd \  --with-pdo-mysql=mysqlnd \  --with-iconv \  --with-iconv-dir=/usr/local/libiconv \  --with-freetype-dir \  --without-pear \  --with-fpm-user=nginx \  --with-fpm-group=nginx \  --with-jpeg-dir \  --with-png-dir \  --with-zlib \  --with-zlib-dir \  --with-bz2  \  --with-xsl \  --with-xmlrpc \  --with-mhash \  --with-mcrypt \  --with-gd  \  --with-openssl    \  --with-libxml-dir \  --with-readline \  --with-gettext \  --with-pcre-regex \  --with-curl \  --disable-rpath \  --disable-ipv6  \  --disable-debug \  --enable-xml \  --enable-bcmath \  --enable-shmop \  --enable-sysvsem \  --enable-sysvmsg \  --enable-sysvshm \  --enable-mbregex \  --enable-mysqlnd \  --enable-fpm \  --enable-mbstring \  --enable-gd-native-ttf \  --enable-pcntl \  --enable-sockets \  --enable-soap \  --enable-short-tags \  --enable-static \  --enable-ftp \  --enable-opcache=yes \  --enable-json \  --enable-zip\  --enable-exif \  --enable-inline-optimization#ln -s /application/mysql/lib/libmysqlclient.so.20 /usr/lib64make -j4 &amp;&amp; make installecho &quot;export PATH=&quot;/application/php7/bin:\$PATH&quot;&quot; &gt;&gt;/etc/profilesource /etc/profileecho &quot;/application/php7/sbin/php-fpm&quot; &gt;&gt;/etc/rc.local####################################################php7环境安装模块：# 安装emqttd#cd /application/tools#wget http://emqtt.io/static/brokers/emqttd-centos6.8-v2.1.0-beta.1.zip#unzip emqttd-centos6.8-v2.1.0-beta.1.zip#cd emqttd#./bin/emqttd start#./bin/emqttd_ctl status# 安装memcache、redis、yaf模块#cd /application/tools#wget http://pecl.php.net/get/memcache-2.2.5.tgz#tar xf memcache-2.2.5.tgz#cd memcache-2.2.5#/application/php/bin/phpize#./configure --with-php-config=/application/php/bin/php-config#make &amp;&amp; make install# 安装yaf模块cd /application/toolswget https://pecl.php.net/get/yaf-3.0.5.tgztar -zxvf yaf-3.0.5.tgzcd yaf-3.0.5/application/php7/bin/phpize./configure --with-php-config=/application/php7/bin/php-configmake &amp;&amp; make install# 安装redis模块cd /application/toolswget https://github.com/phpredis/phpredis/archive/develop.zipunzip develop.zipcd phpredis-develop/application/php7/bin/phpize./configure --with-php-config=/application/php7/bin/php-configmake &amp;&amp; make install# 安装seaslog模块cd /application/toolswget https://pecl.php.net/get/SeasLog-1.6.9.tgztar -zxvf SeasLog-1.6.9.tgzcd SeasLog-1.6.9/application/php7/bin/phpize./configure --with-php-config=/application/php7/bin/php-configmake &amp;&amp; make install# 安装rabbitmq模块yum -y install cmakecd /application/toolswget https://github.com/alanxz/rabbitmq-c/releases/download/v0.8.0/rabbitmq-c-0.8.0.tar.gztar -zxvf rabbitmq-c-0.8.0.tar.gzcd rabbitmq-c-0.8.0#mkdir build &amp;&amp; cd build#cmake -DCMAKE_INSTALL_PREFIX=/usr/local/librabbitmq ..#cmake --build ../configure --prefix=/usr/local/rabbitmq-cmake -j4 &amp;&amp; make installcd /application/toolswget https://pecl.php.net/get/amqp-1.9.1.tgztar -zxvf amqp-1.9.1.tgzcd amqp-1.9.1/application/php7/bin/phpize./configure --with-php-config=/application/php7/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c/make -j4 &amp;&amp; make install##php7环境配置cd /application/tools/php-7.1.2\cp php.ini-production  /application/php7/lib/php.inicd /application/php7/etc\cp php-fpm.conf.default php-fpm.confcd /application/php7/etc/php-fpm.d/\cp www.conf.default  www.conf/application/php7/sbin/php-fpm# 最后在php.ini定义加载模块就可以cat &gt;&gt;/application/php7/lib/php.ini&lt;&lt;EOFdate.timezone = &quot;Asia/Shanghai&quot;extension=redis.soextension=seaslog.soextension=yaf.soextension = amqp.soyaf.environ=cloudseaslog.default_basepath = /data/appLog/wallet            ;默认log根目录seaslog.default_logger = default                        ;默认logger目录seaslog.disting_type = 1                                ;是否以type分文件 1是 0否(默认)seaslog.disting_by_hour = 1                             ;是否每小时划分一个文件 1是 0否(默认)seaslog.use_buffer = 0                                  ;是否启用buffer 1是 0否(默认)seaslog.buffer_size = 100                               ;buffer中缓冲数量 默认0(不使用buffer_size)seaslog.level = 0                                       ;记录日志级别 默认0(所有日志)seaslog.trace_error = 1                                 ;自动记录错误 默认1(开启)seaslog.trace_exception = 0                             ;自动记录异常信息 默认0(关闭)seaslog.default_datetime_format = &quot;Y:m:d H:i:s&quot;         ;日期格式配置 默认&quot;Y:m:d H:i:s&quot;seaslog.appender = 1                                    ;日志存储介质 1File 2TCP 3UDP (默认为1)seaslog.remote_host = 127.0.0.1                         ;接收ip 默认127.0.0.1 (当使用TCP或UDP时必填)seaslog.remote_port = 514                               ;接收端口 默认514 (当使用TCP或UDP时必填)EOF#重启php-fpmpkill php-fpm/application/php7/sbin/php-fpm# 服务开机自启动cat &gt;&gt;/etc/rc.local&lt;&lt;EOF/application/php/sbin/php-fpm/application/nginx/sbin/nginx/application/mysql/bin/mysqld_safe --defaults-file=/data/mysqlData/mysql21406/my.cnf --user=mysql &amp;EOF# 内核调优cat &gt;&gt;/etc/sysctl.conf&lt;&lt;EOFnet.ipv4.tcp_max_syn_backlog = 65536net.core.netdev_max_backlog =  32768net.core.somaxconn = 32768net.core.wmem_default = 8388608net.core.rmem_default = 8388608net.core.rmem_max = 16777216net.core.wmem_max = 16777216net.ipv4.tcp_timestamps = 0net.ipv4.tcp_synack_retries = 2net.ipv4.tcp_syn_retries = 2net.ipv4.tcp_tw_recycle = 1#net.ipv4.tcp_tw_len = 1net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_mem = 94500000 915000000 927000000net.ipv4.tcp_max_orphans = 3276800#net.ipv4.tcp_fin_timeout = 30#net.ipv4.tcp_keepalive_time = 120net.ipv4.ip_local_port_range = 1024  65535EOF/sbin/sysctl -p</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lnmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜鸟运维给小白上手建议</title>
      <link href="/archives/4157c58e.html"/>
      <url>/archives/4157c58e.html</url>
      
        <content type="html"><![CDATA[<p>运维应该怎么分阶段学习？</p><h2 id="第一阶段：Linux运维基本功"><a href="#第一阶段：Linux运维基本功" class="headerlink" title="第一阶段：Linux运维基本功"></a>第一阶段：Linux运维基本功</h2><p>大致的知识点有这些：<br>计算机基础、Linux操作系统、网络基础、VIM编辑器、系统用户与权限、Linux文件系统与内核、系统服务与进程、MySQL数据库、LAMP环境配置+开源项目实战（YUM）<br>推荐书籍： 大学计算机基础、跟鸟哥学linux（基础篇和网络篇）</p><h2 id="第二阶段：Linux运维进阶"><a href="#第二阶段：Linux运维进阶" class="headerlink" title="第二阶段：Linux运维进阶"></a>第二阶段：Linux运维进阶</h2><p>大致的知识点有这些：<br>Bind高级应用(DNS服务器）、Ftp服务+Nfs服务+Samba服务、Postfix服务+Dovecot服务（邮件服务器）、Shell基础、Ssh服务以及无密码登录、Linux系统安全（防火墙）以及日志、Linux下安装包的管理、压缩工具讲解、Rsync文件同步服务、终极项目：Pxe网络安装系统实战</p><h2 id="第三阶段：Linux运维高级"><a href="#第三阶段：Linux运维高级" class="headerlink" title="第三阶段：Linux运维高级"></a>第三阶段：Linux运维高级</h2><p>大致的知识点有这些：<br>PHP及JAVA环境部署调优、APACHE/NGINX/TOMCAT配置详解与调优、KeepAlived+LVS高可用负载均衡服务器、Nginx+HAProxy实现负载均衡服务器、Varnish/squid反向代理（介绍CDN知识与应用）、分布式存储集群（FastDFS）、Tomcat LB Cluster集群(加强）、ZooKeeper分布式、Zabbix监控、ELK日志分析搭建、Git版本控制软件、初级运维自动化 Saltstack Puppet（基础）、大型项目架构与性能调优（Nagios、Cacti、ONEAPM）、终极项目：阿里云产品实战（ECS、RDS、LSB、安全）</p><h2 id="第四阶段：DBA阶段"><a href="#第四阶段：DBA阶段" class="headerlink" title="第四阶段：DBA阶段"></a>第四阶段：DBA阶段</h2><p>大致的知识点有这些：<br>MySQL基础操作、MySQL高级查询、MySQL权限管理、MySQL备份、还原与数据恢复、MySQL数据库管理工具介绍与实战、MySQL高级（索引与优化）、MySQL主从复制与读写分离、数据库中间件MyCAT，Altas，Amoeba实践与对比、Memcache技术Redis技术+集群、MongoDB技术+集群、终极项目：超大型数据库案例实战</p><h2 id="第五阶段：Shell编程阶段"><a href="#第五阶段：Shell编程阶段" class="headerlink" title="第五阶段：Shell编程阶段"></a>第五阶段：Shell编程阶段</h2><p>大致的知识点：<br>Shell编程进阶、Shell核心应用（集成到进阶）、正则表达式、文件操作实战（grep、sed、awk）、Shell实战（Zabbix扩展-Shell监控）</p><h2 id="第六阶段：Linux云计算阶段"><a href="#第六阶段：Linux云计算阶段" class="headerlink" title="第六阶段：Linux云计算阶段"></a>第六阶段：Linux云计算阶段</h2><p>大致的知识点：<br>虚拟化技术、SaltStack进阶、Openstack自动化运维、Docker实战Jenkins+MavenHadoop、云计算、DevOps、项目实战：Openstack + Docker运维实战</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jekyll+github搭建博客</title>
      <link href="/archives/cbb6a177.html"/>
      <url>/archives/cbb6a177.html</url>
      
        <content type="html"><![CDATA[<p>博客有很多搭建方式，以下简单说一下jekyll+github搭建方法。</p><h3 id="1-安装-ruby-和-jekyll-环境"><a href="#1-安装-ruby-和-jekyll-环境" class="headerlink" title="1. 安装 ruby 和 jekyll 环境"></a>1. 安装 ruby 和 jekyll 环境</h3><p>这一步和第5步主要是为了让博客系统在本地跑起来，如果不想在本地运行，可以无视这两步，但我还是强烈建议试着先在本地跑起来，没有什么问题后再推送的 GitHub 上。</p><p>Windows 用户可以直接使用 <a href="http://rubyinstaller.org/" target="_blank" rel="noopener">RubyInstaller</a> 安装 ruby 环境。后续的操作中可能还会提示安装 DevKit，根据提示操作即可。</p><p>建议使用 <a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">RubyGems 镜像- Ruby China</a> 安装 jekyll。</p><p>更换 gen源 命令如下</p><pre><code>gem update --system # 尽可能用比较新的RubyGems 版本，建议 2.6.x 以上gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/gem sources -l  # 确保只有 gems.ruby-china.combundle config mirror.https://rubygems.org https://gems.ruby-china.com # 采用 Bundler 的 Gem 源代码镜像命令</code></pre><p>安装 jekyll 命令如下</p><pre><code>gem install jekyll</code></pre><p>详情可以查看 jekyll 官网。<a href="https://jekyllrb.com/" target="_blank" rel="noopener">https://jekyllrb.com/</a> 或 中文翻译版 jekyll 官网<a href="http://jekyllcn.com/" target="_blank" rel="noopener">http://jekyllcn.com/</a> （中文文档翻译落后于英文官网，有兴趣有时间的小伙伴可以参与翻译，为开源世界贡献一份力哦~）</p><p>在 mac OS X El Capitan 系统下安装可能会出现问题，解决方案详情见 jekyll 官网: <a href="https://jekyllrb.com/docs/troubleshooting/#jekyll-amp-mac-os-x-1011" target="_blank" rel="noopener">https://jekyllrb.com/docs/troubleshooting/#jekyll-amp-mac-os-x-1011</a></p><p>对 jekyll 本身感兴趣的同学可以看看 jekyll 源码: <a href="https://github.com/jekyll/jekyll" target="_blank" rel="noopener">https://github.com/jekyll/jekyll</a></p><p><img src="http://jekyllcn.com/img/logo-2x.png" alt="jekyll logo"></p><h3 id="2-选择自己喜欢的博客主题"><a href="#2-选择自己喜欢的博客主题" class="headerlink" title="2. 选择自己喜欢的博客主题"></a>2. 选择自己喜欢的博客主题</h3><p>可以直接 clone 、下载 或 fork 这个仓库的代码即可</p><h3 id="3-修改参数"><a href="#3-修改参数" class="headerlink" title="3. 修改参数"></a>3. 修改参数</h3><p>主要修改 <code>_config.yml</code> 中的参数和自己的网站小图<code>favicon.ico</code></p><p><code>_config.yml</code>文件中</p><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>主要用于网站头部header。</p><pre class="line-numbers language-yml"><code class="language-yml"># Site settingstitle: HyGbrief-intro: xxxxbaseurl: "" # the subpath of your site, e.g. /blogurl: "http://username.github.io" # the base hostname & protocol for your site<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链接信息"><a href="#链接信息" class="headerlink" title="链接信息"></a>链接信息</h4><p>主要用于网站底部footer。</p><pre class="line-numbers language-yml"><code class="language-yml"># other linkstwitter_username: usernamefacebook_username: usernamegithub_username:  usernameemail: username@qq.comweibo_username: usernamezhihu_username: usernamelinkedIn_username: usernamedribbble_username:description_footer: 本站记录xxx！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="评论信息"><a href="#评论信息" class="headerlink" title="评论信息"></a>评论信息</h4><p>获取<code>short_name</code>的方法：</p><p>访问 <a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a> 或 <a href="http://duoshuo.com/" target="_blank" rel="noopener">http://duoshuo.com/</a> 根据提示操作即可。</p><pre class="line-numbers language-yml"><code class="language-yml"># comments# two ways to comment, only choose one, and use your own short name# 两种评论插件，选一个就好了，使用自己的 short_nameduoshuo_shortname: #hygblogdisqus_shortname: shortname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行成功后，可以在 disqus 或 多说 的后台管理页看到相关信息。</p><h4 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h4><p>获取 百度统计id 或 Google Analytics id 的方法：</p><p>访问 <a href="http://tongji.baidu.com/" target="_blank" rel="noopener">http://tongji.baidu.com/</a> 或 <a href="https://www.google.com/analytics/" target="_blank" rel="noopener">https://www.google.com/analytics/</a> 根据提示操作即可。当然，如果不想添加统计信息，这两个参数可以不填。</p><pre class="line-numbers language-yml"><code class="language-yml"># statistic analysis 统计代码# 百度统计 id，将统计代码替换为自己的百度统计id，即# hm.src = "//hm.baidu.com/hm.js?xxxxxxxxxxxx";# xxxxx字符串baidu_tongji_id: xxxxgoogle_analytics_id: xxxx # google 分析追踪id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功后，进入自己的百度统计或 Google Analytics 后台管理，即可看到网站的访问量、访客等相关信息。</p><h3 id="4-写文章"><a href="#4-写文章" class="headerlink" title="4. 写文章"></a>4. 写文章</h3><p><code>_posts</code>目录下存放文章信息，文章头部注明 layout(布局)、title、date、categories、tags、author(可选)、mathjax(可选，点击<a href="https://www.mathjax.org/" target="_blank" rel="noopener">这里</a>查看更多关于<code>Mathjax</code>)，如下：</p><pre><code>---layout: posttitle:  &quot;建站日志&quot;date:   2018-03-12 11:40:18 +0800categories: jekylltags: jekyll markdown Foxit RubyGemsauthor: 晚点咖啡mathjax: true---</code></pre><p>下面这两行代码为产生目录时使用</p><pre><code>* content{:toc}</code></pre><p>文章中存在的4次换行为摘要分割符，换行前的内容会以摘要的形式显示在主页Home上，进入文章页不影响。</p><p>换行符的设置见配置文件<code>_config.yml</code>的 excerpt，如下：</p><pre class="line-numbers language-yml"><code class="language-yml"># excerptexcerpt_separator: "\n\n\n\n"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用 markdown 语法写文章。</p><p>代码风格与 GitHub 上 README 或 issue 中的一致。使用3个```的方式。</p><h3 id="5-本地运行"><a href="#5-本地运行" class="headerlink" title="5. 本地运行"></a>5. 本地运行</h3><p>本地执行</p><pre><code>jekyll s</code></pre><p>显示</p><pre><code>Configuration file: E:/GitWorkSpace/blog/_config.yml            Source: E:/GitWorkSpace/blog       Destination: E:/GitWorkSpace/blog/_site Incremental build: disabled. Enable with --incremental      Generating...                    done in 6.33 seconds.  Please add the following to your Gemfile to avoid polling for changes:    gem &#39;wdm&#39;, &#39;&gt;= 0.1.0&#39; if Gem.win_platform? Auto-regeneration: enabled for &#39;E:/GitWorkSpace/blog&#39;Configuration file: E:/GitWorkSpace/blog/_config.yml    Server address: http://127.0.0.1:4000/  Server running... press ctrl-c to stop.</code></pre><p>在本地访问 localhost:4000 即可看到博客主页。</p><p>若安装了 Foxit 福昕pdf阅读器可能会占用4000端口，关闭 Foxit服务 或切换 jekyll 端口即可解决。详情见文章：<a href="http://gaohaoyang.github.io/2016/03/12/jekyll-theme-version-2.0/" target="_blank" rel="noopener">对这个 jekyll 博客主题的改版和重构</a></p><p>若正在使用全局代理，可能会报错502，关闭全局代理即可。</p><h3 id="6-发布到-GitHub"><a href="#6-发布到-GitHub" class="headerlink" title="6. 发布到 GitHub"></a>6. 发布到 GitHub</h3><p>没什么问题，推送到自己的博客仓库即可。</p><h3 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a>7. 参考资料</h3><p><a href="http://gaohaoyang.github.io" target="_blank" rel="noopener">http://gaohaoyang.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
